/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassSensorConfigurationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_SENSOR_CONFIGURATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSensorConfigurationV1LoopbackTest {
    /**
     * Performs an in/out test of the SENSOR_TRIGGER_LEVEL_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param current {@link Boolean}
     * @param defaultValue {@link Boolean}
     * @param sensorType {@link String}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param triggerValue {@link byte[]}
     */
    public static void testSensorTriggerLevelSetLoopback(Boolean current, Boolean defaultValue, String sensorType,
            Integer scale, Integer precision, byte[] triggerValue) {
        byte[] testPayload = CommandClassSensorConfigurationV1.getSensorTriggerLevelSet(current, defaultValue,
                sensorType, scale, precision, triggerValue);

        Map<String, Object> response = CommandClassSensorConfigurationV1.handleSensorTriggerLevelSet(testPayload);
        assertEquals(current, (Boolean) response.get("CURRENT"));
        assertEquals(defaultValue, (Boolean) response.get("DEFAULT_VALUE"));
        assertEquals(sensorType, (String) response.get("SENSOR_TYPE"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(triggerValue, (byte[]) response.get("TRIGGER_VALUE"));
    }

    /**
     * Performs an in/out test of the SENSOR_TRIGGER_LEVEL_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sensorType {@link String}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param triggerValue {@link byte[]}
     */
    public static void testSensorTriggerLevelReportLoopback(String sensorType, Integer scale, Integer precision,
            byte[] triggerValue) {
        byte[] testPayload = CommandClassSensorConfigurationV1.getSensorTriggerLevelReport(sensorType, scale, precision,
                triggerValue);

        Map<String, Object> response = CommandClassSensorConfigurationV1.handleSensorTriggerLevelReport(testPayload);
        assertEquals(sensorType, (String) response.get("SENSOR_TYPE"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(triggerValue, (byte[]) response.get("TRIGGER_VALUE"));
    }

}
