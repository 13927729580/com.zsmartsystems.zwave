/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassTransportServiceV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_TRANSPORT_SERVICE</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassTransportServiceV1LoopbackTest {
    /**
     * Performs an in/out test of the COMMAND_FIRST_FRAGMENT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramSize1 {@link Integer}
     * @param datagramSize2 {@link Integer}
     * @param sequenceNo {@link Integer}
     * @param payload {@link byte[]}
     * @param checksum {@link Integer}
     */
    public static void testCommandFirstFragmentLoopback(Integer datagramSize1, Integer datagramSize2, Integer sequenceNo,
            byte[] payload, Integer checksum) {
        byte[] testPayload = CommandClassTransportServiceV1.getCommandFirstFragment(datagramSize1, datagramSize2,
                sequenceNo, payload, checksum);

        Map<String, Object> response = CommandClassTransportServiceV1.handleCommandFirstFragment(testPayload);
        assertEquals(datagramSize1, (Integer) response.get("DATAGRAM_SIZE1"));
        assertEquals(datagramSize2, (Integer) response.get("DATAGRAM_SIZE2"));
        assertEquals(sequenceNo, (Integer) response.get("SEQUENCE_NO"));
        assertEquals(payload, (byte[]) response.get("PAYLOAD"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
    }

    /**
     * Performs an in/out test of the COMMAND_SUBSEQUENT_FRAGMENT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramSize1 {@link Integer}
     * @param datagramSize2 {@link Integer}
     * @param datagramOffset1 {@link Integer}
     * @param sequenceNo {@link Integer}
     * @param datagramOffset2 {@link Integer}
     * @param payload {@link byte[]}
     * @param checksum {@link Integer}
     */
    public static void testCommandSubsequentFragmentLoopback(Integer datagramSize1, Integer datagramSize2,
            Integer datagramOffset1, Integer sequenceNo, Integer datagramOffset2, byte[] payload, Integer checksum) {
        byte[] testPayload = CommandClassTransportServiceV1.getCommandSubsequentFragment(datagramSize1, datagramSize2,
                datagramOffset1, sequenceNo, datagramOffset2, payload, checksum);

        Map<String, Object> response = CommandClassTransportServiceV1.handleCommandSubsequentFragment(testPayload);
        assertEquals(datagramSize1, (Integer) response.get("DATAGRAM_SIZE1"));
        assertEquals(datagramSize2, (Integer) response.get("DATAGRAM_SIZE2"));
        assertEquals(datagramOffset1, (Integer) response.get("DATAGRAM_OFFSET1"));
        assertEquals(sequenceNo, (Integer) response.get("SEQUENCE_NO"));
        assertEquals(datagramOffset2, (Integer) response.get("DATAGRAM_OFFSET2"));
        assertEquals(payload, (byte[]) response.get("PAYLOAD"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
    }

}
