/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassTransportServiceV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_TRANSPORT_SERVICE</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassTransportServiceV2LoopbackTest {
    /**
     * Performs an in/out test of the COMMAND_FIRST_SEGMENT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramSize1 {@link Integer}
     * @param datagramSize2 {@link Integer}
     * @param ext {@link Boolean}
     * @param sessionId {@link Integer}
     * @param headerExtensionLength {@link Integer}
     * @param headerExtension {@link byte[]}
     * @param payload {@link byte[]}
     * @param frameCheckSequence {@link Integer}
     */
    public static void testCommandFirstSegmentLoopback(Integer datagramSize1, Integer datagramSize2, Boolean ext,
            Integer sessionId, Integer headerExtensionLength, byte[] headerExtension, byte[] payload,
            Integer frameCheckSequence) {
        byte[] testPayload = CommandClassTransportServiceV2.getCommandFirstSegment(datagramSize1, datagramSize2, ext,
                sessionId, headerExtensionLength, headerExtension, payload, frameCheckSequence);

        Map<String, Object> response = CommandClassTransportServiceV2.handleCommandFirstSegment(testPayload);
        assertEquals(datagramSize1, (Integer) response.get("DATAGRAM_SIZE1"));
        assertEquals(datagramSize2, (Integer) response.get("DATAGRAM_SIZE2"));
        assertEquals(ext, (Boolean) response.get("EXT"));
        assertEquals(sessionId, (Integer) response.get("SESSION_ID"));
        assertEquals(headerExtensionLength, (Integer) response.get("HEADER_EXTENSION_LENGTH"));
        assertEquals(headerExtension, (byte[]) response.get("HEADER_EXTENSION"));
        assertEquals(payload, (byte[]) response.get("PAYLOAD"));
        assertEquals(frameCheckSequence, (Integer) response.get("FRAME_CHECK_SEQUENCE"));
    }

    /**
     * Performs an in/out test of the COMMAND_SEGMENT_REQUEST command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramOffset1 {@link Integer}
     * @param sessionId {@link Integer}
     * @param datagramOffset2 {@link Integer}
     */
    public static void testCommandSegmentRequestLoopback(Integer datagramOffset1, Integer sessionId,
            Integer datagramOffset2) {
        byte[] testPayload = CommandClassTransportServiceV2.getCommandSegmentRequest(datagramOffset1, sessionId,
                datagramOffset2);

        Map<String, Object> response = CommandClassTransportServiceV2.handleCommandSegmentRequest(testPayload);
        assertEquals(datagramOffset1, (Integer) response.get("DATAGRAM_OFFSET1"));
        assertEquals(sessionId, (Integer) response.get("SESSION_ID"));
        assertEquals(datagramOffset2, (Integer) response.get("DATAGRAM_OFFSET2"));
    }

    /**
     * Performs an in/out test of the COMMAND_SUBSEQUENT_SEGMENT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramSize1 {@link Integer}
     * @param datagramSize2 {@link Integer}
     * @param datagramOffset1 {@link Integer}
     * @param ext {@link Boolean}
     * @param sessionId {@link Integer}
     * @param datagramOffset2 {@link Integer}
     * @param headerExtensionLength {@link Integer}
     * @param headerExtension {@link byte[]}
     * @param payload {@link byte[]}
     * @param frameCheckSequence {@link Integer}
     */
    public static void testCommandSubsequentSegmentLoopback(Integer datagramSize1, Integer datagramSize2,
            Integer datagramOffset1, Boolean ext, Integer sessionId, Integer datagramOffset2,
            Integer headerExtensionLength, byte[] headerExtension, byte[] payload, Integer frameCheckSequence) {
        byte[] testPayload = CommandClassTransportServiceV2.getCommandSubsequentSegment(datagramSize1, datagramSize2,
                datagramOffset1, ext, sessionId, datagramOffset2, headerExtensionLength, headerExtension, payload,
                frameCheckSequence);

        Map<String, Object> response = CommandClassTransportServiceV2.handleCommandSubsequentSegment(testPayload);
        assertEquals(datagramSize1, (Integer) response.get("DATAGRAM_SIZE1"));
        assertEquals(datagramSize2, (Integer) response.get("DATAGRAM_SIZE2"));
        assertEquals(datagramOffset1, (Integer) response.get("DATAGRAM_OFFSET1"));
        assertEquals(ext, (Boolean) response.get("EXT"));
        assertEquals(sessionId, (Integer) response.get("SESSION_ID"));
        assertEquals(datagramOffset2, (Integer) response.get("DATAGRAM_OFFSET2"));
        assertEquals(headerExtensionLength, (Integer) response.get("HEADER_EXTENSION_LENGTH"));
        assertEquals(headerExtension, (byte[]) response.get("HEADER_EXTENSION"));
        assertEquals(payload, (byte[]) response.get("PAYLOAD"));
        assertEquals(frameCheckSequence, (Integer) response.get("FRAME_CHECK_SEQUENCE"));
    }

    /**
     * Performs an in/out test of the COMMAND_SEGMENT_COMPLETE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sessionId {@link Integer}
     */
    public static void testCommandSegmentCompleteLoopback(Integer sessionId) {
        byte[] testPayload = CommandClassTransportServiceV2.getCommandSegmentComplete(sessionId);

        Map<String, Object> response = CommandClassTransportServiceV2.handleCommandSegmentComplete(testPayload);
        assertEquals(sessionId, (Integer) response.get("SESSION_ID"));
    }

    /**
     * Performs an in/out test of the COMMAND_SEGMENT_WAIT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param pendingFragments {@link Integer}
     */
    public static void testCommandSegmentWaitLoopback(Integer pendingFragments) {
        byte[] testPayload = CommandClassTransportServiceV2.getCommandSegmentWait(pendingFragments);

        Map<String, Object> response = CommandClassTransportServiceV2.handleCommandSegmentWait(testPayload);
        assertEquals(pendingFragments, (Integer) response.get("PENDING_FRAGMENTS"));
    }

}
