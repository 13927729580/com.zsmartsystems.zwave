/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassNotificationV6;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_NOTIFICATION</b> version <b>6</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNotificationV6LoopbackTest {
    /**
     * Performs an in/out test of the EVENT_SUPPORTED_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param notificationType {@link String}
     */
    public static void testEventSupportedGetLoopback(String notificationType) {
        byte[] testPayload = CommandClassNotificationV6.getEventSupportedGet(notificationType);

        Map<String, Object> response = CommandClassNotificationV6.handleEventSupportedGet(testPayload);
        assertEquals(notificationType, (String) response.get("NOTIFICATION_TYPE"));
    }

    /**
     * Performs an in/out test of the EVENT_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param notificationType {@link String}
     * @param bitMask {@link List<Integer>}
     */
    public static void testEventSupportedReportLoopback(String notificationType, List<Integer> bitMask) {
        byte[] testPayload = CommandClassNotificationV6.getEventSupportedReport(notificationType, bitMask);

        Map<String, Object> response = CommandClassNotificationV6.handleEventSupportedReport(testPayload);
        assertEquals(notificationType, (String) response.get("NOTIFICATION_TYPE"));
        assertEquals(bitMask, (List<Integer>) response.get("BIT_MASK"));
    }

    /**
     * Performs an in/out test of the NOTIFICATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param v1AlarmType {@link Integer}
     * @param notificationType {@link String}
     * @param event {@link Integer}
     */
    public static void testNotificationGetLoopback(Integer v1AlarmType, String notificationType, Integer event) {
        byte[] testPayload = CommandClassNotificationV6.getNotificationGet(v1AlarmType, notificationType, event);

        Map<String, Object> response = CommandClassNotificationV6.handleNotificationGet(testPayload);
        assertEquals(v1AlarmType, (Integer) response.get("V1_ALARM_TYPE"));
        assertEquals(notificationType, (String) response.get("NOTIFICATION_TYPE"));
        assertEquals(event, (Integer) response.get("EVENT"));
    }

    /**
     * Performs an in/out test of the NOTIFICATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param v1AlarmType {@link Integer}
     * @param v1AlarmLevel {@link Integer}
     * @param notificationStatus {@link String}
     * @param notificationType {@link String}
     * @param event {@link Integer}
     * @param sequence {@link Boolean}
     * @param eventParameter {@link byte[]}
     * @param sequenceNumber {@link Integer}
     */
    public static void testNotificationReportLoopback(Integer v1AlarmType, Integer v1AlarmLevel,
            String notificationStatus, String notificationType, Integer event, Boolean sequence, byte[] eventParameter,
            Integer sequenceNumber) {
        byte[] testPayload = CommandClassNotificationV6.getNotificationReport(v1AlarmType, v1AlarmLevel,
                notificationStatus, notificationType, event, sequence, eventParameter, sequenceNumber);

        Map<String, Object> response = CommandClassNotificationV6.handleNotificationReport(testPayload);
        assertEquals(v1AlarmType, (Integer) response.get("V1_ALARM_TYPE"));
        assertEquals(v1AlarmLevel, (Integer) response.get("V1_ALARM_LEVEL"));
        assertEquals(notificationStatus, (String) response.get("NOTIFICATION_STATUS"));
        assertEquals(notificationType, (String) response.get("NOTIFICATION_TYPE"));
        assertEquals(event, (Integer) response.get("EVENT"));
        assertEquals(sequence, (Boolean) response.get("SEQUENCE"));
        assertEquals(eventParameter, (byte[]) response.get("EVENT_PARAMETER"));
        assertEquals(sequenceNumber, (Integer) response.get("SEQUENCE_NUMBER"));
    }

    /**
     * Performs an in/out test of the NOTIFICATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param notificationType {@link String}
     * @param notificationStatus {@link String}
     */
    public static void testNotificationSetLoopback(String notificationType, String notificationStatus) {
        byte[] testPayload = CommandClassNotificationV6.getNotificationSet(notificationType, notificationStatus);

        Map<String, Object> response = CommandClassNotificationV6.handleNotificationSet(testPayload);
        assertEquals(notificationType, (String) response.get("NOTIFICATION_TYPE"));
        assertEquals(notificationStatus, (String) response.get("NOTIFICATION_STATUS"));
    }

    /**
     * Performs an in/out test of the NOTIFICATION_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param v1Alarm {@link Boolean}
     * @param bitMask {@link List<String>}
     */
    public static void testNotificationSupportedReportLoopback(Boolean v1Alarm, List<String> bitMask) {
        byte[] testPayload = CommandClassNotificationV6.getNotificationSupportedReport(v1Alarm, bitMask);

        Map<String, Object> response = CommandClassNotificationV6.handleNotificationSupportedReport(testPayload);
        assertEquals(v1Alarm, (Boolean) response.get("V1_ALARM"));
        assertEquals(bitMask, (List<String>) response.get("BIT_MASK"));
    }

}
