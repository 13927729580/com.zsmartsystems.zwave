/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassPowerlevelV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_POWERLEVEL</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassPowerlevelV1LoopbackTest {
    /**
     * Performs an in/out test of the POWERLEVEL_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param powerLevel {@link String}
     * @param timeout {@link Integer}
     */
    public static void testPowerlevelSetLoopback(String powerLevel, Integer timeout) {
        byte[] testPayload = CommandClassPowerlevelV1.getPowerlevelSet(powerLevel, timeout);

        Map<String, Object> response = CommandClassPowerlevelV1.handlePowerlevelSet(testPayload);
        assertEquals(powerLevel, (String) response.get("POWER_LEVEL"));
        assertEquals(timeout, (Integer) response.get("TIMEOUT"));
    }

    /**
     * Performs an in/out test of the POWERLEVEL_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param powerLevel {@link String}
     * @param timeout {@link Integer}
     */
    public static void testPowerlevelReportLoopback(String powerLevel, Integer timeout) {
        byte[] testPayload = CommandClassPowerlevelV1.getPowerlevelReport(powerLevel, timeout);

        Map<String, Object> response = CommandClassPowerlevelV1.handlePowerlevelReport(testPayload);
        assertEquals(powerLevel, (String) response.get("POWER_LEVEL"));
        assertEquals(timeout, (Integer) response.get("TIMEOUT"));
    }

    /**
     * Performs an in/out test of the POWERLEVEL_TEST_NODE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param testNodeid {@link Integer}
     * @param powerLevel {@link String}
     * @param testFrameCount {@link Integer}
     */
    public static void testPowerlevelTestNodeSetLoopback(Integer testNodeid, String powerLevel, Integer testFrameCount) {
        byte[] testPayload = CommandClassPowerlevelV1.getPowerlevelTestNodeSet(testNodeid, powerLevel, testFrameCount);

        Map<String, Object> response = CommandClassPowerlevelV1.handlePowerlevelTestNodeSet(testPayload);
        assertEquals(testNodeid, (Integer) response.get("TEST_NODEID"));
        assertEquals(powerLevel, (String) response.get("POWER_LEVEL"));
        assertEquals(testFrameCount, (Integer) response.get("TEST_FRAME_COUNT"));
    }

    /**
     * Performs an in/out test of the POWERLEVEL_TEST_NODE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param testNodeid {@link String}
     * @param statusOfOperation {@link String}
     * @param testFrameCount {@link Integer}
     */
    public static void testPowerlevelTestNodeReportLoopback(String testNodeid, String statusOfOperation,
            Integer testFrameCount) {
        byte[] testPayload = CommandClassPowerlevelV1.getPowerlevelTestNodeReport(testNodeid, statusOfOperation,
                testFrameCount);

        Map<String, Object> response = CommandClassPowerlevelV1.handlePowerlevelTestNodeReport(testPayload);
        assertEquals(testNodeid, (String) response.get("TEST_NODEID"));
        assertEquals(statusOfOperation, (String) response.get("STATUS_OF_OPERATION"));
        assertEquals(testFrameCount, (Integer) response.get("TEST_FRAME_COUNT"));
    }

}
