/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassFirmwareUpdateMdV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_FIRMWARE_UPDATE_MD</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassFirmwareUpdateMdV2LoopbackTest {
    /**
     * Performs an in/out test of the FIRMWARE_MD_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param firmwareId {@link Integer}
     * @param checksum {@link Integer}
     */
    public static void testFirmwareMdReportLoopback(Integer manufacturerId, Integer firmwareId, Integer checksum) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV2.getFirmwareMdReport(manufacturerId, firmwareId, checksum);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV2.handleFirmwareMdReport(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(firmwareId, (Integer) response.get("FIRMWARE_ID"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_REQUEST_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param firmwareId {@link Integer}
     * @param checksum {@link Integer}
     */
    public static void testFirmwareUpdateMdRequestGetLoopback(Integer manufacturerId, Integer firmwareId,
            Integer checksum) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV2.getFirmwareUpdateMdRequestGet(manufacturerId, firmwareId,
                checksum);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV2.handleFirmwareUpdateMdRequestGet(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(firmwareId, (Integer) response.get("FIRMWARE_ID"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_REQUEST_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param status {@link String}
     */
    public static void testFirmwareUpdateMdRequestReportLoopback(String status) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV2.getFirmwareUpdateMdRequestReport(status);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV2.handleFirmwareUpdateMdRequestReport(testPayload);
        assertEquals(status, (String) response.get("STATUS"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param numberOfReports {@link Integer}
     * @param reportNumber1 {@link Integer}
     * @param zero {@link Boolean}
     * @param reportNumber2 {@link Integer}
     */
    public static void testFirmwareUpdateMdGetLoopback(Integer numberOfReports, Integer reportNumber1, Boolean zero,
            Integer reportNumber2) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV2.getFirmwareUpdateMdGet(numberOfReports, reportNumber1, zero,
                reportNumber2);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV2.handleFirmwareUpdateMdGet(testPayload);
        assertEquals(numberOfReports, (Integer) response.get("NUMBER_OF_REPORTS"));
        assertEquals(reportNumber1, (Integer) response.get("REPORT_NUMBER1"));
        assertEquals(zero, (Boolean) response.get("ZERO"));
        assertEquals(reportNumber2, (Integer) response.get("REPORT_NUMBER2"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param reportNumber1 {@link Integer}
     * @param last {@link Boolean}
     * @param reportNumber2 {@link Integer}
     * @param data {@link byte[]}
     * @param checksum {@link Integer}
     */
    public static void testFirmwareUpdateMdReportLoopback(Integer reportNumber1, Boolean last, Integer reportNumber2,
            byte[] data, Integer checksum) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV2.getFirmwareUpdateMdReport(reportNumber1, last, reportNumber2,
                data, checksum);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV2.handleFirmwareUpdateMdReport(testPayload);
        assertEquals(reportNumber1, (Integer) response.get("REPORT_NUMBER1"));
        assertEquals(last, (Boolean) response.get("LAST"));
        assertEquals(reportNumber2, (Integer) response.get("REPORT_NUMBER2"));
        assertEquals(data, (byte[]) response.get("DATA"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param status {@link String}
     */
    public static void testFirmwareUpdateMdStatusReportLoopback(String status) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV2.getFirmwareUpdateMdStatusReport(status);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV2.handleFirmwareUpdateMdStatusReport(testPayload);
        assertEquals(status, (String) response.get("STATUS"));
    }

}
