/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassClockV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_CLOCK</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassClockV1LoopbackTest {
    /**
     * Performs an in/out test of the CLOCK_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param hour {@link Integer}
     * @param weekday {@link Integer}
     * @param minute {@link Integer}
     */
    public static void testClockSetLoopback(Integer hour, Integer weekday, Integer minute) {
        byte[] testPayload = CommandClassClockV1.getClockSet(hour, weekday, minute);

        Map<String, Object> response = CommandClassClockV1.handleClockSet(testPayload);
        assertEquals(hour, (Integer) response.get("HOUR"));
        assertEquals(weekday, (Integer) response.get("WEEKDAY"));
        assertEquals(minute, (Integer) response.get("MINUTE"));
    }

    /**
     * Performs an in/out test of the CLOCK_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param hour {@link Integer}
     * @param weekday {@link Integer}
     * @param minute {@link Integer}
     */
    public static void testClockReportLoopback(Integer hour, Integer weekday, Integer minute) {
        byte[] testPayload = CommandClassClockV1.getClockReport(hour, weekday, minute);

        Map<String, Object> response = CommandClassClockV1.handleClockReport(testPayload);
        assertEquals(hour, (Integer) response.get("HOUR"));
        assertEquals(weekday, (Integer) response.get("WEEKDAY"));
        assertEquals(minute, (Integer) response.get("MINUTE"));
    }

}
