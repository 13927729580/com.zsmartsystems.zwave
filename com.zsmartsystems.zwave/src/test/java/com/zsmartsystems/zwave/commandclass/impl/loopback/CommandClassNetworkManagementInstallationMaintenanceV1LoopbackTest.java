/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassNetworkManagementInstallationMaintenanceV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementInstallationMaintenanceV1LoopbackTest {
    /**
     * Performs an in/out test of the LAST_WORKING_ROUTE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nodeid {@link Integer}
     * @param repeater1 {@link Integer}
     * @param repeater2 {@link Integer}
     * @param repeater3 {@link Integer}
     * @param repeater4 {@link Integer}
     * @param speed {@link String}
     */
    public static void testLastWorkingRouteSetLoopback(Integer nodeid, Integer repeater1, Integer repeater2,
            Integer repeater3, Integer repeater4, String speed) {
        byte[] testPayload = CommandClassNetworkManagementInstallationMaintenanceV1.getLastWorkingRouteSet(nodeid,
                repeater1, repeater2, repeater3, repeater4, speed);

        Map<String, Object> response = CommandClassNetworkManagementInstallationMaintenanceV1.handleLastWorkingRouteSet(testPayload);
        assertEquals(nodeid, (Integer) response.get("NODEID"));
        assertEquals(repeater1, (Integer) response.get("REPEATER1"));
        assertEquals(repeater2, (Integer) response.get("REPEATER2"));
        assertEquals(repeater3, (Integer) response.get("REPEATER3"));
        assertEquals(repeater4, (Integer) response.get("REPEATER4"));
        assertEquals(speed, (String) response.get("SPEED"));
    }

    /**
     * Performs an in/out test of the LAST_WORKING_ROUTE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nodeid {@link Integer}
     */
    public static void testLastWorkingRouteGetLoopback(Integer nodeid) {
        byte[] testPayload = CommandClassNetworkManagementInstallationMaintenanceV1.getLastWorkingRouteGet(nodeid);

        Map<String, Object> response = CommandClassNetworkManagementInstallationMaintenanceV1.handleLastWorkingRouteGet(testPayload);
        assertEquals(nodeid, (Integer) response.get("NODEID"));
    }

    /**
     * Performs an in/out test of the LAST_WORKING_ROUTE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nodeid {@link Integer}
     * @param repeater1 {@link Integer}
     * @param repeater2 {@link Integer}
     * @param repeater3 {@link Integer}
     * @param repeater4 {@link Integer}
     * @param speed {@link String}
     */
    public static void testLastWorkingRouteReportLoopback(Integer nodeid, Integer repeater1, Integer repeater2,
            Integer repeater3, Integer repeater4, String speed) {
        byte[] testPayload = CommandClassNetworkManagementInstallationMaintenanceV1.getLastWorkingRouteReport(nodeid,
                repeater1, repeater2, repeater3, repeater4, speed);

        Map<String, Object> response = CommandClassNetworkManagementInstallationMaintenanceV1.handleLastWorkingRouteReport(testPayload);
        assertEquals(nodeid, (Integer) response.get("NODEID"));
        assertEquals(repeater1, (Integer) response.get("REPEATER1"));
        assertEquals(repeater2, (Integer) response.get("REPEATER2"));
        assertEquals(repeater3, (Integer) response.get("REPEATER3"));
        assertEquals(repeater4, (Integer) response.get("REPEATER4"));
        assertEquals(speed, (String) response.get("SPEED"));
    }

    /**
     * Performs an in/out test of the STATISTICS_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nodeid {@link Integer}
     */
    public static void testStatisticsGetLoopback(Integer nodeid) {
        byte[] testPayload = CommandClassNetworkManagementInstallationMaintenanceV1.getStatisticsGet(nodeid);

        Map<String, Object> response = CommandClassNetworkManagementInstallationMaintenanceV1.handleStatisticsGet(testPayload);
        assertEquals(nodeid, (Integer) response.get("NODEID"));
    }

    /**
     * Performs an in/out test of the STATISTICS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nodeid {@link Integer}
     */
    public static void testStatisticsReportLoopback(Integer nodeid) {
        byte[] testPayload = CommandClassNetworkManagementInstallationMaintenanceV1.getStatisticsReport(nodeid);

        Map<String, Object> response = CommandClassNetworkManagementInstallationMaintenanceV1.handleStatisticsReport(testPayload);
        assertEquals(nodeid, (Integer) response.get("NODEID"));
    }

}
