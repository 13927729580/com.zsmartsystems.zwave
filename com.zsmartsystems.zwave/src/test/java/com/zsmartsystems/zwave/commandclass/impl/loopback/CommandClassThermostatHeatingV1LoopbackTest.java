/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassThermostatHeatingV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_THERMOSTAT_HEATING</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassThermostatHeatingV1LoopbackTest {
    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_MODE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     */
    public static void testThermostatHeatingModeSetLoopback(String mode) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingModeSet(mode);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingModeSet(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_MODE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     */
    public static void testThermostatHeatingModeReportLoopback(String mode) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingModeReport(mode);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingModeReport(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_SETPOINT_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointNr {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testThermostatHeatingSetpointSetLoopback(Integer setpointNr, Integer scale, Integer precision,
            byte[] value) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingSetpointSet(setpointNr, scale,
                precision, value);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingSetpointSet(testPayload);
        assertEquals(setpointNr, (Integer) response.get("SETPOINT_NR"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_SETPOINT_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointNr {@link Integer}
     */
    public static void testThermostatHeatingSetpointGetLoopback(Integer setpointNr) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingSetpointGet(setpointNr);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingSetpointGet(testPayload);
        assertEquals(setpointNr, (Integer) response.get("SETPOINT_NR"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_SETPOINT_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointNr {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testThermostatHeatingSetpointReportLoopback(Integer setpointNr, Integer scale, Integer precision,
            byte[] value) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingSetpointReport(setpointNr, scale,
                precision, value);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingSetpointReport(testPayload);
        assertEquals(setpointNr, (Integer) response.get("SETPOINT_NR"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_RELAY_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param relayStatus {@link String}
     */
    public static void testThermostatHeatingRelayStatusReportLoopback(String relayStatus) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingRelayStatusReport(relayStatus);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingRelayStatusReport(testPayload);
        assertEquals(relayStatus, (String) response.get("RELAY_STATUS"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_STATUS_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param status {@link String}
     */
    public static void testThermostatHeatingStatusSetLoopback(String status) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingStatusSet(status);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingStatusSet(testPayload);
        assertEquals(status, (String) response.get("STATUS"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param status {@link String}
     */
    public static void testThermostatHeatingStatusReportLoopback(String status) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingStatusReport(status);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingStatusReport(testPayload);
        assertEquals(status, (String) response.get("STATUS"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_HEATING_TIMED_OFF_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param minutes {@link Integer}
     * @param hours {@link Integer}
     */
    public static void testThermostatHeatingTimedOffSetLoopback(Integer minutes, Integer hours) {
        byte[] testPayload = CommandClassThermostatHeatingV1.getThermostatHeatingTimedOffSet(minutes, hours);

        Map<String, Object> response = CommandClassThermostatHeatingV1.handleThermostatHeatingTimedOffSet(testPayload);
        assertEquals(minutes, (Integer) response.get("MINUTES"));
        assertEquals(hours, (Integer) response.get("HOURS"));
    }

}
