/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassSceneActuatorConfV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_SCENE_ACTUATOR_CONF</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSceneActuatorConfV1LoopbackTest {
    /**
     * Performs an in/out test of the SCENE_ACTUATOR_CONF_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sceneId {@link Integer}
     * @param dimmingDuration {@link String}
     * @param override {@link Boolean}
     * @param level {@link Integer}
     */
    public static void testSceneActuatorConfSetLoopback(Integer sceneId, String dimmingDuration, Boolean override,
            Integer level) {
        byte[] testPayload = CommandClassSceneActuatorConfV1.getSceneActuatorConfSet(sceneId, dimmingDuration, override,
                level);

        Map<String, Object> response = CommandClassSceneActuatorConfV1.handleSceneActuatorConfSet(testPayload);
        assertEquals(sceneId, (Integer) response.get("SCENE_ID"));
        assertEquals(dimmingDuration, (String) response.get("DIMMING_DURATION"));
        assertEquals(override, (Boolean) response.get("OVERRIDE"));
        assertEquals(level, (Integer) response.get("LEVEL"));
    }

    /**
     * Performs an in/out test of the SCENE_ACTUATOR_CONF_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sceneId {@link Integer}
     */
    public static void testSceneActuatorConfGetLoopback(Integer sceneId) {
        byte[] testPayload = CommandClassSceneActuatorConfV1.getSceneActuatorConfGet(sceneId);

        Map<String, Object> response = CommandClassSceneActuatorConfV1.handleSceneActuatorConfGet(testPayload);
        assertEquals(sceneId, (Integer) response.get("SCENE_ID"));
    }

    /**
     * Performs an in/out test of the SCENE_ACTUATOR_CONF_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sceneId {@link Integer}
     * @param level {@link Integer}
     * @param dimmingDuration {@link String}
     */
    public static void testSceneActuatorConfReportLoopback(Integer sceneId, Integer level, String dimmingDuration) {
        byte[] testPayload = CommandClassSceneActuatorConfV1.getSceneActuatorConfReport(sceneId, level, dimmingDuration);

        Map<String, Object> response = CommandClassSceneActuatorConfV1.handleSceneActuatorConfReport(testPayload);
        assertEquals(sceneId, (Integer) response.get("SCENE_ID"));
        assertEquals(level, (Integer) response.get("LEVEL"));
        assertEquals(dimmingDuration, (String) response.get("DIMMING_DURATION"));
    }

}
