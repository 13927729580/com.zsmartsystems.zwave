/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassSecurityPanelZoneV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_SECURITY_PANEL_ZONE</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSecurityPanelZoneV1LoopbackTest {
    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zonesSupported {@link Integer}
     * @param zm {@link Boolean}
     */
    public static void testSecurityPanelZoneSupportedReportLoopback(Integer zonesSupported, Boolean zm) {
        byte[] testPayload = CommandClassSecurityPanelZoneV1.getSecurityPanelZoneSupportedReport(zonesSupported, zm);

        Map<String, Object> response = CommandClassSecurityPanelZoneV1.handleSecurityPanelZoneSupportedReport(testPayload);
        assertEquals(zonesSupported, (Integer) response.get("ZONES_SUPPORTED"));
        assertEquals(zm, (Boolean) response.get("ZM"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_TYPE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     */
    public static void testSecurityPanelZoneTypeGetLoopback(Integer zoneNumber) {
        byte[] testPayload = CommandClassSecurityPanelZoneV1.getSecurityPanelZoneTypeGet(zoneNumber);

        Map<String, Object> response = CommandClassSecurityPanelZoneV1.handleSecurityPanelZoneTypeGet(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_TYPE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param zoneType {@link String}
     */
    public static void testSecurityPanelZoneTypeReportLoopback(Integer zoneNumber, String zoneType) {
        byte[] testPayload = CommandClassSecurityPanelZoneV1.getSecurityPanelZoneTypeReport(zoneNumber, zoneType);

        Map<String, Object> response = CommandClassSecurityPanelZoneV1.handleSecurityPanelZoneTypeReport(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(zoneType, (String) response.get("ZONE_TYPE"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_STATE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     */
    public static void testSecurityPanelZoneStateGetLoopback(Integer zoneNumber) {
        byte[] testPayload = CommandClassSecurityPanelZoneV1.getSecurityPanelZoneStateGet(zoneNumber);

        Map<String, Object> response = CommandClassSecurityPanelZoneV1.handleSecurityPanelZoneStateGet(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_STATE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param zoneState {@link String}
     */
    public static void testSecurityPanelZoneStateReportLoopback(Integer zoneNumber, String zoneState) {
        byte[] testPayload = CommandClassSecurityPanelZoneV1.getSecurityPanelZoneStateReport(zoneNumber, zoneState);

        Map<String, Object> response = CommandClassSecurityPanelZoneV1.handleSecurityPanelZoneStateReport(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(zoneState, (String) response.get("ZONE_STATE"));
    }

}
