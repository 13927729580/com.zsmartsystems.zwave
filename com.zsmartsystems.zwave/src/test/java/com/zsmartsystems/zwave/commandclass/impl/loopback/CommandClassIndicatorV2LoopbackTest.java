/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassIndicatorV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_INDICATOR</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIndicatorV2LoopbackTest {
    /**
     * Performs an in/out test of the INDICATOR_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param indicator0Value {@link String}
     * @param indicatorObjectCount {@link Integer}
     */
    public static void testIndicatorSetLoopback(String indicator0Value, Integer indicatorObjectCount) {
        byte[] testPayload = CommandClassIndicatorV2.getIndicatorSet(indicator0Value, indicatorObjectCount);

        Map<String, Object> response = CommandClassIndicatorV2.handleIndicatorSet(testPayload);
        assertEquals(indicator0Value, (String) response.get("INDICATOR0_VALUE"));
        assertEquals(indicatorObjectCount, (Integer) response.get("INDICATOR_OBJECT_COUNT"));
    }

    /**
     * Performs an in/out test of the INDICATOR_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param indicatorId {@link String}
     */
    public static void testIndicatorGetLoopback(String indicatorId) {
        byte[] testPayload = CommandClassIndicatorV2.getIndicatorGet(indicatorId);

        Map<String, Object> response = CommandClassIndicatorV2.handleIndicatorGet(testPayload);
        assertEquals(indicatorId, (String) response.get("INDICATOR_ID"));
    }

    /**
     * Performs an in/out test of the INDICATOR_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param indicator0Value {@link String}
     * @param indicatorObjectCount {@link Integer}
     */
    public static void testIndicatorReportLoopback(String indicator0Value, Integer indicatorObjectCount) {
        byte[] testPayload = CommandClassIndicatorV2.getIndicatorReport(indicator0Value, indicatorObjectCount);

        Map<String, Object> response = CommandClassIndicatorV2.handleIndicatorReport(testPayload);
        assertEquals(indicator0Value, (String) response.get("INDICATOR0_VALUE"));
        assertEquals(indicatorObjectCount, (Integer) response.get("INDICATOR_OBJECT_COUNT"));
    }

    /**
     * Performs an in/out test of the INDICATOR_SUPPORTED_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param indicatorId {@link String}
     */
    public static void testIndicatorSupportedGetLoopback(String indicatorId) {
        byte[] testPayload = CommandClassIndicatorV2.getIndicatorSupportedGet(indicatorId);

        Map<String, Object> response = CommandClassIndicatorV2.handleIndicatorSupportedGet(testPayload);
        assertEquals(indicatorId, (String) response.get("INDICATOR_ID"));
    }

    /**
     * Performs an in/out test of the INDICATOR_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param indicatorId {@link String}
     * @param nextIndicatorId {@link String}
     * @param propertySupportedBitMask {@link List<String>}
     */
    public static void testIndicatorSupportedReportLoopback(String indicatorId, String nextIndicatorId,
            List<String> propertySupportedBitMask) {
        byte[] testPayload = CommandClassIndicatorV2.getIndicatorSupportedReport(indicatorId, nextIndicatorId,
                propertySupportedBitMask);

        Map<String, Object> response = CommandClassIndicatorV2.handleIndicatorSupportedReport(testPayload);
        assertEquals(indicatorId, (String) response.get("INDICATOR_ID"));
        assertEquals(nextIndicatorId, (String) response.get("NEXT_INDICATOR_ID"));
        assertEquals(propertySupportedBitMask, (List<String>) response.get("PROPERTY_SUPPORTED_BIT_MASK"));
    }

}
