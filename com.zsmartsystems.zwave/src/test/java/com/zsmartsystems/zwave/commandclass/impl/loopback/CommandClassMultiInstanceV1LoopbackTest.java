/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassMultiInstanceV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_MULTI_INSTANCE</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMultiInstanceV1LoopbackTest {
    /**
     * Performs an in/out test of the MULTI_INSTANCE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param commandClass {@link Integer}
     */
    public static void testMultiInstanceGetLoopback(Integer commandClass) {
        byte[] testPayload = CommandClassMultiInstanceV1.getMultiInstanceGet(commandClass);

        Map<String, Object> response = CommandClassMultiInstanceV1.handleMultiInstanceGet(testPayload);
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
    }

    /**
     * Performs an in/out test of the MULTI_INSTANCE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param commandClass {@link Integer}
     * @param instances {@link Integer}
     */
    public static void testMultiInstanceReportLoopback(Integer commandClass, Integer instances) {
        byte[] testPayload = CommandClassMultiInstanceV1.getMultiInstanceReport(commandClass, instances);

        Map<String, Object> response = CommandClassMultiInstanceV1.handleMultiInstanceReport(testPayload);
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
        assertEquals(instances, (Integer) response.get("INSTANCES"));
    }

    /**
     * Performs an in/out test of the MULTI_INSTANCE_CMD_ENCAP command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param instance {@link Integer}
     * @param commandClass {@link Integer}
     * @param command {@link Integer}
     * @param parameter {@link int[]}
     */
    public static void testMultiInstanceCmdEncapLoopback(Integer instance, Integer commandClass, Integer command,
            int[] parameter) {
        byte[] testPayload = CommandClassMultiInstanceV1.getMultiInstanceCmdEncap(instance, commandClass, command,
                parameter);

        Map<String, Object> response = CommandClassMultiInstanceV1.handleMultiInstanceCmdEncap(testPayload);
        assertEquals(instance, (Integer) response.get("INSTANCE"));
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
        assertEquals(command, (Integer) response.get("COMMAND"));
        assertEquals(parameter, (int[]) response.get("PARAMETER"));
    }

}
