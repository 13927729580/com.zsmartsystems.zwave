/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassDcpConfigV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_DCP_CONFIG</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassDcpConfigV1LoopbackTest {
    /**
     * Performs an in/out test of the DCP_LIST_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param dcpListSize {@link Integer}
     * @param freeDcpListEntries {@link Integer}
     */
    public static void testDcpListSupportedReportLoopback(Integer dcpListSize, Integer freeDcpListEntries) {
        byte[] testPayload = CommandClassDcpConfigV1.getDcpListSupportedReport(dcpListSize, freeDcpListEntries);

        Map<String, Object> response = CommandClassDcpConfigV1.handleDcpListSupportedReport(testPayload);
        assertEquals(dcpListSize, (Integer) response.get("DCP_LIST_SIZE"));
        assertEquals(freeDcpListEntries, (Integer) response.get("FREE_DCP_LIST_ENTRIES"));
    }

    /**
     * Performs an in/out test of the DCP_LIST_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     * @param dcpRateId {@link Integer}
     * @param numberOfDc {@link Integer}
     * @param startYear {@link Integer}
     * @param startMonth {@link Integer}
     * @param startDay {@link Integer}
     * @param startHourLocalTime {@link Integer}
     * @param startMinuteLocalTime {@link Integer}
     * @param startSecondLocalTime {@link Integer}
     * @param durationHourTime {@link Integer}
     * @param durationMinuteTime {@link Integer}
     * @param durationSecondTime {@link Integer}
     * @param eventPriority {@link Integer}
     * @param loadShedding {@link Integer}
     * @param startAssociationGroup {@link Integer}
     * @param stopAssociationGroup {@link Integer}
     * @param randomizationInterval {@link Integer}
     */
    public static void testDcpListSetLoopback(Integer year, Integer month, Integer day, Integer hourLocalTime,
            Integer minuteLocalTime, Integer secondLocalTime, Integer dcpRateId, Integer numberOfDc, Integer startYear,
            Integer startMonth, Integer startDay, Integer startHourLocalTime, Integer startMinuteLocalTime,
            Integer startSecondLocalTime, Integer durationHourTime, Integer durationMinuteTime,
            Integer durationSecondTime, Integer eventPriority, Integer loadShedding, Integer startAssociationGroup,
            Integer stopAssociationGroup, Integer randomizationInterval) {
        byte[] testPayload = CommandClassDcpConfigV1.getDcpListSet(year, month, day, hourLocalTime, minuteLocalTime,
                secondLocalTime, dcpRateId, numberOfDc, startYear, startMonth, startDay, startHourLocalTime,
                startMinuteLocalTime, startSecondLocalTime, durationHourTime, durationMinuteTime, durationSecondTime,
                eventPriority, loadShedding, startAssociationGroup, stopAssociationGroup, randomizationInterval);

        Map<String, Object> response = CommandClassDcpConfigV1.handleDcpListSet(testPayload);
        assertEquals(year, (Integer) response.get("YEAR"));
        assertEquals(month, (Integer) response.get("MONTH"));
        assertEquals(day, (Integer) response.get("DAY"));
        assertEquals(hourLocalTime, (Integer) response.get("HOUR_LOCAL_TIME"));
        assertEquals(minuteLocalTime, (Integer) response.get("MINUTE_LOCAL_TIME"));
        assertEquals(secondLocalTime, (Integer) response.get("SECOND_LOCAL_TIME"));
        assertEquals(dcpRateId, (Integer) response.get("DCP_RATE_ID"));
        assertEquals(numberOfDc, (Integer) response.get("NUMBER_OF_DC"));
        assertEquals(startYear, (Integer) response.get("START_YEAR"));
        assertEquals(startMonth, (Integer) response.get("START_MONTH"));
        assertEquals(startDay, (Integer) response.get("START_DAY"));
        assertEquals(startHourLocalTime, (Integer) response.get("START_HOUR_LOCAL_TIME"));
        assertEquals(startMinuteLocalTime, (Integer) response.get("START_MINUTE_LOCAL_TIME"));
        assertEquals(startSecondLocalTime, (Integer) response.get("START_SECOND_LOCAL_TIME"));
        assertEquals(durationHourTime, (Integer) response.get("DURATION_HOUR_TIME"));
        assertEquals(durationMinuteTime, (Integer) response.get("DURATION_MINUTE_TIME"));
        assertEquals(durationSecondTime, (Integer) response.get("DURATION_SECOND_TIME"));
        assertEquals(eventPriority, (Integer) response.get("EVENT_PRIORITY"));
        assertEquals(loadShedding, (Integer) response.get("LOAD_SHEDDING"));
        assertEquals(startAssociationGroup, (Integer) response.get("START_ASSOCIATION_GROUP"));
        assertEquals(stopAssociationGroup, (Integer) response.get("STOP_ASSOCIATION_GROUP"));
        assertEquals(randomizationInterval, (Integer) response.get("RANDOMIZATION_INTERVAL"));
    }

    /**
     * Performs an in/out test of the DCP_LIST_REMOVE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     */
    public static void testDcpListRemoveLoopback(Integer year, Integer month, Integer day, Integer hourLocalTime,
            Integer minuteLocalTime, Integer secondLocalTime) {
        byte[] testPayload = CommandClassDcpConfigV1.getDcpListRemove(year, month, day, hourLocalTime, minuteLocalTime,
                secondLocalTime);

        Map<String, Object> response = CommandClassDcpConfigV1.handleDcpListRemove(testPayload);
        assertEquals(year, (Integer) response.get("YEAR"));
        assertEquals(month, (Integer) response.get("MONTH"));
        assertEquals(day, (Integer) response.get("DAY"));
        assertEquals(hourLocalTime, (Integer) response.get("HOUR_LOCAL_TIME"));
        assertEquals(minuteLocalTime, (Integer) response.get("MINUTE_LOCAL_TIME"));
        assertEquals(secondLocalTime, (Integer) response.get("SECOND_LOCAL_TIME"));
    }

}
