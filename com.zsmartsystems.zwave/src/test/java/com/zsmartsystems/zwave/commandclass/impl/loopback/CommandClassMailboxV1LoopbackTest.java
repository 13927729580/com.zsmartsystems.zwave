/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassMailboxV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_MAILBOX</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMailboxV1LoopbackTest {
    /**
     * Performs an in/out test of the MAILBOX_CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     * @param forwardingDestinationIpv6Address {@link byte[]}
     * @param udpPortNumber {@link Integer}
     */
    public static void testMailboxConfigurationSetLoopback(String mode, byte[] forwardingDestinationIpv6Address,
            Integer udpPortNumber) {
        byte[] testPayload = CommandClassMailboxV1.getMailboxConfigurationSet(mode, forwardingDestinationIpv6Address,
                udpPortNumber);

        Map<String, Object> response = CommandClassMailboxV1.handleMailboxConfigurationSet(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
        assertEquals(forwardingDestinationIpv6Address, (byte[]) response.get("FORWARDING_DESTINATION_IPV6_ADDRESS"));
        assertEquals(udpPortNumber, (Integer) response.get("UDP_PORT_NUMBER"));
    }

    /**
     * Performs an in/out test of the MAILBOX_CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     * @param supportedModes {@link String}
     * @param mailboxCapacity {@link Integer}
     * @param forwardingDestinationIpv6Address {@link byte[]}
     * @param udpPortNumber {@link Integer}
     */
    public static void testMailboxConfigurationReportLoopback(String mode, String supportedModes,
            Integer mailboxCapacity, byte[] forwardingDestinationIpv6Address, Integer udpPortNumber) {
        byte[] testPayload = CommandClassMailboxV1.getMailboxConfigurationReport(mode, supportedModes, mailboxCapacity,
                forwardingDestinationIpv6Address, udpPortNumber);

        Map<String, Object> response = CommandClassMailboxV1.handleMailboxConfigurationReport(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
        assertEquals(supportedModes, (String) response.get("SUPPORTED_MODES"));
        assertEquals(mailboxCapacity, (Integer) response.get("MAILBOX_CAPACITY"));
        assertEquals(forwardingDestinationIpv6Address, (byte[]) response.get("FORWARDING_DESTINATION_IPV6_ADDRESS"));
        assertEquals(udpPortNumber, (Integer) response.get("UDP_PORT_NUMBER"));
    }

    /**
     * Performs an in/out test of the MAILBOX_QUEUE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sequenceNumber {@link Integer}
     * @param mode {@link String}
     * @param last {@link Boolean}
     * @param queueHandle {@link Integer}
     * @param mailboxEntry {@link byte[]}
     */
    public static void testMailboxQueueLoopback(Integer sequenceNumber, String mode, Boolean last, Integer queueHandle,
            byte[] mailboxEntry) {
        byte[] testPayload = CommandClassMailboxV1.getMailboxQueue(sequenceNumber, mode, last, queueHandle, mailboxEntry);

        Map<String, Object> response = CommandClassMailboxV1.handleMailboxQueue(testPayload);
        assertEquals(sequenceNumber, (Integer) response.get("SEQUENCE_NUMBER"));
        assertEquals(mode, (String) response.get("MODE"));
        assertEquals(last, (Boolean) response.get("LAST"));
        assertEquals(queueHandle, (Integer) response.get("QUEUE_HANDLE"));
        assertEquals(mailboxEntry, (byte[]) response.get("MAILBOX_ENTRY"));
    }

    /**
     * Performs an in/out test of the MAILBOX_WAKEUP_NOTIFICATION command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param queueHandle {@link Integer}
     */
    public static void testMailboxWakeupNotificationLoopback(Integer queueHandle) {
        byte[] testPayload = CommandClassMailboxV1.getMailboxWakeupNotification(queueHandle);

        Map<String, Object> response = CommandClassMailboxV1.handleMailboxWakeupNotification(testPayload);
        assertEquals(queueHandle, (Integer) response.get("QUEUE_HANDLE"));
    }

    /**
     * Performs an in/out test of the MAILBOX_NODE_FAILING command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param queueHandle {@link Integer}
     */
    public static void testMailboxNodeFailingLoopback(Integer queueHandle) {
        byte[] testPayload = CommandClassMailboxV1.getMailboxNodeFailing(queueHandle);

        Map<String, Object> response = CommandClassMailboxV1.handleMailboxNodeFailing(testPayload);
        assertEquals(queueHandle, (Integer) response.get("QUEUE_HANDLE"));
    }

}
