/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassNetworkManagementBasicV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementBasicV1LoopbackTest {
    /**
     * Performs an in/out test of the LEARN_MODE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param mode {@link String}
     */
    public static void testLearnModeSetLoopback(Integer seqNo, String mode) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getLearnModeSet(seqNo, mode);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleLearnModeSet(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the LEARN_MODE_SET_STATUS command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     * @param newNodeId {@link Integer}
     */
    public static void testLearnModeSetStatusLoopback(Integer seqNo, String status, Integer newNodeId) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getLearnModeSetStatus(seqNo, status, newNodeId);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleLearnModeSetStatus(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(status, (String) response.get("STATUS"));
        assertEquals(newNodeId, (Integer) response.get("NEW_NODE_ID"));
    }

    /**
     * Performs an in/out test of the NETWORK_UPDATE_REQUEST command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     */
    public static void testNetworkUpdateRequestLoopback(Integer seqNo) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getNetworkUpdateRequest(seqNo);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleNetworkUpdateRequest(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
    }

    /**
     * Performs an in/out test of the NETWORK_UPDATE_REQUEST_STATUS command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     */
    public static void testNetworkUpdateRequestStatusLoopback(Integer seqNo, String status) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getNetworkUpdateRequestStatus(seqNo, status);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleNetworkUpdateRequestStatus(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(status, (String) response.get("STATUS"));
    }

    /**
     * Performs an in/out test of the NODE_INFORMATION_SEND command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param destinationNodeId {@link Integer}
     * @param txOptions {@link List<String>}
     */
    public static void testNodeInformationSendLoopback(Integer seqNo, Integer destinationNodeId, List<String> txOptions) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getNodeInformationSend(seqNo, destinationNodeId,
                txOptions);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleNodeInformationSend(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(destinationNodeId, (Integer) response.get("DESTINATION_NODE_ID"));
        assertEquals(txOptions, (List<String>) response.get("TX_OPTIONS"));
    }

    /**
     * Performs an in/out test of the DEFAULT_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     */
    public static void testDefaultSetLoopback(Integer seqNo) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getDefaultSet(seqNo);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleDefaultSet(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
    }

    /**
     * Performs an in/out test of the DEFAULT_SET_COMPLETE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     */
    public static void testDefaultSetCompleteLoopback(Integer seqNo, String status) {
        byte[] testPayload = CommandClassNetworkManagementBasicV1.getDefaultSetComplete(seqNo, status);

        Map<String, Object> response = CommandClassNetworkManagementBasicV1.handleDefaultSetComplete(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(status, (String) response.get("STATUS"));
    }

}
