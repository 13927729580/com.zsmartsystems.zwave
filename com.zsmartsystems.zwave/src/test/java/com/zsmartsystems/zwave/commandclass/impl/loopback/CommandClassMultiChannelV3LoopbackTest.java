/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassMultiChannelV3;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_MULTI_CHANNEL</b> version <b>3</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMultiChannelV3LoopbackTest {
    /**
     * Performs an in/out test of the MULTI_INSTANCE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param commandClass {@link Integer}
     */
    public static void testMultiInstanceGetLoopback(Integer commandClass) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiInstanceGet(commandClass);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiInstanceGet(testPayload);
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
    }

    /**
     * Performs an in/out test of the MULTI_INSTANCE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param commandClass {@link Integer}
     * @param instances {@link Integer}
     * @param res {@link Boolean}
     */
    public static void testMultiInstanceReportLoopback(Integer commandClass, Integer instances, Boolean res) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiInstanceReport(commandClass, instances, res);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiInstanceReport(testPayload);
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
        assertEquals(instances, (Integer) response.get("INSTANCES"));
        assertEquals(res, (Boolean) response.get("RES"));
    }

    /**
     * Performs an in/out test of the MULTI_INSTANCE_CMD_ENCAP command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param instance {@link Integer}
     * @param res {@link Boolean}
     * @param commandClass {@link Integer}
     * @param command {@link Integer}
     * @param parameter {@link int[]}
     */
    public static void testMultiInstanceCmdEncapLoopback(Integer instance, Boolean res, Integer commandClass,
            Integer command, int[] parameter) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiInstanceCmdEncap(instance, res, commandClass, command,
                parameter);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiInstanceCmdEncap(testPayload);
        assertEquals(instance, (Integer) response.get("INSTANCE"));
        assertEquals(res, (Boolean) response.get("RES"));
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
        assertEquals(command, (Integer) response.get("COMMAND"));
        assertEquals(parameter, (int[]) response.get("PARAMETER"));
    }

    /**
     * Performs an in/out test of the MULTI_CHANNEL_END_POINT_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param res1 {@link Integer}
     * @param identical {@link Boolean}
     * @param dynamic {@link Boolean}
     * @param endPoints {@link Integer}
     * @param res2 {@link Boolean}
     */
    public static void testMultiChannelEndPointReportLoopback(Integer res1, Boolean identical, Boolean dynamic,
            Integer endPoints, Boolean res2) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiChannelEndPointReport(res1, identical, dynamic,
                endPoints, res2);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiChannelEndPointReport(testPayload);
        assertEquals(res1, (Integer) response.get("RES1"));
        assertEquals(identical, (Boolean) response.get("IDENTICAL"));
        assertEquals(dynamic, (Boolean) response.get("DYNAMIC"));
        assertEquals(endPoints, (Integer) response.get("END_POINTS"));
        assertEquals(res2, (Boolean) response.get("RES2"));
    }

    /**
     * Performs an in/out test of the MULTI_CHANNEL_CAPABILITY_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param endPoint {@link Integer}
     * @param res {@link Boolean}
     */
    public static void testMultiChannelCapabilityGetLoopback(Integer endPoint, Boolean res) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiChannelCapabilityGet(endPoint, res);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiChannelCapabilityGet(testPayload);
        assertEquals(endPoint, (Integer) response.get("END_POINT"));
        assertEquals(res, (Boolean) response.get("RES"));
    }

    /**
     * Performs an in/out test of the MULTI_CHANNEL_CAPABILITY_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param endPoint {@link Integer}
     * @param dynamic {@link Boolean}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param commandClass {@link List<Integer>}
     */
    public static void testMultiChannelCapabilityReportLoopback(Integer endPoint, Boolean dynamic,
            Integer genericDeviceClass, Integer specificDeviceClass, List<Integer> commandClass) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiChannelCapabilityReport(endPoint, dynamic,
                genericDeviceClass, specificDeviceClass, commandClass);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiChannelCapabilityReport(testPayload);
        assertEquals(endPoint, (Integer) response.get("END_POINT"));
        assertEquals(dynamic, (Boolean) response.get("DYNAMIC"));
        assertEquals(genericDeviceClass, (Integer) response.get("GENERIC_DEVICE_CLASS"));
        assertEquals(specificDeviceClass, (Integer) response.get("SPECIFIC_DEVICE_CLASS"));
        assertEquals(commandClass, (List<Integer>) response.get("COMMAND_CLASS"));
    }

    /**
     * Performs an in/out test of the MULTI_CHANNEL_END_POINT_FIND command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     */
    public static void testMultiChannelEndPointFindLoopback(Integer genericDeviceClass, Integer specificDeviceClass) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiChannelEndPointFind(genericDeviceClass,
                specificDeviceClass);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiChannelEndPointFind(testPayload);
        assertEquals(genericDeviceClass, (Integer) response.get("GENERIC_DEVICE_CLASS"));
        assertEquals(specificDeviceClass, (Integer) response.get("SPECIFIC_DEVICE_CLASS"));
    }

    /**
     * Performs an in/out test of the MULTI_CHANNEL_END_POINT_FIND_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param reportsToFollow {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     */
    public static void testMultiChannelEndPointFindReportLoopback(Integer reportsToFollow, Integer genericDeviceClass,
            Integer specificDeviceClass) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiChannelEndPointFindReport(reportsToFollow,
                genericDeviceClass, specificDeviceClass);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiChannelEndPointFindReport(testPayload);
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(genericDeviceClass, (Integer) response.get("GENERIC_DEVICE_CLASS"));
        assertEquals(specificDeviceClass, (Integer) response.get("SPECIFIC_DEVICE_CLASS"));
    }

    /**
     * Performs an in/out test of the MULTI_CHANNEL_CMD_ENCAP command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sourceEndPoint {@link Integer}
     * @param res {@link Boolean}
     * @param destinationEndPoint {@link Integer}
     * @param bitAddress {@link Boolean}
     * @param commandClass {@link Integer}
     * @param command {@link Integer}
     * @param parameter {@link int[]}
     */
    public static void testMultiChannelCmdEncapLoopback(Integer sourceEndPoint, Boolean res, Integer destinationEndPoint,
            Boolean bitAddress, Integer commandClass, Integer command, int[] parameter) {
        byte[] testPayload = CommandClassMultiChannelV3.getMultiChannelCmdEncap(sourceEndPoint, res, destinationEndPoint,
                bitAddress, commandClass, command, parameter);

        Map<String, Object> response = CommandClassMultiChannelV3.handleMultiChannelCmdEncap(testPayload);
        assertEquals(sourceEndPoint, (Integer) response.get("SOURCE_END_POINT"));
        assertEquals(res, (Boolean) response.get("RES"));
        assertEquals(destinationEndPoint, (Integer) response.get("DESTINATION_END_POINT"));
        assertEquals(bitAddress, (Boolean) response.get("BIT_ADDRESS"));
        assertEquals(commandClass, (Integer) response.get("COMMAND_CLASS"));
        assertEquals(command, (Integer) response.get("COMMAND"));
        assertEquals(parameter, (int[]) response.get("PARAMETER"));
    }

}
