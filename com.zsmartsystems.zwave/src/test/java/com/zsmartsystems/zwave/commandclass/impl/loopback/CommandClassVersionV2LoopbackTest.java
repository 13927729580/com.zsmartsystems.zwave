/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassVersionV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_VERSION</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassVersionV2LoopbackTest {
    /**
     * Performs an in/out test of the VERSION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zWaveLibraryType {@link Integer}
     * @param zWaveProtocolVersion {@link Integer}
     * @param zWaveProtocolSubVersion {@link Integer}
     * @param firmware0Version {@link Integer}
     * @param firmware0SubVersion {@link Integer}
     * @param hardwareVersion {@link Integer}
     * @param numberOfFirmwareTargets {@link Integer}
     */
    public static void testVersionReportLoopback(Integer zWaveLibraryType, Integer zWaveProtocolVersion,
            Integer zWaveProtocolSubVersion, Integer firmware0Version, Integer firmware0SubVersion,
            Integer hardwareVersion, Integer numberOfFirmwareTargets) {
        byte[] testPayload = CommandClassVersionV2.getVersionReport(zWaveLibraryType, zWaveProtocolVersion,
                zWaveProtocolSubVersion, firmware0Version, firmware0SubVersion, hardwareVersion, numberOfFirmwareTargets);

        Map<String, Object> response = CommandClassVersionV2.handleVersionReport(testPayload);
        assertEquals(zWaveLibraryType, (Integer) response.get("Z_WAVE_LIBRARY_TYPE"));
        assertEquals(zWaveProtocolVersion, (Integer) response.get("Z_WAVE_PROTOCOL_VERSION"));
        assertEquals(zWaveProtocolSubVersion, (Integer) response.get("Z_WAVE_PROTOCOL_SUB_VERSION"));
        assertEquals(firmware0Version, (Integer) response.get("FIRMWARE0_VERSION"));
        assertEquals(firmware0SubVersion, (Integer) response.get("FIRMWARE0_SUB_VERSION"));
        assertEquals(hardwareVersion, (Integer) response.get("HARDWARE_VERSION"));
        assertEquals(numberOfFirmwareTargets, (Integer) response.get("NUMBER_OF_FIRMWARE_TARGETS"));
    }

    /**
     * Performs an in/out test of the VERSION_COMMAND_CLASS_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param requestedCommandClass {@link Integer}
     */
    public static void testVersionCommandClassGetLoopback(Integer requestedCommandClass) {
        byte[] testPayload = CommandClassVersionV2.getVersionCommandClassGet(requestedCommandClass);

        Map<String, Object> response = CommandClassVersionV2.handleVersionCommandClassGet(testPayload);
        assertEquals(requestedCommandClass, (Integer) response.get("REQUESTED_COMMAND_CLASS"));
    }

    /**
     * Performs an in/out test of the VERSION_COMMAND_CLASS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param requestedCommandClass {@link Integer}
     * @param commandClassVersion {@link Integer}
     */
    public static void testVersionCommandClassReportLoopback(Integer requestedCommandClass, Integer commandClassVersion) {
        byte[] testPayload = CommandClassVersionV2.getVersionCommandClassReport(requestedCommandClass,
                commandClassVersion);

        Map<String, Object> response = CommandClassVersionV2.handleVersionCommandClassReport(testPayload);
        assertEquals(requestedCommandClass, (Integer) response.get("REQUESTED_COMMAND_CLASS"));
        assertEquals(commandClassVersion, (Integer) response.get("COMMAND_CLASS_VERSION"));
    }

}
