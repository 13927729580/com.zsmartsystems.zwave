/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassNetworkManagementProxyV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_PROXY</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementProxyV2LoopbackTest {
    /**
     * Performs an in/out test of the NODE_LIST_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     */
    public static void testNodeListGetLoopback(Integer seqNo) {
        byte[] testPayload = CommandClassNetworkManagementProxyV2.getNodeListGet(seqNo);

        Map<String, Object> response = CommandClassNetworkManagementProxyV2.handleNodeListGet(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
    }

    /**
     * Performs an in/out test of the NODE_LIST_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     * @param nodeListControllerId {@link Integer}
     * @param nodeListData {@link List<Integer>}
     */
    public static void testNodeListReportLoopback(Integer seqNo, String status, Integer nodeListControllerId,
            List<Integer> nodeListData) {
        byte[] testPayload = CommandClassNetworkManagementProxyV2.getNodeListReport(seqNo, status, nodeListControllerId,
                nodeListData);

        Map<String, Object> response = CommandClassNetworkManagementProxyV2.handleNodeListReport(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(status, (String) response.get("STATUS"));
        assertEquals(nodeListControllerId, (Integer) response.get("NODE_LIST_CONTROLLER_ID"));
        assertEquals(nodeListData, (List<Integer>) response.get("NODE_LIST_DATA"));
    }

    /**
     * Performs an in/out test of the NODE_INFO_CACHED_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param maxAge {@link Integer}
     * @param nodeId {@link Integer}
     */
    public static void testNodeInfoCachedGetLoopback(Integer seqNo, Integer maxAge, Integer nodeId) {
        byte[] testPayload = CommandClassNetworkManagementProxyV2.getNodeInfoCachedGet(seqNo, maxAge, nodeId);

        Map<String, Object> response = CommandClassNetworkManagementProxyV2.handleNodeInfoCachedGet(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(maxAge, (Integer) response.get("MAX_AGE"));
        assertEquals(nodeId, (Integer) response.get("NODE_ID"));
    }

    /**
     * Performs an in/out test of the NODE_INFO_CACHED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param age {@link Integer}
     * @param status {@link String}
     * @param capability {@link Integer}
     * @param listening {@link Boolean}
     * @param security {@link Integer}
     * @param sensor {@link Integer}
     * @param opt {@link Boolean}
     * @param grantedKeys {@link Integer}
     * @param basicDeviceClass {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param nonSecureCommandClass {@link byte[]}
     * @param secureCommandClass {@link byte[]}
     */
    public static void testNodeInfoCachedReportLoopback(Integer seqNo, Integer age, String status, Integer capability,
            Boolean listening, Integer security, Integer sensor, Boolean opt, Integer grantedKeys,
            Integer basicDeviceClass, Integer genericDeviceClass, Integer specificDeviceClass,
            byte[] nonSecureCommandClass, byte[] secureCommandClass) {
        byte[] testPayload = CommandClassNetworkManagementProxyV2.getNodeInfoCachedReport(seqNo, age, status, capability,
                listening, security, sensor, opt, grantedKeys, basicDeviceClass, genericDeviceClass, specificDeviceClass,
                nonSecureCommandClass, secureCommandClass);

        Map<String, Object> response = CommandClassNetworkManagementProxyV2.handleNodeInfoCachedReport(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(age, (Integer) response.get("AGE"));
        assertEquals(status, (String) response.get("STATUS"));
        assertEquals(capability, (Integer) response.get("CAPABILITY"));
        assertEquals(listening, (Boolean) response.get("LISTENING"));
        assertEquals(security, (Integer) response.get("SECURITY"));
        assertEquals(sensor, (Integer) response.get("SENSOR"));
        assertEquals(opt, (Boolean) response.get("OPT"));
        assertEquals(grantedKeys, (Integer) response.get("GRANTED_KEYS"));
        assertEquals(basicDeviceClass, (Integer) response.get("BASIC_DEVICE_CLASS"));
        assertEquals(genericDeviceClass, (Integer) response.get("GENERIC_DEVICE_CLASS"));
        assertEquals(specificDeviceClass, (Integer) response.get("SPECIFIC_DEVICE_CLASS"));
        assertEquals(nonSecureCommandClass, (byte[]) response.get("NON_SECURE_COMMAND_CLASS"));
        assertEquals(secureCommandClass, (byte[]) response.get("SECURE_COMMAND_CLASS"));
    }

}
