/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassAssociationCommandConfigurationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassAssociationCommandConfigurationV1LoopbackTest {
    /**
     * Performs an in/out test of the COMMAND_RECORDS_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param confCmd {@link Boolean}
     * @param vC {@link Boolean}
     * @param maxCommandLength {@link Integer}
     * @param freeCommandRecords {@link Integer}
     * @param maxCommandRecords {@link Integer}
     */
    public static void testCommandRecordsSupportedReportLoopback(Boolean confCmd, Boolean vC, Integer maxCommandLength,
            Integer freeCommandRecords, Integer maxCommandRecords) {
        byte[] testPayload = CommandClassAssociationCommandConfigurationV1.getCommandRecordsSupportedReport(confCmd, vC,
                maxCommandLength, freeCommandRecords, maxCommandRecords);

        Map<String, Object> response = CommandClassAssociationCommandConfigurationV1.handleCommandRecordsSupportedReport(testPayload);
        assertEquals(confCmd, (Boolean) response.get("CONF_CMD"));
        assertEquals(vC, (Boolean) response.get("V_C"));
        assertEquals(maxCommandLength, (Integer) response.get("MAX_COMMAND_LENGTH"));
        assertEquals(freeCommandRecords, (Integer) response.get("FREE_COMMAND_RECORDS"));
        assertEquals(maxCommandRecords, (Integer) response.get("MAX_COMMAND_RECORDS"));
    }

    /**
     * Performs an in/out test of the COMMAND_CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param nodeId {@link Integer}
     * @param commandLength {@link Integer}
     * @param commandClassIdentifier {@link Integer}
     * @param commandIdentifier {@link Integer}
     * @param commandByte {@link byte[]}
     */
    public static void testCommandConfigurationSetLoopback(Integer groupingIdentifier, Integer nodeId,
            Integer commandLength, Integer commandClassIdentifier, Integer commandIdentifier, byte[] commandByte) {
        byte[] testPayload = CommandClassAssociationCommandConfigurationV1.getCommandConfigurationSet(groupingIdentifier,
                nodeId, commandLength, commandClassIdentifier, commandIdentifier, commandByte);

        Map<String, Object> response = CommandClassAssociationCommandConfigurationV1.handleCommandConfigurationSet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(nodeId, (Integer) response.get("NODE_ID"));
        assertEquals(commandLength, (Integer) response.get("COMMAND_LENGTH"));
        assertEquals(commandClassIdentifier, (Integer) response.get("COMMAND_CLASS_IDENTIFIER"));
        assertEquals(commandIdentifier, (Integer) response.get("COMMAND_IDENTIFIER"));
        assertEquals(commandByte, (byte[]) response.get("COMMAND_BYTE"));
    }

    /**
     * Performs an in/out test of the COMMAND_CONFIGURATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param nodeId {@link Integer}
     */
    public static void testCommandConfigurationGetLoopback(Integer groupingIdentifier, Integer nodeId) {
        byte[] testPayload = CommandClassAssociationCommandConfigurationV1.getCommandConfigurationGet(groupingIdentifier,
                nodeId);

        Map<String, Object> response = CommandClassAssociationCommandConfigurationV1.handleCommandConfigurationGet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(nodeId, (Integer) response.get("NODE_ID"));
    }

    /**
     * Performs an in/out test of the COMMAND_CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param nodeId {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param commandLength {@link Integer}
     * @param commandClassIdentifier {@link Integer}
     * @param commandIdentifier {@link Integer}
     * @param commandByte {@link byte[]}
     */
    public static void testCommandConfigurationReportLoopback(Integer groupingIdentifier, Integer nodeId,
            Integer reportsToFollow, Integer commandLength, Integer commandClassIdentifier, Integer commandIdentifier,
            byte[] commandByte) {
        byte[] testPayload = CommandClassAssociationCommandConfigurationV1.getCommandConfigurationReport(
                groupingIdentifier, nodeId, reportsToFollow, commandLength, commandClassIdentifier, commandIdentifier,
                commandByte);

        Map<String, Object> response = CommandClassAssociationCommandConfigurationV1.handleCommandConfigurationReport(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(nodeId, (Integer) response.get("NODE_ID"));
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(commandLength, (Integer) response.get("COMMAND_LENGTH"));
        assertEquals(commandClassIdentifier, (Integer) response.get("COMMAND_CLASS_IDENTIFIER"));
        assertEquals(commandIdentifier, (Integer) response.get("COMMAND_IDENTIFIER"));
        assertEquals(commandByte, (byte[]) response.get("COMMAND_BYTE"));
    }

}
