/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassNetworkManagementPrimaryV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementPrimaryV1LoopbackTest {
    /**
     * Performs an in/out test of the CONTROLLER_CHANGE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param mode {@link String}
     * @param txOptions {@link List<String>}
     */
    public static void testControllerChangeLoopback(Integer seqNo, String mode, List<String> txOptions) {
        byte[] testPayload = CommandClassNetworkManagementPrimaryV1.getControllerChange(seqNo, mode, txOptions);

        Map<String, Object> response = CommandClassNetworkManagementPrimaryV1.handleControllerChange(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(mode, (String) response.get("MODE"));
        assertEquals(txOptions, (List<String>) response.get("TX_OPTIONS"));
    }

    /**
     * Performs an in/out test of the CONTROLLER_CHANGE_STATUS command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     * @param newNodeId {@link Integer}
     * @param nodeInfoLength {@link Integer}
     * @param capability {@link Integer}
     * @param listening {@link Boolean}
     * @param security {@link Integer}
     * @param opt {@link Boolean}
     * @param basicDeviceClass {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param commandClass {@link byte[]}
     */
    public static void testControllerChangeStatusLoopback(Integer seqNo, String status, Integer newNodeId,
            Integer nodeInfoLength, Integer capability, Boolean listening, Integer security, Boolean opt,
            Integer basicDeviceClass, Integer genericDeviceClass, Integer specificDeviceClass, byte[] commandClass) {
        byte[] testPayload = CommandClassNetworkManagementPrimaryV1.getControllerChangeStatus(seqNo, status, newNodeId,
                nodeInfoLength, capability, listening, security, opt, basicDeviceClass, genericDeviceClass,
                specificDeviceClass, commandClass);

        Map<String, Object> response = CommandClassNetworkManagementPrimaryV1.handleControllerChangeStatus(testPayload);
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(status, (String) response.get("STATUS"));
        assertEquals(newNodeId, (Integer) response.get("NEW_NODE_ID"));
        assertEquals(nodeInfoLength, (Integer) response.get("NODE_INFO_LENGTH"));
        assertEquals(capability, (Integer) response.get("CAPABILITY"));
        assertEquals(listening, (Boolean) response.get("LISTENING"));
        assertEquals(security, (Integer) response.get("SECURITY"));
        assertEquals(opt, (Boolean) response.get("OPT"));
        assertEquals(basicDeviceClass, (Integer) response.get("BASIC_DEVICE_CLASS"));
        assertEquals(genericDeviceClass, (Integer) response.get("GENERIC_DEVICE_CLASS"));
        assertEquals(specificDeviceClass, (Integer) response.get("SPECIFIC_DEVICE_CLASS"));
        assertEquals(commandClass, (byte[]) response.get("COMMAND_CLASS"));
    }

}
