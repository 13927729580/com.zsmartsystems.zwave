/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassTimeV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_TIME</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassTimeV1LoopbackTest {
    /**
     * Performs an in/out test of the TIME_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param hourLocalTime {@link Integer}
     * @param rtcFailure {@link Boolean}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     */
    public static void testTimeReportLoopback(Integer hourLocalTime, Boolean rtcFailure, Integer minuteLocalTime,
            Integer secondLocalTime) {
        byte[] testPayload = CommandClassTimeV1.getTimeReport(hourLocalTime, rtcFailure, minuteLocalTime,
                secondLocalTime);

        Map<String, Object> response = CommandClassTimeV1.handleTimeReport(testPayload);
        assertEquals(hourLocalTime, (Integer) response.get("HOUR_LOCAL_TIME"));
        assertEquals(rtcFailure, (Boolean) response.get("RTC_FAILURE"));
        assertEquals(minuteLocalTime, (Integer) response.get("MINUTE_LOCAL_TIME"));
        assertEquals(secondLocalTime, (Integer) response.get("SECOND_LOCAL_TIME"));
    }

    /**
     * Performs an in/out test of the DATE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     */
    public static void testDateReportLoopback(Integer year, Integer month, Integer day) {
        byte[] testPayload = CommandClassTimeV1.getDateReport(year, month, day);

        Map<String, Object> response = CommandClassTimeV1.handleDateReport(testPayload);
        assertEquals(year, (Integer) response.get("YEAR"));
        assertEquals(month, (Integer) response.get("MONTH"));
        assertEquals(day, (Integer) response.get("DAY"));
    }

}
