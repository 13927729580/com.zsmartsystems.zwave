/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassAlarmV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ALARM</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassAlarmV2LoopbackTest {
    /**
     * Performs an in/out test of the ALARM_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param alarmType {@link Integer}
     * @param zwaveAlarmType {@link String}
     */
    public static void testAlarmGetLoopback(Integer alarmType, String zwaveAlarmType) {
        byte[] testPayload = CommandClassAlarmV2.getAlarmGet(alarmType, zwaveAlarmType);

        Map<String, Object> response = CommandClassAlarmV2.handleAlarmGet(testPayload);
        assertEquals(alarmType, (Integer) response.get("ALARM_TYPE"));
        assertEquals(zwaveAlarmType, (String) response.get("ZWAVE_ALARM_TYPE"));
    }

    /**
     * Performs an in/out test of the ALARM_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param alarmType {@link Integer}
     * @param alarmLevel {@link Integer}
     * @param zensorNetSourceNodeId {@link Integer}
     * @param zwaveAlarmStatus {@link String}
     * @param zwaveAlarmType {@link String}
     * @param zwaveAlarmEvent {@link Integer}
     * @param numberOfEventParameters {@link Integer}
     * @param eventParameter {@link byte[]}
     */
    public static void testAlarmReportLoopback(Integer alarmType, Integer alarmLevel, Integer zensorNetSourceNodeId,
            String zwaveAlarmStatus, String zwaveAlarmType, Integer zwaveAlarmEvent, Integer numberOfEventParameters,
            byte[] eventParameter) {
        byte[] testPayload = CommandClassAlarmV2.getAlarmReport(alarmType, alarmLevel, zensorNetSourceNodeId,
                zwaveAlarmStatus, zwaveAlarmType, zwaveAlarmEvent, numberOfEventParameters, eventParameter);

        Map<String, Object> response = CommandClassAlarmV2.handleAlarmReport(testPayload);
        assertEquals(alarmType, (Integer) response.get("ALARM_TYPE"));
        assertEquals(alarmLevel, (Integer) response.get("ALARM_LEVEL"));
        assertEquals(zensorNetSourceNodeId, (Integer) response.get("ZENSOR_NET_SOURCE_NODE_ID"));
        assertEquals(zwaveAlarmStatus, (String) response.get("ZWAVE_ALARM_STATUS"));
        assertEquals(zwaveAlarmType, (String) response.get("ZWAVE_ALARM_TYPE"));
        assertEquals(zwaveAlarmEvent, (Integer) response.get("ZWAVE_ALARM_EVENT"));
        assertEquals(numberOfEventParameters, (Integer) response.get("NUMBER_OF_EVENT_PARAMETERS"));
        assertEquals(eventParameter, (byte[]) response.get("EVENT_PARAMETER"));
    }

    /**
     * Performs an in/out test of the ALARM_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zwaveAlarmType {@link String}
     * @param zwaveAlarmStatus {@link String}
     */
    public static void testAlarmSetLoopback(String zwaveAlarmType, String zwaveAlarmStatus) {
        byte[] testPayload = CommandClassAlarmV2.getAlarmSet(zwaveAlarmType, zwaveAlarmStatus);

        Map<String, Object> response = CommandClassAlarmV2.handleAlarmSet(testPayload);
        assertEquals(zwaveAlarmType, (String) response.get("ZWAVE_ALARM_TYPE"));
        assertEquals(zwaveAlarmStatus, (String) response.get("ZWAVE_ALARM_STATUS"));
    }

    /**
     * Performs an in/out test of the ALARM_TYPE_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param v1Alarm {@link Boolean}
     * @param bitMask {@link List<String>}
     */
    public static void testAlarmTypeSupportedReportLoopback(Boolean v1Alarm, List<String> bitMask) {
        byte[] testPayload = CommandClassAlarmV2.getAlarmTypeSupportedReport(v1Alarm, bitMask);

        Map<String, Object> response = CommandClassAlarmV2.handleAlarmTypeSupportedReport(testPayload);
        assertEquals(v1Alarm, (Boolean) response.get("V1_ALARM"));
        assertEquals(bitMask, (List<String>) response.get("BIT_MASK"));
    }

}
