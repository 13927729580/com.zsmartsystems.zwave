/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassIrrigationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_IRRIGATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIrrigationV1LoopbackTest {
    /**
     * Performs an in/out test of the IRRIGATION_SYSTEM_INFO_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValve {@link Boolean}
     * @param totalNumberOfValves {@link Integer}
     * @param totalNumberOfValveTables {@link Integer}
     * @param valveTableMaxSize {@link Integer}
     */
    public static void testIrrigationSystemInfoReportLoopback(Boolean masterValve, Integer totalNumberOfValves,
            Integer totalNumberOfValveTables, Integer valveTableMaxSize) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationSystemInfoReport(masterValve, totalNumberOfValves,
                totalNumberOfValveTables, valveTableMaxSize);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationSystemInfoReport(testPayload);
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(totalNumberOfValves, (Integer) response.get("TOTAL_NUMBER_OF_VALVES"));
        assertEquals(totalNumberOfValveTables, (Integer) response.get("TOTAL_NUMBER_OF_VALVE_TABLES"));
        assertEquals(valveTableMaxSize, (Integer) response.get("VALVE_TABLE_MAX_SIZE"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_SYSTEM_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param systemVoltage {@link Integer}
     * @param sensorStatus {@link String}
     * @param flowValue {@link byte[]}
     * @param pressureValue {@link byte[]}
     * @param shutoffDuration {@link Integer}
     * @param systemErrorStatus {@link List<String>}
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     */
    public static void testIrrigationSystemStatusReportLoopback(Integer systemVoltage, String sensorStatus,
            byte[] flowValue, byte[] pressureValue, Integer shutoffDuration, List<String> systemErrorStatus,
            Boolean masterValve, Integer valveId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationSystemStatusReport(systemVoltage, sensorStatus,
                flowValue, pressureValue, shutoffDuration, systemErrorStatus, masterValve, valveId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationSystemStatusReport(testPayload);
        assertEquals(systemVoltage, (Integer) response.get("SYSTEM_VOLTAGE"));
        assertEquals(sensorStatus, (String) response.get("SENSOR_STATUS"));
        assertEquals(flowValue, (byte[]) response.get("FLOW_VALUE"));
        assertEquals(pressureValue, (byte[]) response.get("PRESSURE_VALUE"));
        assertEquals(shutoffDuration, (Integer) response.get("SHUTOFF_DURATION"));
        assertEquals(systemErrorStatus, (List<String>) response.get("SYSTEM_ERROR_STATUS"));
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_SYSTEM_CONFIG_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValveDelay {@link Integer}
     * @param highPressureThresholdValue {@link byte[]}
     * @param lowPressureThresholdValue {@link byte[]}
     * @param sensorPolarity {@link List<String>}
     */
    public static void testIrrigationSystemConfigSetLoopback(Integer masterValveDelay, byte[] highPressureThresholdValue,
            byte[] lowPressureThresholdValue, List<String> sensorPolarity) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationSystemConfigSet(masterValveDelay,
                highPressureThresholdValue, lowPressureThresholdValue, sensorPolarity);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationSystemConfigSet(testPayload);
        assertEquals(masterValveDelay, (Integer) response.get("MASTER_VALVE_DELAY"));
        assertEquals(highPressureThresholdValue, (byte[]) response.get("HIGH_PRESSURE_THRESHOLD_VALUE"));
        assertEquals(lowPressureThresholdValue, (byte[]) response.get("LOW_PRESSURE_THRESHOLD_VALUE"));
        assertEquals(sensorPolarity, (List<String>) response.get("SENSOR_POLARITY"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_SYSTEM_CONFIG_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValveDelay {@link Integer}
     * @param highPressureThresholdValue {@link byte[]}
     * @param lowPressureThresholdValue {@link byte[]}
     * @param sensorPolarity {@link List<String>}
     */
    public static void testIrrigationSystemConfigReportLoopback(Integer masterValveDelay,
            byte[] highPressureThresholdValue, byte[] lowPressureThresholdValue, List<String> sensorPolarity) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationSystemConfigReport(masterValveDelay,
                highPressureThresholdValue, lowPressureThresholdValue, sensorPolarity);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationSystemConfigReport(testPayload);
        assertEquals(masterValveDelay, (Integer) response.get("MASTER_VALVE_DELAY"));
        assertEquals(highPressureThresholdValue, (byte[]) response.get("HIGH_PRESSURE_THRESHOLD_VALUE"));
        assertEquals(lowPressureThresholdValue, (byte[]) response.get("LOW_PRESSURE_THRESHOLD_VALUE"));
        assertEquals(sensorPolarity, (List<String>) response.get("SENSOR_POLARITY"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_INFO_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     */
    public static void testIrrigationValveInfoGetLoopback(Boolean masterValve, Integer valveId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveInfoGet(masterValve, valveId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveInfoGet(testPayload);
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_INFO_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param master {@link Boolean}
     * @param connected {@link Boolean}
     * @param valveId {@link Integer}
     * @param nominalCurrent {@link Integer}
     * @param valveErrorStatus {@link List<String>}
     */
    public static void testIrrigationValveInfoReportLoopback(Boolean master, Boolean connected, Integer valveId,
            Integer nominalCurrent, List<String> valveErrorStatus) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveInfoReport(master, connected, valveId,
                nominalCurrent, valveErrorStatus);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveInfoReport(testPayload);
        assertEquals(master, (Boolean) response.get("MASTER"));
        assertEquals(connected, (Boolean) response.get("CONNECTED"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
        assertEquals(nominalCurrent, (Integer) response.get("NOMINAL_CURRENT"));
        assertEquals(valveErrorStatus, (List<String>) response.get("VALVE_ERROR_STATUS"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_CONFIG_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @param nominalCurrentHighThreshold {@link Integer}
     * @param nominalCurrentLowThreshold {@link Integer}
     * @param maximumFlowValue {@link byte[]}
     * @param flowHighThresholdValue {@link byte[]}
     * @param flowLowThresholdValue {@link byte[]}
     * @param sensorUsage {@link List<String>}
     */
    public static void testIrrigationValveConfigSetLoopback(Boolean masterValve, Integer valveId,
            Integer nominalCurrentHighThreshold, Integer nominalCurrentLowThreshold, byte[] maximumFlowValue,
            byte[] flowHighThresholdValue, byte[] flowLowThresholdValue, List<String> sensorUsage) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveConfigSet(masterValve, valveId,
                nominalCurrentHighThreshold, nominalCurrentLowThreshold, maximumFlowValue, flowHighThresholdValue,
                flowLowThresholdValue, sensorUsage);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveConfigSet(testPayload);
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
        assertEquals(nominalCurrentHighThreshold, (Integer) response.get("NOMINAL_CURRENT_HIGH_THRESHOLD"));
        assertEquals(nominalCurrentLowThreshold, (Integer) response.get("NOMINAL_CURRENT_LOW_THRESHOLD"));
        assertEquals(maximumFlowValue, (byte[]) response.get("MAXIMUM_FLOW_VALUE"));
        assertEquals(flowHighThresholdValue, (byte[]) response.get("FLOW_HIGH_THRESHOLD_VALUE"));
        assertEquals(flowLowThresholdValue, (byte[]) response.get("FLOW_LOW_THRESHOLD_VALUE"));
        assertEquals(sensorUsage, (List<String>) response.get("SENSOR_USAGE"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_CONFIG_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     */
    public static void testIrrigationValveConfigGetLoopback(Boolean masterValve, Integer valveId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveConfigGet(masterValve, valveId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveConfigGet(testPayload);
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_CONFIG_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @param nominalCurrentHighThreshold {@link Integer}
     * @param nominalCurrentLowThreshold {@link Integer}
     * @param maximumFlowValue {@link byte[]}
     * @param flowHighThresholdValue {@link byte[]}
     * @param flowLowThresholdValue {@link byte[]}
     * @param sensorUsage {@link List<String>}
     */
    public static void testIrrigationValveConfigReportLoopback(Boolean masterValve, Integer valveId,
            Integer nominalCurrentHighThreshold, Integer nominalCurrentLowThreshold, byte[] maximumFlowValue,
            byte[] flowHighThresholdValue, byte[] flowLowThresholdValue, List<String> sensorUsage) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveConfigReport(masterValve, valveId,
                nominalCurrentHighThreshold, nominalCurrentLowThreshold, maximumFlowValue, flowHighThresholdValue,
                flowLowThresholdValue, sensorUsage);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveConfigReport(testPayload);
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
        assertEquals(nominalCurrentHighThreshold, (Integer) response.get("NOMINAL_CURRENT_HIGH_THRESHOLD"));
        assertEquals(nominalCurrentLowThreshold, (Integer) response.get("NOMINAL_CURRENT_LOW_THRESHOLD"));
        assertEquals(maximumFlowValue, (byte[]) response.get("MAXIMUM_FLOW_VALUE"));
        assertEquals(flowHighThresholdValue, (byte[]) response.get("FLOW_HIGH_THRESHOLD_VALUE"));
        assertEquals(flowLowThresholdValue, (byte[]) response.get("FLOW_LOW_THRESHOLD_VALUE"));
        assertEquals(sensorUsage, (List<String>) response.get("SENSOR_USAGE"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_RUN command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param masterValve {@link Boolean}
     * @param valveId {@link Integer}
     * @param duration {@link Integer}
     */
    public static void testIrrigationValveRunLoopback(Boolean masterValve, Integer valveId, Integer duration) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveRun(masterValve, valveId, duration);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveRun(testPayload);
        assertEquals(masterValve, (Boolean) response.get("MASTER_VALVE"));
        assertEquals(valveId, (Integer) response.get("VALVE_ID"));
        assertEquals(duration, (Integer) response.get("DURATION"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_TABLE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param valveTableId {@link Integer}
     */
    public static void testIrrigationValveTableSetLoopback(Integer valveTableId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveTableSet(valveTableId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveTableSet(testPayload);
        assertEquals(valveTableId, (Integer) response.get("VALVE_TABLE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_TABLE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param valveTableId {@link Integer}
     */
    public static void testIrrigationValveTableGetLoopback(Integer valveTableId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveTableGet(valveTableId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveTableGet(testPayload);
        assertEquals(valveTableId, (Integer) response.get("VALVE_TABLE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_TABLE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param valveTableId {@link Integer}
     */
    public static void testIrrigationValveTableReportLoopback(Integer valveTableId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveTableReport(valveTableId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveTableReport(testPayload);
        assertEquals(valveTableId, (Integer) response.get("VALVE_TABLE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_VALVE_TABLE_RUN command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param valveTableId {@link byte[]}
     */
    public static void testIrrigationValveTableRunLoopback(byte[] valveTableId) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationValveTableRun(valveTableId);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationValveTableRun(testPayload);
        assertEquals(valveTableId, (byte[]) response.get("VALVE_TABLE_ID"));
    }

    /**
     * Performs an in/out test of the IRRIGATION_SYSTEM_SHUTOFF command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param duration {@link Integer}
     */
    public static void testIrrigationSystemShutoffLoopback(Integer duration) {
        byte[] testPayload = CommandClassIrrigationV1.getIrrigationSystemShutoff(duration);

        Map<String, Object> response = CommandClassIrrigationV1.handleIrrigationSystemShutoff(testPayload);
        assertEquals(duration, (Integer) response.get("DURATION"));
    }

}
