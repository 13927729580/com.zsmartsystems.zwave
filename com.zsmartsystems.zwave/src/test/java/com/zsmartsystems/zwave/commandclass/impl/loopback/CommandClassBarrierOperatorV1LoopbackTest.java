/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassBarrierOperatorV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_BARRIER_OPERATOR</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassBarrierOperatorV1LoopbackTest {
    /**
     * Performs an in/out test of the BARRIER_OPERATOR_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param targetValue {@link String}
     */
    public static void testBarrierOperatorSetLoopback(String targetValue) {
        byte[] testPayload = CommandClassBarrierOperatorV1.getBarrierOperatorSet(targetValue);

        Map<String, Object> response = CommandClassBarrierOperatorV1.handleBarrierOperatorSet(testPayload);
        assertEquals(targetValue, (String) response.get("TARGET_VALUE"));
    }

    /**
     * Performs an in/out test of the BARRIER_OPERATOR_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param state {@link String}
     */
    public static void testBarrierOperatorReportLoopback(String state) {
        byte[] testPayload = CommandClassBarrierOperatorV1.getBarrierOperatorReport(state);

        Map<String, Object> response = CommandClassBarrierOperatorV1.handleBarrierOperatorReport(testPayload);
        assertEquals(state, (String) response.get("STATE"));
    }

    /**
     * Performs an in/out test of the BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param bitMask {@link List<String>}
     */
    public static void testBarrierOperatorSignalSupportedReportLoopback(List<String> bitMask) {
        byte[] testPayload = CommandClassBarrierOperatorV1.getBarrierOperatorSignalSupportedReport(bitMask);

        Map<String, Object> response = CommandClassBarrierOperatorV1.handleBarrierOperatorSignalSupportedReport(testPayload);
        assertEquals(bitMask, (List<String>) response.get("BIT_MASK"));
    }

    /**
     * Performs an in/out test of the BARRIER_OPERATOR_SIGNAL_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param subsystemType {@link String}
     * @param subsystemState {@link String}
     */
    public static void testBarrierOperatorSignalSetLoopback(String subsystemType, String subsystemState) {
        byte[] testPayload = CommandClassBarrierOperatorV1.getBarrierOperatorSignalSet(subsystemType, subsystemState);

        Map<String, Object> response = CommandClassBarrierOperatorV1.handleBarrierOperatorSignalSet(testPayload);
        assertEquals(subsystemType, (String) response.get("SUBSYSTEM_TYPE"));
        assertEquals(subsystemState, (String) response.get("SUBSYSTEM_STATE"));
    }

    /**
     * Performs an in/out test of the BARRIER_OPERATOR_SIGNAL_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param subsystemType {@link String}
     */
    public static void testBarrierOperatorSignalGetLoopback(String subsystemType) {
        byte[] testPayload = CommandClassBarrierOperatorV1.getBarrierOperatorSignalGet(subsystemType);

        Map<String, Object> response = CommandClassBarrierOperatorV1.handleBarrierOperatorSignalGet(testPayload);
        assertEquals(subsystemType, (String) response.get("SUBSYSTEM_TYPE"));
    }

    /**
     * Performs an in/out test of the BARRIER_OPERATOR_SIGNAL_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param subsystemType {@link String}
     * @param subsystemState {@link String}
     */
    public static void testBarrierOperatorSignalReportLoopback(String subsystemType, String subsystemState) {
        byte[] testPayload = CommandClassBarrierOperatorV1.getBarrierOperatorSignalReport(subsystemType, subsystemState);

        Map<String, Object> response = CommandClassBarrierOperatorV1.handleBarrierOperatorSignalReport(testPayload);
        assertEquals(subsystemType, (String) response.get("SUBSYSTEM_TYPE"));
        assertEquals(subsystemState, (String) response.get("SUBSYSTEM_STATE"));
    }

}
