/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassHumidityControlSetpointV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassHumidityControlSetpointV1LoopbackTest {
    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     * @param scale {@link String}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testHumidityControlSetpointSetLoopback(String setpointType, String scale, Integer precision,
            byte[] value) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointSet(setpointType, scale,
                precision, value);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointSet(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
        assertEquals(scale, (String) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     */
    public static void testHumidityControlSetpointGetLoopback(String setpointType) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointGet(setpointType);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointGet(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     * @param scale {@link String}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testHumidityControlSetpointReportLoopback(String setpointType, String scale, Integer precision,
            byte[] value) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointReport(setpointType, scale,
                precision, value);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointReport(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
        assertEquals(scale, (String) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param bitMask {@link List<String>}
     */
    public static void testHumidityControlSetpointSupportedReportLoopback(List<String> bitMask) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointSupportedReport(bitMask);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointSupportedReport(testPayload);
        assertEquals(bitMask, (List<String>) response.get("BIT_MASK"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     */
    public static void testHumidityControlSetpointScaleSupportedGetLoopback(String setpointType) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointScaleSupportedGet(
                setpointType);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointScaleSupportedGet(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scaleBitMask {@link String}
     */
    public static void testHumidityControlSetpointScaleSupportedReportLoopback(String scaleBitMask) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointScaleSupportedReport(
                scaleBitMask);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointScaleSupportedReport(testPayload);
        assertEquals(scaleBitMask, (String) response.get("SCALE_BIT_MASK"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     */
    public static void testHumidityControlSetpointCapabilitiesGetLoopback(String setpointType) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointCapabilitiesGet(
                setpointType);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointCapabilitiesGet(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
    }

    /**
     * Performs an in/out test of the HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     * @param scale1 {@link String}
     * @param precision1 {@link Integer}
     * @param minimumValue {@link byte[]}
     * @param scale2 {@link String}
     * @param precision2 {@link Integer}
     * @param maximumValue {@link byte[]}
     */
    public static void testHumidityControlSetpointCapabilitiesReportLoopback(String setpointType, String scale1,
            Integer precision1, byte[] minimumValue, String scale2, Integer precision2, byte[] maximumValue) {
        byte[] testPayload = CommandClassHumidityControlSetpointV1.getHumidityControlSetpointCapabilitiesReport(
                setpointType, scale1, precision1, minimumValue, scale2, precision2, maximumValue);

        Map<String, Object> response = CommandClassHumidityControlSetpointV1.handleHumidityControlSetpointCapabilitiesReport(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
        assertEquals(scale1, (String) response.get("SCALE1"));
        assertEquals(precision1, (Integer) response.get("PRECISION1"));
        assertEquals(minimumValue, (byte[]) response.get("MINIMUM_VALUE"));
        assertEquals(scale2, (String) response.get("SCALE2"));
        assertEquals(precision2, (Integer) response.get("PRECISION2"));
        assertEquals(maximumValue, (byte[]) response.get("MAXIMUM_VALUE"));
    }

}
