/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.ZwaveCmdClassV1;

/**
 * Class to implement loopback tests for command class <b>ZWAVE_CMD_CLASS</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class ZwaveCmdClassV1LoopbackTest {
    /**
     * Performs an in/out test of the NODE_INFO command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param protocolVersion {@link String}
     * @param maxBaudRate {@link String}
     * @param routing {@link Boolean}
     * @param listening {@link Boolean}
     * @param security {@link Boolean}
     * @param controller {@link Boolean}
     * @param specificDevice {@link Boolean}
     * @param routingSlave {@link Boolean}
     * @param beamCapability {@link Boolean}
     * @param sensor250ms {@link Boolean}
     * @param sensor1000ms {@link Boolean}
     * @param optionalFunctionality {@link Boolean}
     * @param speedExtension {@link String}
     */
    public static void testNodeInfoLoopback(String protocolVersion, String maxBaudRate, Boolean routing,
            Boolean listening, Boolean security, Boolean controller, Boolean specificDevice, Boolean routingSlave,
            Boolean beamCapability, Boolean sensor250ms, Boolean sensor1000ms, Boolean optionalFunctionality,
            String speedExtension) {
        byte[] testPayload = ZwaveCmdClassV1.getNodeInfo(protocolVersion, maxBaudRate, routing, listening, security,
                controller, specificDevice, routingSlave, beamCapability, sensor250ms, sensor1000ms,
                optionalFunctionality, speedExtension);

        Map<String, Object> response = ZwaveCmdClassV1.handleNodeInfo(testPayload);
        assertEquals(protocolVersion, (String) response.get("PROTOCOL_VERSION"));
        assertEquals(maxBaudRate, (String) response.get("MAX_BAUD_RATE"));
        assertEquals(routing, (Boolean) response.get("ROUTING"));
        assertEquals(listening, (Boolean) response.get("LISTENING"));
        assertEquals(security, (Boolean) response.get("SECURITY"));
        assertEquals(controller, (Boolean) response.get("CONTROLLER"));
        assertEquals(specificDevice, (Boolean) response.get("SPECIFIC_DEVICE"));
        assertEquals(routingSlave, (Boolean) response.get("ROUTING_SLAVE"));
        assertEquals(beamCapability, (Boolean) response.get("BEAM_CAPABILITY"));
        assertEquals(sensor250ms, (Boolean) response.get("SENSOR250MS"));
        assertEquals(sensor1000ms, (Boolean) response.get("SENSOR1000MS"));
        assertEquals(optionalFunctionality, (Boolean) response.get("OPTIONAL_FUNCTIONALITY"));
        assertEquals(speedExtension, (String) response.get("SPEED_EXTENSION"));
    }

}
