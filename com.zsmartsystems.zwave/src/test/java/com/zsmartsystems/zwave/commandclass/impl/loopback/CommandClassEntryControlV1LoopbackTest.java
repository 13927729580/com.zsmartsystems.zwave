/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassEntryControlV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ENTRY_CONTROL</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassEntryControlV1LoopbackTest {
    /**
     * Performs an in/out test of the ENTRY_CONTROL_NOTIFICATION command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sequenceNumber {@link Integer}
     * @param dataType {@link String}
     * @param eventType {@link String}
     * @param eventDataLength {@link Integer}
     * @param eventData {@link byte[]}
     */
    public static void testEntryControlNotificationLoopback(Integer sequenceNumber, String dataType, String eventType,
            Integer eventDataLength, byte[] eventData) {
        byte[] testPayload = CommandClassEntryControlV1.getEntryControlNotification(sequenceNumber, dataType, eventType,
                eventDataLength, eventData);

        Map<String, Object> response = CommandClassEntryControlV1.handleEntryControlNotification(testPayload);
        assertEquals(sequenceNumber, (Integer) response.get("SEQUENCE_NUMBER"));
        assertEquals(dataType, (String) response.get("DATA_TYPE"));
        assertEquals(eventType, (String) response.get("EVENT_TYPE"));
        assertEquals(eventDataLength, (Integer) response.get("EVENT_DATA_LENGTH"));
        assertEquals(eventData, (byte[]) response.get("EVENT_DATA"));
    }

    /**
     * Performs an in/out test of the ENTRY_CONTROL_KEY_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param keySupportedBitMaskLength {@link Integer}
     * @param keySupportedBitMask {@link List<Integer>}
     */
    public static void testEntryControlKeySupportedReportLoopback(Integer keySupportedBitMaskLength,
            List<Integer> keySupportedBitMask) {
        byte[] testPayload = CommandClassEntryControlV1.getEntryControlKeySupportedReport(keySupportedBitMaskLength,
                keySupportedBitMask);

        Map<String, Object> response = CommandClassEntryControlV1.handleEntryControlKeySupportedReport(testPayload);
        assertEquals(keySupportedBitMaskLength, (Integer) response.get("KEY_SUPPORTED_BIT_MASK_LENGTH"));
        assertEquals(keySupportedBitMask, (List<Integer>) response.get("KEY_SUPPORTED_BIT_MASK"));
    }

    /**
     * Performs an in/out test of the ENTRY_CONTROL_EVENT_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param dataTypeSupportedBitMask {@link List<String>}
     * @param eventTypeSupportedBitMask {@link List<String>}
     * @param keyCachedSizeSupportedMinimum {@link Integer}
     * @param keyCachedSizeSupportedMaximum {@link Integer}
     * @param keyCachedTimeoutSupportedMinimum {@link Integer}
     * @param keyCachedTimeoutSupportedMaximum {@link Integer}
     */
    public static void testEntryControlEventSupportedReportLoopback(List<String> dataTypeSupportedBitMask,
            List<String> eventTypeSupportedBitMask, Integer keyCachedSizeSupportedMinimum,
            Integer keyCachedSizeSupportedMaximum, Integer keyCachedTimeoutSupportedMinimum,
            Integer keyCachedTimeoutSupportedMaximum) {
        byte[] testPayload = CommandClassEntryControlV1.getEntryControlEventSupportedReport(dataTypeSupportedBitMask,
                eventTypeSupportedBitMask, keyCachedSizeSupportedMinimum, keyCachedSizeSupportedMaximum,
                keyCachedTimeoutSupportedMinimum, keyCachedTimeoutSupportedMaximum);

        Map<String, Object> response = CommandClassEntryControlV1.handleEntryControlEventSupportedReport(testPayload);
        assertEquals(dataTypeSupportedBitMask, (List<String>) response.get("DATA_TYPE_SUPPORTED_BIT_MASK"));
        assertEquals(eventTypeSupportedBitMask, (List<String>) response.get("EVENT_TYPE_SUPPORTED_BIT_MASK"));
        assertEquals(keyCachedSizeSupportedMinimum, (Integer) response.get("KEY_CACHED_SIZE_SUPPORTED_MINIMUM"));
        assertEquals(keyCachedSizeSupportedMaximum, (Integer) response.get("KEY_CACHED_SIZE_SUPPORTED_MAXIMUM"));
        assertEquals(keyCachedTimeoutSupportedMinimum, (Integer) response.get("KEY_CACHED_TIMEOUT_SUPPORTED_MINIMUM"));
        assertEquals(keyCachedTimeoutSupportedMaximum, (Integer) response.get("KEY_CACHED_TIMEOUT_SUPPORTED_MAXIMUM"));
    }

    /**
     * Performs an in/out test of the ENTRY_CONTROL_CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param keyCacheSize {@link Integer}
     * @param keyCacheTimeout {@link Integer}
     */
    public static void testEntryControlConfigurationSetLoopback(Integer keyCacheSize, Integer keyCacheTimeout) {
        byte[] testPayload = CommandClassEntryControlV1.getEntryControlConfigurationSet(keyCacheSize, keyCacheTimeout);

        Map<String, Object> response = CommandClassEntryControlV1.handleEntryControlConfigurationSet(testPayload);
        assertEquals(keyCacheSize, (Integer) response.get("KEY_CACHE_SIZE"));
        assertEquals(keyCacheTimeout, (Integer) response.get("KEY_CACHE_TIMEOUT"));
    }

    /**
     * Performs an in/out test of the ENTRY_CONTROL_CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param keyCacheSize {@link Integer}
     * @param keyCacheTimeout {@link Integer}
     */
    public static void testEntryControlConfigurationReportLoopback(Integer keyCacheSize, Integer keyCacheTimeout) {
        byte[] testPayload = CommandClassEntryControlV1.getEntryControlConfigurationReport(keyCacheSize, keyCacheTimeout);

        Map<String, Object> response = CommandClassEntryControlV1.handleEntryControlConfigurationReport(testPayload);
        assertEquals(keyCacheSize, (Integer) response.get("KEY_CACHE_SIZE"));
        assertEquals(keyCacheTimeout, (Integer) response.get("KEY_CACHE_TIMEOUT"));
    }

}
