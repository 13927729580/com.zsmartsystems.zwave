/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassRemoteAssociationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_REMOTE_ASSOCIATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassRemoteAssociationV1LoopbackTest {
    /**
     * Performs an in/out test of the REMOTE_ASSOCIATION_CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param localGroupingIdentifier {@link String}
     * @param remoteNodeid {@link String}
     * @param remoteGroupingIdentifier {@link Integer}
     */
    public static void testRemoteAssociationConfigurationSetLoopback(String localGroupingIdentifier, String remoteNodeid,
            Integer remoteGroupingIdentifier) {
        byte[] testPayload = CommandClassRemoteAssociationV1.getRemoteAssociationConfigurationSet(
                localGroupingIdentifier, remoteNodeid, remoteGroupingIdentifier);

        Map<String, Object> response = CommandClassRemoteAssociationV1.handleRemoteAssociationConfigurationSet(testPayload);
        assertEquals(localGroupingIdentifier, (String) response.get("LOCAL_GROUPING_IDENTIFIER"));
        assertEquals(remoteNodeid, (String) response.get("REMOTE_NODEID"));
        assertEquals(remoteGroupingIdentifier, (Integer) response.get("REMOTE_GROUPING_IDENTIFIER"));
    }

    /**
     * Performs an in/out test of the REMOTE_ASSOCIATION_CONFIGURATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param localGroupingIdentifier {@link Integer}
     */
    public static void testRemoteAssociationConfigurationGetLoopback(Integer localGroupingIdentifier) {
        byte[] testPayload = CommandClassRemoteAssociationV1.getRemoteAssociationConfigurationGet(
                localGroupingIdentifier);

        Map<String, Object> response = CommandClassRemoteAssociationV1.handleRemoteAssociationConfigurationGet(testPayload);
        assertEquals(localGroupingIdentifier, (Integer) response.get("LOCAL_GROUPING_IDENTIFIER"));
    }

    /**
     * Performs an in/out test of the REMOTE_ASSOCIATION_CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param localGroupingIdentifier {@link String}
     * @param remoteNodeid {@link String}
     * @param remoteGroupingIdentifier {@link Integer}
     */
    public static void testRemoteAssociationConfigurationReportLoopback(String localGroupingIdentifier,
            String remoteNodeid, Integer remoteGroupingIdentifier) {
        byte[] testPayload = CommandClassRemoteAssociationV1.getRemoteAssociationConfigurationReport(
                localGroupingIdentifier, remoteNodeid, remoteGroupingIdentifier);

        Map<String, Object> response = CommandClassRemoteAssociationV1.handleRemoteAssociationConfigurationReport(testPayload);
        assertEquals(localGroupingIdentifier, (String) response.get("LOCAL_GROUPING_IDENTIFIER"));
        assertEquals(remoteNodeid, (String) response.get("REMOTE_NODEID"));
        assertEquals(remoteGroupingIdentifier, (Integer) response.get("REMOTE_GROUPING_IDENTIFIER"));
    }

}
