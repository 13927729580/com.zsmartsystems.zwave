/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassZipGatewayV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ZIP_GATEWAY</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassZipGatewayV1LoopbackTest {
    /**
     * Performs an in/out test of the GATEWAY_MODE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     */
    public static void testGatewayModeSetLoopback(String mode) {
        byte[] testPayload = CommandClassZipGatewayV1.getGatewayModeSet(mode);

        Map<String, Object> response = CommandClassZipGatewayV1.handleGatewayModeSet(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the GATEWAY_MODE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     */
    public static void testGatewayModeReportLoopback(String mode) {
        byte[] testPayload = CommandClassZipGatewayV1.getGatewayModeReport(mode);

        Map<String, Object> response = CommandClassZipGatewayV1.handleGatewayModeReport(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the GATEWAY_PEER_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param peerProfile {@link Integer}
     * @param ipv6Address {@link byte[]}
     * @param port {@link Integer}
     * @param peerName {@link byte[]}
     */
    public static void testGatewayPeerSetLoopback(Integer peerProfile, byte[] ipv6Address, Integer port, byte[] peerName) {
        byte[] testPayload = CommandClassZipGatewayV1.getGatewayPeerSet(peerProfile, ipv6Address, port, peerName);

        Map<String, Object> response = CommandClassZipGatewayV1.handleGatewayPeerSet(testPayload);
        assertEquals(peerProfile, (Integer) response.get("PEER_PROFILE"));
        assertEquals(ipv6Address, (byte[]) response.get("IPV6_ADDRESS"));
        assertEquals(port, (Integer) response.get("PORT"));
        assertEquals(peerName, (byte[]) response.get("PEER_NAME"));
    }

    /**
     * Performs an in/out test of the GATEWAY_PEER_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param peerProfile {@link Integer}
     */
    public static void testGatewayPeerGetLoopback(Integer peerProfile) {
        byte[] testPayload = CommandClassZipGatewayV1.getGatewayPeerGet(peerProfile);

        Map<String, Object> response = CommandClassZipGatewayV1.handleGatewayPeerGet(testPayload);
        assertEquals(peerProfile, (Integer) response.get("PEER_PROFILE"));
    }

    /**
     * Performs an in/out test of the GATEWAY_PEER_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param peerProfile {@link Integer}
     * @param peerCount {@link Integer}
     * @param ipv6Address {@link byte[]}
     * @param port {@link Integer}
     * @param peerName {@link byte[]}
     */
    public static void testGatewayPeerReportLoopback(Integer peerProfile, Integer peerCount, byte[] ipv6Address,
            Integer port, byte[] peerName) {
        byte[] testPayload = CommandClassZipGatewayV1.getGatewayPeerReport(peerProfile, peerCount, ipv6Address, port,
                peerName);

        Map<String, Object> response = CommandClassZipGatewayV1.handleGatewayPeerReport(testPayload);
        assertEquals(peerProfile, (Integer) response.get("PEER_PROFILE"));
        assertEquals(peerCount, (Integer) response.get("PEER_COUNT"));
        assertEquals(ipv6Address, (byte[]) response.get("IPV6_ADDRESS"));
        assertEquals(port, (Integer) response.get("PORT"));
        assertEquals(peerName, (byte[]) response.get("PEER_NAME"));
    }

    /**
     * Performs an in/out test of the GATEWAY_LOCK_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param lock {@link Boolean}
     * @param show {@link Boolean}
     */
    public static void testGatewayLockSetLoopback(Boolean lock, Boolean show) {
        byte[] testPayload = CommandClassZipGatewayV1.getGatewayLockSet(lock, show);

        Map<String, Object> response = CommandClassZipGatewayV1.handleGatewayLockSet(testPayload);
        assertEquals(lock, (Boolean) response.get("LOCK"));
        assertEquals(show, (Boolean) response.get("SHOW"));
    }

    /**
     * Performs an in/out test of the UNSOLICITED_DESTINATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param unsolicitedIpv6Destination {@link byte[]}
     * @param unsolicitedDestinationPort {@link Integer}
     */
    public static void testUnsolicitedDestinationSetLoopback(byte[] unsolicitedIpv6Destination,
            Integer unsolicitedDestinationPort) {
        byte[] testPayload = CommandClassZipGatewayV1.getUnsolicitedDestinationSet(unsolicitedIpv6Destination,
                unsolicitedDestinationPort);

        Map<String, Object> response = CommandClassZipGatewayV1.handleUnsolicitedDestinationSet(testPayload);
        assertEquals(unsolicitedIpv6Destination, (byte[]) response.get("UNSOLICITED_IPV6_DESTINATION"));
        assertEquals(unsolicitedDestinationPort, (Integer) response.get("UNSOLICITED_DESTINATION_PORT"));
    }

    /**
     * Performs an in/out test of the UNSOLICITED_DESTINATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param unsolicitedIpv6Destination {@link byte[]}
     * @param unsolicitedDestinationPort {@link Integer}
     */
    public static void testUnsolicitedDestinationReportLoopback(byte[] unsolicitedIpv6Destination,
            Integer unsolicitedDestinationPort) {
        byte[] testPayload = CommandClassZipGatewayV1.getUnsolicitedDestinationReport(unsolicitedIpv6Destination,
                unsolicitedDestinationPort);

        Map<String, Object> response = CommandClassZipGatewayV1.handleUnsolicitedDestinationReport(testPayload);
        assertEquals(unsolicitedIpv6Destination, (byte[]) response.get("UNSOLICITED_IPV6_DESTINATION"));
        assertEquals(unsolicitedDestinationPort, (Integer) response.get("UNSOLICITED_DESTINATION_PORT"));
    }

    /**
     * Performs an in/out test of the COMMAND_APPLICATION_NODE_INFO_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nonSecureCommandClass {@link byte[]}
     * @param securityScheme0CommandClass {@link byte[]}
     */
    public static void testCommandApplicationNodeInfoSetLoopback(byte[] nonSecureCommandClass,
            byte[] securityScheme0CommandClass) {
        byte[] testPayload = CommandClassZipGatewayV1.getCommandApplicationNodeInfoSet(nonSecureCommandClass,
                securityScheme0CommandClass);

        Map<String, Object> response = CommandClassZipGatewayV1.handleCommandApplicationNodeInfoSet(testPayload);
        assertEquals(nonSecureCommandClass, (byte[]) response.get("NON_SECURE_COMMAND_CLASS"));
        assertEquals(securityScheme0CommandClass, (byte[]) response.get("SECURITY_SCHEME0_COMMAND_CLASS"));
    }

    /**
     * Performs an in/out test of the COMMAND_APPLICATION_NODE_INFO_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nonSecureCommandClass {@link byte[]}
     * @param securityScheme0CommandClass {@link byte[]}
     */
    public static void testCommandApplicationNodeInfoReportLoopback(byte[] nonSecureCommandClass,
            byte[] securityScheme0CommandClass) {
        byte[] testPayload = CommandClassZipGatewayV1.getCommandApplicationNodeInfoReport(nonSecureCommandClass,
                securityScheme0CommandClass);

        Map<String, Object> response = CommandClassZipGatewayV1.handleCommandApplicationNodeInfoReport(testPayload);
        assertEquals(nonSecureCommandClass, (byte[]) response.get("NON_SECURE_COMMAND_CLASS"));
        assertEquals(securityScheme0CommandClass, (byte[]) response.get("SECURITY_SCHEME0_COMMAND_CLASS"));
    }

}
