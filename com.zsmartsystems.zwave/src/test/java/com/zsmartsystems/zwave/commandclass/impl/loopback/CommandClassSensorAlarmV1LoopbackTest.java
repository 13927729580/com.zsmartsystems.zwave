/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassSensorAlarmV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_SENSOR_ALARM</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSensorAlarmV1LoopbackTest {
    /**
     * Performs an in/out test of the SENSOR_ALARM_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sensorType {@link String}
     */
    public static void testSensorAlarmGetLoopback(String sensorType) {
        byte[] testPayload = CommandClassSensorAlarmV1.getSensorAlarmGet(sensorType);

        Map<String, Object> response = CommandClassSensorAlarmV1.handleSensorAlarmGet(testPayload);
        assertEquals(sensorType, (String) response.get("SENSOR_TYPE"));
    }

    /**
     * Performs an in/out test of the SENSOR_ALARM_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param sourceNodeId {@link Integer}
     * @param sensorType {@link String}
     * @param sensorState {@link String}
     * @param seconds {@link Integer}
     */
    public static void testSensorAlarmReportLoopback(Integer sourceNodeId, String sensorType, String sensorState,
            Integer seconds) {
        byte[] testPayload = CommandClassSensorAlarmV1.getSensorAlarmReport(sourceNodeId, sensorType, sensorState,
                seconds);

        Map<String, Object> response = CommandClassSensorAlarmV1.handleSensorAlarmReport(testPayload);
        assertEquals(sourceNodeId, (Integer) response.get("SOURCE_NODE_ID"));
        assertEquals(sensorType, (String) response.get("SENSOR_TYPE"));
        assertEquals(sensorState, (String) response.get("SENSOR_STATE"));
        assertEquals(seconds, (Integer) response.get("SECONDS"));
    }

    /**
     * Performs an in/out test of the SENSOR_ALARM_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param numberOfBitMasks {@link Integer}
     * @param bitMask {@link byte[]}
     */
    public static void testSensorAlarmSupportedReportLoopback(Integer numberOfBitMasks, byte[] bitMask) {
        byte[] testPayload = CommandClassSensorAlarmV1.getSensorAlarmSupportedReport(numberOfBitMasks, bitMask);

        Map<String, Object> response = CommandClassSensorAlarmV1.handleSensorAlarmSupportedReport(testPayload);
        assertEquals(numberOfBitMasks, (Integer) response.get("NUMBER_OF_BIT_MASKS"));
        assertEquals(bitMask, (byte[]) response.get("BIT_MASK"));
    }

}
