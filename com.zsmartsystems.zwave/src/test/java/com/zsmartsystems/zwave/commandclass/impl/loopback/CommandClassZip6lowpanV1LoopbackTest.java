/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassZip6lowpanV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ZIP_6LOWPAN</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassZip6lowpanV1LoopbackTest {
    /**
     * Performs an in/out test of the LOWPAN_FIRST_FRAGMENT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramSize1 {@link Integer}
     * @param datagramSize2 {@link Integer}
     * @param datagramTag {@link Integer}
     * @param payload {@link byte[]}
     */
    public static void testLowpanFirstFragmentLoopback(Integer datagramSize1, Integer datagramSize2, Integer datagramTag,
            byte[] payload) {
        byte[] testPayload = CommandClassZip6lowpanV1.getLowpanFirstFragment(datagramSize1, datagramSize2, datagramTag,
                payload);

        Map<String, Object> response = CommandClassZip6lowpanV1.handleLowpanFirstFragment(testPayload);
        assertEquals(datagramSize1, (Integer) response.get("DATAGRAM_SIZE1"));
        assertEquals(datagramSize2, (Integer) response.get("DATAGRAM_SIZE2"));
        assertEquals(datagramTag, (Integer) response.get("DATAGRAM_TAG"));
        assertEquals(payload, (byte[]) response.get("PAYLOAD"));
    }

    /**
     * Performs an in/out test of the LOWPAN_SUBSEQUENT_FRAGMENT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param datagramSize1 {@link Integer}
     * @param datagramSize2 {@link Integer}
     * @param datagramTag {@link Integer}
     * @param datagramOffset {@link Integer}
     * @param payload {@link byte[]}
     */
    public static void testLowpanSubsequentFragmentLoopback(Integer datagramSize1, Integer datagramSize2,
            Integer datagramTag, Integer datagramOffset, byte[] payload) {
        byte[] testPayload = CommandClassZip6lowpanV1.getLowpanSubsequentFragment(datagramSize1, datagramSize2,
                datagramTag, datagramOffset, payload);

        Map<String, Object> response = CommandClassZip6lowpanV1.handleLowpanSubsequentFragment(testPayload);
        assertEquals(datagramSize1, (Integer) response.get("DATAGRAM_SIZE1"));
        assertEquals(datagramSize2, (Integer) response.get("DATAGRAM_SIZE2"));
        assertEquals(datagramTag, (Integer) response.get("DATAGRAM_TAG"));
        assertEquals(datagramOffset, (Integer) response.get("DATAGRAM_OFFSET"));
        assertEquals(payload, (byte[]) response.get("PAYLOAD"));
    }

}
