/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassIpConfigurationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_IP_CONFIGURATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIpConfigurationV1LoopbackTest {
    /**
     * Performs an in/out test of the IP_CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param autoDns {@link Boolean}
     * @param autoIp {@link Boolean}
     * @param ipAddress {@link Long}
     * @param subnetMask {@link Long}
     * @param gateway {@link Long}
     * @param dns1 {@link Long}
     * @param dns2 {@link Long}
     */
    public static void testIpConfigurationSetLoopback(Boolean autoDns, Boolean autoIp, Long ipAddress, Long subnetMask,
            Long gateway, Long dns1, Long dns2) {
        byte[] testPayload = CommandClassIpConfigurationV1.getIpConfigurationSet(autoDns, autoIp, ipAddress, subnetMask,
                gateway, dns1, dns2);

        Map<String, Object> response = CommandClassIpConfigurationV1.handleIpConfigurationSet(testPayload);
        assertEquals(autoDns, (Boolean) response.get("AUTO_DNS"));
        assertEquals(autoIp, (Boolean) response.get("AUTO_IP"));
        assertEquals(ipAddress, (Long) response.get("IP_ADDRESS"));
        assertEquals(subnetMask, (Long) response.get("SUBNET_MASK"));
        assertEquals(gateway, (Long) response.get("GATEWAY"));
        assertEquals(dns1, (Long) response.get("DNS1"));
        assertEquals(dns2, (Long) response.get("DNS2"));
    }

    /**
     * Performs an in/out test of the IP_CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param autoDns {@link Boolean}
     * @param autoIp {@link Boolean}
     * @param ipAddress {@link Long}
     * @param subnetMask {@link Long}
     * @param gateway {@link Long}
     * @param dns1 {@link Long}
     * @param dns2 {@link Long}
     * @param leasetime {@link Long}
     */
    public static void testIpConfigurationReportLoopback(Boolean autoDns, Boolean autoIp, Long ipAddress,
            Long subnetMask, Long gateway, Long dns1, Long dns2, Long leasetime) {
        byte[] testPayload = CommandClassIpConfigurationV1.getIpConfigurationReport(autoDns, autoIp, ipAddress,
                subnetMask, gateway, dns1, dns2, leasetime);

        Map<String, Object> response = CommandClassIpConfigurationV1.handleIpConfigurationReport(testPayload);
        assertEquals(autoDns, (Boolean) response.get("AUTO_DNS"));
        assertEquals(autoIp, (Boolean) response.get("AUTO_IP"));
        assertEquals(ipAddress, (Long) response.get("IP_ADDRESS"));
        assertEquals(subnetMask, (Long) response.get("SUBNET_MASK"));
        assertEquals(gateway, (Long) response.get("GATEWAY"));
        assertEquals(dns1, (Long) response.get("DNS1"));
        assertEquals(dns2, (Long) response.get("DNS2"));
        assertEquals(leasetime, (Long) response.get("LEASETIME"));
    }

}
