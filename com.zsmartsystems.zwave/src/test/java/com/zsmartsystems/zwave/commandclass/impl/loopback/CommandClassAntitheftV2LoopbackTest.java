/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassAntitheftV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ANTITHEFT</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassAntitheftV2LoopbackTest {
    /**
     * Performs an in/out test of the ANTITHEFT_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param enable {@link Boolean}
     * @param magicCode {@link byte[]}
     * @param manufacturerId {@link Integer}
     * @param antiTheftHintNumberBytes {@link Integer}
     * @param antiTheftHintByte {@link byte[]}
     */
    public static void testAntitheftSetLoopback(Boolean enable, byte[] magicCode, Integer manufacturerId,
            Integer antiTheftHintNumberBytes, byte[] antiTheftHintByte) {
        byte[] testPayload = CommandClassAntitheftV2.getAntitheftSet(enable, magicCode, manufacturerId,
                antiTheftHintNumberBytes, antiTheftHintByte);

        Map<String, Object> response = CommandClassAntitheftV2.handleAntitheftSet(testPayload);
        assertEquals(enable, (Boolean) response.get("ENABLE"));
        assertEquals(magicCode, (byte[]) response.get("MAGIC_CODE"));
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(antiTheftHintNumberBytes, (Integer) response.get("ANTI_THEFT_HINT_NUMBER_BYTES"));
        assertEquals(antiTheftHintByte, (byte[]) response.get("ANTI_THEFT_HINT_BYTE"));
    }

    /**
     * Performs an in/out test of the ANTITHEFT_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param antiTheftProtectionStatus {@link Integer}
     * @param manufacturerId {@link Integer}
     * @param antiTheftHintNumberBytes {@link Integer}
     * @param antiTheftHintByte {@link byte[]}
     */
    public static void testAntitheftReportLoopback(Integer antiTheftProtectionStatus, Integer manufacturerId,
            Integer antiTheftHintNumberBytes, byte[] antiTheftHintByte) {
        byte[] testPayload = CommandClassAntitheftV2.getAntitheftReport(antiTheftProtectionStatus, manufacturerId,
                antiTheftHintNumberBytes, antiTheftHintByte);

        Map<String, Object> response = CommandClassAntitheftV2.handleAntitheftReport(testPayload);
        assertEquals(antiTheftProtectionStatus, (Integer) response.get("ANTI_THEFT_PROTECTION_STATUS"));
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(antiTheftHintNumberBytes, (Integer) response.get("ANTI_THEFT_HINT_NUMBER_BYTES"));
        assertEquals(antiTheftHintByte, (byte[]) response.get("ANTI_THEFT_HINT_BYTE"));
    }

}
