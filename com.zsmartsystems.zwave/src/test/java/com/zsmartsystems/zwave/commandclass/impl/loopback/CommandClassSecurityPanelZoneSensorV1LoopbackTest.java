/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassSecurityPanelZoneSensorV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSecurityPanelZoneSensorV1LoopbackTest {
    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_SENSOR_INSTALLED_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     */
    public static void testSecurityPanelZoneSensorInstalledGetLoopback(Integer zoneNumber) {
        byte[] testPayload = CommandClassSecurityPanelZoneSensorV1.getSecurityPanelZoneSensorInstalledGet(zoneNumber);

        Map<String, Object> response = CommandClassSecurityPanelZoneSensorV1.handleSecurityPanelZoneSensorInstalledGet(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
    }

    /**
     * Performs an in/out test of the COMMAND_CLASS_SECURITY_PANEL_ZONE_SENSOR_INSTALLED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param numberOfSensors {@link Integer}
     */
    public static void testCommandClassSecurityPanelZoneSensorInstalledReportLoopback(Integer zoneNumber,
            Integer numberOfSensors) {
        byte[] testPayload = CommandClassSecurityPanelZoneSensorV1.getCommandClassSecurityPanelZoneSensorInstalledReport(
                zoneNumber, numberOfSensors);

        Map<String, Object> response = CommandClassSecurityPanelZoneSensorV1.handleCommandClassSecurityPanelZoneSensorInstalledReport(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(numberOfSensors, (Integer) response.get("NUMBER_OF_SENSORS"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_SENSOR_TYPE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param sensorNumber {@link Integer}
     */
    public static void testSecurityPanelZoneSensorTypeGetLoopback(Integer zoneNumber, Integer sensorNumber) {
        byte[] testPayload = CommandClassSecurityPanelZoneSensorV1.getSecurityPanelZoneSensorTypeGet(zoneNumber,
                sensorNumber);

        Map<String, Object> response = CommandClassSecurityPanelZoneSensorV1.handleSecurityPanelZoneSensorTypeGet(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(sensorNumber, (Integer) response.get("SENSOR_NUMBER"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_SENSOR_TYPE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param sensorNumber {@link Integer}
     * @param zwaveAlarmType {@link Integer}
     */
    public static void testSecurityPanelZoneSensorTypeReportLoopback(Integer zoneNumber, Integer sensorNumber,
            Integer zwaveAlarmType) {
        byte[] testPayload = CommandClassSecurityPanelZoneSensorV1.getSecurityPanelZoneSensorTypeReport(zoneNumber,
                sensorNumber, zwaveAlarmType);

        Map<String, Object> response = CommandClassSecurityPanelZoneSensorV1.handleSecurityPanelZoneSensorTypeReport(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(sensorNumber, (Integer) response.get("SENSOR_NUMBER"));
        assertEquals(zwaveAlarmType, (Integer) response.get("ZWAVE_ALARM_TYPE"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_SENSOR_STATE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param sensorNumber {@link Integer}
     */
    public static void testSecurityPanelZoneSensorStateGetLoopback(Integer zoneNumber, Integer sensorNumber) {
        byte[] testPayload = CommandClassSecurityPanelZoneSensorV1.getSecurityPanelZoneSensorStateGet(zoneNumber,
                sensorNumber);

        Map<String, Object> response = CommandClassSecurityPanelZoneSensorV1.handleSecurityPanelZoneSensorStateGet(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(sensorNumber, (Integer) response.get("SENSOR_NUMBER"));
    }

    /**
     * Performs an in/out test of the SECURITY_PANEL_ZONE_SENSOR_STATE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param zoneNumber {@link Integer}
     * @param sensorNumber {@link Integer}
     * @param zwaveAlarmType {@link Integer}
     * @param zwaveAlarmEvent {@link Integer}
     * @param eventParameters {@link Integer}
     */
    public static void testSecurityPanelZoneSensorStateReportLoopback(Integer zoneNumber, Integer sensorNumber,
            Integer zwaveAlarmType, Integer zwaveAlarmEvent, Integer eventParameters) {
        byte[] testPayload = CommandClassSecurityPanelZoneSensorV1.getSecurityPanelZoneSensorStateReport(zoneNumber,
                sensorNumber, zwaveAlarmType, zwaveAlarmEvent, eventParameters);

        Map<String, Object> response = CommandClassSecurityPanelZoneSensorV1.handleSecurityPanelZoneSensorStateReport(testPayload);
        assertEquals(zoneNumber, (Integer) response.get("ZONE_NUMBER"));
        assertEquals(sensorNumber, (Integer) response.get("SENSOR_NUMBER"));
        assertEquals(zwaveAlarmType, (Integer) response.get("ZWAVE_ALARM_TYPE"));
        assertEquals(zwaveAlarmEvent, (Integer) response.get("ZWAVE_ALARM_EVENT"));
        assertEquals(eventParameters, (Integer) response.get("EVENT_PARAMETERS"));
    }

}
