/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassChimneyFanV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_CHIMNEY_FAN</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassChimneyFanV1LoopbackTest {
    /**
     * Performs an in/out test of the CHIMNEY_FAN_STATE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param state {@link String}
     */
    public static void testChimneyFanStateSetLoopback(String state) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStateSet(state);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStateSet(testPayload);
        assertEquals(state, (String) response.get("STATE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_STATE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param state {@link String}
     */
    public static void testChimneyFanStateReportLoopback(String state) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStateReport(state);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStateReport(testPayload);
        assertEquals(state, (String) response.get("STATE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_SPEED_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param speed {@link String}
     */
    public static void testChimneyFanSpeedSetLoopback(String speed) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanSpeedSet(speed);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanSpeedSet(testPayload);
        assertEquals(speed, (String) response.get("SPEED"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_SPEED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param speed {@link Integer}
     */
    public static void testChimneyFanSpeedReportLoopback(Integer speed) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanSpeedReport(speed);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanSpeedReport(testPayload);
        assertEquals(speed, (Integer) response.get("SPEED"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_START_TEMP_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanStartTempSetLoopback(Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStartTempSet(scale, precision, value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStartTempSet(testPayload);
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_START_TEMP_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanStartTempReportLoopback(Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStartTempReport(scale, precision, value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStartTempReport(testPayload);
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_STOP_TEMP_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanStopTempSetLoopback(Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStopTempSet(scale, precision, value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStopTempSet(testPayload);
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_STOP_TEMP_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanStopTempReportLoopback(Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStopTempReport(scale, precision, value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStopTempReport(testPayload);
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_ALARM_TEMP_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanAlarmTempSetLoopback(Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanAlarmTempSet(scale, precision, value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanAlarmTempSet(testPayload);
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_ALARM_TEMP_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanAlarmTempReportLoopback(Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanAlarmTempReport(scale, precision, value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanAlarmTempReport(testPayload);
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_BOOST_TIME_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param time {@link Integer}
     */
    public static void testChimneyFanBoostTimeSetLoopback(Integer time) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanBoostTimeSet(time);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanBoostTimeSet(testPayload);
        assertEquals(time, (Integer) response.get("TIME"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_BOOST_TIME_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param time {@link Integer}
     */
    public static void testChimneyFanBoostTimeReportLoopback(Integer time) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanBoostTimeReport(time);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanBoostTimeReport(testPayload);
        assertEquals(time, (Integer) response.get("TIME"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_STOP_TIME_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param time {@link Integer}
     */
    public static void testChimneyFanStopTimeSetLoopback(Integer time) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStopTimeSet(time);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStopTimeSet(testPayload);
        assertEquals(time, (Integer) response.get("TIME"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_STOP_TIME_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param time {@link Integer}
     */
    public static void testChimneyFanStopTimeReportLoopback(Integer time) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStopTimeReport(time);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStopTimeReport(testPayload);
        assertEquals(time, (Integer) response.get("TIME"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_MODE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     */
    public static void testChimneyFanModeSetLoopback(String mode) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanModeSet(mode);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanModeSet(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_MODE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     */
    public static void testChimneyFanModeReportLoopback(String mode) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanModeReport(mode);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanModeReport(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_SETUP_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     * @param boostTime {@link Integer}
     * @param stopTime {@link Integer}
     * @param minSpeed {@link Integer}
     * @param scale1 {@link Integer}
     * @param precision1 {@link Integer}
     * @param startTemperature {@link byte[]}
     * @param scale2 {@link Integer}
     * @param precision2 {@link Integer}
     * @param stopTemperature {@link byte[]}
     * @param scale3 {@link Integer}
     * @param precision3 {@link Integer}
     * @param alarmTemperatureValue {@link byte[]}
     */
    public static void testChimneyFanSetupSetLoopback(String mode, Integer boostTime, Integer stopTime, Integer minSpeed,
            Integer scale1, Integer precision1, byte[] startTemperature, Integer scale2, Integer precision2,
            byte[] stopTemperature, Integer scale3, Integer precision3, byte[] alarmTemperatureValue) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanSetupSet(mode, boostTime, stopTime, minSpeed, scale1,
                precision1, startTemperature, scale2, precision2, stopTemperature, scale3, precision3,
                alarmTemperatureValue);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanSetupSet(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
        assertEquals(boostTime, (Integer) response.get("BOOST_TIME"));
        assertEquals(stopTime, (Integer) response.get("STOP_TIME"));
        assertEquals(minSpeed, (Integer) response.get("MIN_SPEED"));
        assertEquals(scale1, (Integer) response.get("SCALE1"));
        assertEquals(precision1, (Integer) response.get("PRECISION1"));
        assertEquals(startTemperature, (byte[]) response.get("START_TEMPERATURE"));
        assertEquals(scale2, (Integer) response.get("SCALE2"));
        assertEquals(precision2, (Integer) response.get("PRECISION2"));
        assertEquals(stopTemperature, (byte[]) response.get("STOP_TEMPERATURE"));
        assertEquals(scale3, (Integer) response.get("SCALE3"));
        assertEquals(precision3, (Integer) response.get("PRECISION3"));
        assertEquals(alarmTemperatureValue, (byte[]) response.get("ALARM_TEMPERATURE_VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_SETUP_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param mode {@link String}
     * @param boostTime {@link Integer}
     * @param stopTime {@link Integer}
     * @param minSpeed {@link Integer}
     * @param scale1 {@link Integer}
     * @param precision1 {@link Integer}
     * @param startTemperature {@link byte[]}
     * @param scale2 {@link Integer}
     * @param precision2 {@link Integer}
     * @param stopTemperature {@link byte[]}
     * @param scale3 {@link Integer}
     * @param precision3 {@link Integer}
     * @param alarmTemperatureValue {@link byte[]}
     */
    public static void testChimneyFanSetupReportLoopback(String mode, Integer boostTime, Integer stopTime,
            Integer minSpeed, Integer scale1, Integer precision1, byte[] startTemperature, Integer scale2,
            Integer precision2, byte[] stopTemperature, Integer scale3, Integer precision3, byte[] alarmTemperatureValue) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanSetupReport(mode, boostTime, stopTime, minSpeed,
                scale1, precision1, startTemperature, scale2, precision2, stopTemperature, scale3, precision3,
                alarmTemperatureValue);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanSetupReport(testPayload);
        assertEquals(mode, (String) response.get("MODE"));
        assertEquals(boostTime, (Integer) response.get("BOOST_TIME"));
        assertEquals(stopTime, (Integer) response.get("STOP_TIME"));
        assertEquals(minSpeed, (Integer) response.get("MIN_SPEED"));
        assertEquals(scale1, (Integer) response.get("SCALE1"));
        assertEquals(precision1, (Integer) response.get("PRECISION1"));
        assertEquals(startTemperature, (byte[]) response.get("START_TEMPERATURE"));
        assertEquals(scale2, (Integer) response.get("SCALE2"));
        assertEquals(precision2, (Integer) response.get("PRECISION2"));
        assertEquals(stopTemperature, (byte[]) response.get("STOP_TEMPERATURE"));
        assertEquals(scale3, (Integer) response.get("SCALE3"));
        assertEquals(precision3, (Integer) response.get("PRECISION3"));
        assertEquals(alarmTemperatureValue, (byte[]) response.get("ALARM_TEMPERATURE_VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param state {@link String}
     * @param speed {@link Integer}
     * @param service {@link Boolean}
     * @param externalAlarm {@link Boolean}
     * @param sensorError {@link Boolean}
     * @param alarmTemperatureExceeded {@link Boolean}
     * @param speedChangeEnable {@link Boolean}
     * @param startTemperatureExceeded {@link Boolean}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testChimneyFanStatusReportLoopback(String state, Integer speed, Boolean service,
            Boolean externalAlarm, Boolean sensorError, Boolean alarmTemperatureExceeded, Boolean speedChangeEnable,
            Boolean startTemperatureExceeded, Integer scale, Integer precision, byte[] value) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanStatusReport(state, speed, service, externalAlarm,
                sensorError, alarmTemperatureExceeded, speedChangeEnable, startTemperatureExceeded, scale, precision,
                value);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanStatusReport(testPayload);
        assertEquals(state, (String) response.get("STATE"));
        assertEquals(speed, (Integer) response.get("SPEED"));
        assertEquals(service, (Boolean) response.get("SERVICE"));
        assertEquals(externalAlarm, (Boolean) response.get("EXTERNAL_ALARM"));
        assertEquals(sensorError, (Boolean) response.get("SENSOR_ERROR"));
        assertEquals(alarmTemperatureExceeded, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED"));
        assertEquals(speedChangeEnable, (Boolean) response.get("SPEED_CHANGE_ENABLE"));
        assertEquals(startTemperatureExceeded, (Boolean) response.get("START_TEMPERATURE_EXCEEDED"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_ALARM_LOG_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param message {@link String}
     */
    public static void testChimneyFanAlarmLogSetLoopback(String message) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanAlarmLogSet(message);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanAlarmLogSet(testPayload);
        assertEquals(message, (String) response.get("MESSAGE"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_ALARM_LOG_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param externalAlarm1 {@link Boolean}
     * @param sensorError1 {@link Boolean}
     * @param alarmTemperatureExceeded1 {@link Boolean}
     * @param alarmStillActive1 {@link Boolean}
     * @param externalAlarm2 {@link Boolean}
     * @param sensorError2 {@link Boolean}
     * @param alarmTemperatureExceeded2 {@link Boolean}
     * @param alarmStillActive2 {@link Boolean}
     * @param externalAlarm3 {@link Boolean}
     * @param sensorError3 {@link Boolean}
     * @param alarmTemperatureExceeded3 {@link Boolean}
     * @param alarmStillActive3 {@link Boolean}
     * @param externalAlarm4 {@link Boolean}
     * @param sensorError4 {@link Boolean}
     * @param alarmTemperatureExceeded4 {@link Boolean}
     * @param alarmStillActive4 {@link Boolean}
     * @param externalAlarm5 {@link Boolean}
     * @param sensorError5 {@link Boolean}
     * @param alarmTemperatureExceeded5 {@link Boolean}
     * @param alarmStillActive5 {@link Boolean}
     */
    public static void testChimneyFanAlarmLogReportLoopback(Boolean externalAlarm1, Boolean sensorError1,
            Boolean alarmTemperatureExceeded1, Boolean alarmStillActive1, Boolean externalAlarm2, Boolean sensorError2,
            Boolean alarmTemperatureExceeded2, Boolean alarmStillActive2, Boolean externalAlarm3, Boolean sensorError3,
            Boolean alarmTemperatureExceeded3, Boolean alarmStillActive3, Boolean externalAlarm4, Boolean sensorError4,
            Boolean alarmTemperatureExceeded4, Boolean alarmStillActive4, Boolean externalAlarm5, Boolean sensorError5,
            Boolean alarmTemperatureExceeded5, Boolean alarmStillActive5) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanAlarmLogReport(externalAlarm1, sensorError1,
                alarmTemperatureExceeded1, alarmStillActive1, externalAlarm2, sensorError2, alarmTemperatureExceeded2,
                alarmStillActive2, externalAlarm3, sensorError3, alarmTemperatureExceeded3, alarmStillActive3,
                externalAlarm4, sensorError4, alarmTemperatureExceeded4, alarmStillActive4, externalAlarm5, sensorError5,
                alarmTemperatureExceeded5, alarmStillActive5);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanAlarmLogReport(testPayload);
        assertEquals(externalAlarm1, (Boolean) response.get("EXTERNAL_ALARM1"));
        assertEquals(sensorError1, (Boolean) response.get("SENSOR_ERROR1"));
        assertEquals(alarmTemperatureExceeded1, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED1"));
        assertEquals(alarmStillActive1, (Boolean) response.get("ALARM_STILL_ACTIVE1"));
        assertEquals(externalAlarm2, (Boolean) response.get("EXTERNAL_ALARM2"));
        assertEquals(sensorError2, (Boolean) response.get("SENSOR_ERROR2"));
        assertEquals(alarmTemperatureExceeded2, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED2"));
        assertEquals(alarmStillActive2, (Boolean) response.get("ALARM_STILL_ACTIVE2"));
        assertEquals(externalAlarm3, (Boolean) response.get("EXTERNAL_ALARM3"));
        assertEquals(sensorError3, (Boolean) response.get("SENSOR_ERROR3"));
        assertEquals(alarmTemperatureExceeded3, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED3"));
        assertEquals(alarmStillActive3, (Boolean) response.get("ALARM_STILL_ACTIVE3"));
        assertEquals(externalAlarm4, (Boolean) response.get("EXTERNAL_ALARM4"));
        assertEquals(sensorError4, (Boolean) response.get("SENSOR_ERROR4"));
        assertEquals(alarmTemperatureExceeded4, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED4"));
        assertEquals(alarmStillActive4, (Boolean) response.get("ALARM_STILL_ACTIVE4"));
        assertEquals(externalAlarm5, (Boolean) response.get("EXTERNAL_ALARM5"));
        assertEquals(sensorError5, (Boolean) response.get("SENSOR_ERROR5"));
        assertEquals(alarmTemperatureExceeded5, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED5"));
        assertEquals(alarmStillActive5, (Boolean) response.get("ALARM_STILL_ACTIVE5"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_ALARM_STATUS_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param acknowledgeExternalAlarm {@link Boolean}
     * @param acknowledgeSensorError {@link Boolean}
     * @param acknowledgeAlarmTemperatureExceeded {@link Boolean}
     */
    public static void testChimneyFanAlarmStatusSetLoopback(Boolean acknowledgeExternalAlarm,
            Boolean acknowledgeSensorError, Boolean acknowledgeAlarmTemperatureExceeded) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanAlarmStatusSet(acknowledgeExternalAlarm,
                acknowledgeSensorError, acknowledgeAlarmTemperatureExceeded);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanAlarmStatusSet(testPayload);
        assertEquals(acknowledgeExternalAlarm, (Boolean) response.get("ACKNOWLEDGE_EXTERNAL_ALARM"));
        assertEquals(acknowledgeSensorError, (Boolean) response.get("ACKNOWLEDGE_SENSOR_ERROR"));
        assertEquals(acknowledgeAlarmTemperatureExceeded, (Boolean) response.get("ACKNOWLEDGE_ALARM_TEMPERATURE_EXCEEDED"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_ALARM_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param service {@link Boolean}
     * @param externalAlarm {@link Boolean}
     * @param sensorError {@link Boolean}
     * @param alarmTemperatureExceeded {@link Boolean}
     * @param speedChangeEnable {@link Boolean}
     * @param startTemperatureExceeded {@link Boolean}
     */
    public static void testChimneyFanAlarmStatusReportLoopback(Boolean service, Boolean externalAlarm,
            Boolean sensorError, Boolean alarmTemperatureExceeded, Boolean speedChangeEnable,
            Boolean startTemperatureExceeded) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanAlarmStatusReport(service, externalAlarm, sensorError,
                alarmTemperatureExceeded, speedChangeEnable, startTemperatureExceeded);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanAlarmStatusReport(testPayload);
        assertEquals(service, (Boolean) response.get("SERVICE"));
        assertEquals(externalAlarm, (Boolean) response.get("EXTERNAL_ALARM"));
        assertEquals(sensorError, (Boolean) response.get("SENSOR_ERROR"));
        assertEquals(alarmTemperatureExceeded, (Boolean) response.get("ALARM_TEMPERATURE_EXCEEDED"));
        assertEquals(speedChangeEnable, (Boolean) response.get("SPEED_CHANGE_ENABLE"));
        assertEquals(startTemperatureExceeded, (Boolean) response.get("START_TEMPERATURE_EXCEEDED"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_MIN_SPEED_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param minSpeed {@link Integer}
     */
    public static void testChimneyFanMinSpeedSetLoopback(Integer minSpeed) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanMinSpeedSet(minSpeed);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanMinSpeedSet(testPayload);
        assertEquals(minSpeed, (Integer) response.get("MIN_SPEED"));
    }

    /**
     * Performs an in/out test of the CHIMNEY_FAN_MIN_SPEED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param minSpeed {@link Integer}
     */
    public static void testChimneyFanMinSpeedReportLoopback(Integer minSpeed) {
        byte[] testPayload = CommandClassChimneyFanV1.getChimneyFanMinSpeedReport(minSpeed);

        Map<String, Object> response = CommandClassChimneyFanV1.handleChimneyFanMinSpeedReport(testPayload);
        assertEquals(minSpeed, (Integer) response.get("MIN_SPEED"));
    }

}
