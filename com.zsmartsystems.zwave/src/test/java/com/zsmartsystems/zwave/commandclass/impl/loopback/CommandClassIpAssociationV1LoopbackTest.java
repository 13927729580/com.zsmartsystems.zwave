/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassIpAssociationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_IP_ASSOCIATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIpAssociationV1LoopbackTest {
    /**
     * Performs an in/out test of the IP_ASSOCIATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param ipv6Address {@link byte[]}
     * @param endPoint {@link Integer}
     */
    public static void testIpAssociationSetLoopback(Integer groupingIdentifier, byte[] ipv6Address, Integer endPoint) {
        byte[] testPayload = CommandClassIpAssociationV1.getIpAssociationSet(groupingIdentifier, ipv6Address, endPoint);

        Map<String, Object> response = CommandClassIpAssociationV1.handleIpAssociationSet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(ipv6Address, (byte[]) response.get("IPV6_ADDRESS"));
        assertEquals(endPoint, (Integer) response.get("END_POINT"));
    }

    /**
     * Performs an in/out test of the IP_ASSOCIATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param index {@link Integer}
     */
    public static void testIpAssociationGetLoopback(Integer groupingIdentifier, Integer index) {
        byte[] testPayload = CommandClassIpAssociationV1.getIpAssociationGet(groupingIdentifier, index);

        Map<String, Object> response = CommandClassIpAssociationV1.handleIpAssociationGet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(index, (Integer) response.get("INDEX"));
    }

    /**
     * Performs an in/out test of the IP_ASSOCIATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param index {@link Integer}
     * @param actualNodes {@link Integer}
     * @param ipv6Address {@link byte[]}
     * @param endPoint {@link Integer}
     */
    public static void testIpAssociationReportLoopback(Integer groupingIdentifier, Integer index, Integer actualNodes,
            byte[] ipv6Address, Integer endPoint) {
        byte[] testPayload = CommandClassIpAssociationV1.getIpAssociationReport(groupingIdentifier, index, actualNodes,
                ipv6Address, endPoint);

        Map<String, Object> response = CommandClassIpAssociationV1.handleIpAssociationReport(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(index, (Integer) response.get("INDEX"));
        assertEquals(actualNodes, (Integer) response.get("ACTUAL_NODES"));
        assertEquals(ipv6Address, (byte[]) response.get("IPV6_ADDRESS"));
        assertEquals(endPoint, (Integer) response.get("END_POINT"));
    }

    /**
     * Performs an in/out test of the IP_ASSOCIATION_REMOVE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param ipv6Address {@link byte[]}
     * @param endPoint {@link Integer}
     */
    public static void testIpAssociationRemoveLoopback(Integer groupingIdentifier, byte[] ipv6Address, Integer endPoint) {
        byte[] testPayload = CommandClassIpAssociationV1.getIpAssociationRemove(groupingIdentifier, ipv6Address,
                endPoint);

        Map<String, Object> response = CommandClassIpAssociationV1.handleIpAssociationRemove(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(ipv6Address, (byte[]) response.get("IPV6_ADDRESS"));
        assertEquals(endPoint, (Integer) response.get("END_POINT"));
    }

}
