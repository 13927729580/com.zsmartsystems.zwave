/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassClimateControlScheduleV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassClimateControlScheduleV1LoopbackTest {
    /**
     * Performs an in/out test of the SCHEDULE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param weekday {@link Integer}
     */
    public static void testScheduleSetLoopback(Integer weekday) {
        byte[] testPayload = CommandClassClimateControlScheduleV1.getScheduleSet(weekday);

        Map<String, Object> response = CommandClassClimateControlScheduleV1.handleScheduleSet(testPayload);
        assertEquals(weekday, (Integer) response.get("WEEKDAY"));
    }

    /**
     * Performs an in/out test of the SCHEDULE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param weekday {@link Integer}
     */
    public static void testScheduleGetLoopback(Integer weekday) {
        byte[] testPayload = CommandClassClimateControlScheduleV1.getScheduleGet(weekday);

        Map<String, Object> response = CommandClassClimateControlScheduleV1.handleScheduleGet(testPayload);
        assertEquals(weekday, (Integer) response.get("WEEKDAY"));
    }

    /**
     * Performs an in/out test of the SCHEDULE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param weekday {@link Integer}
     */
    public static void testScheduleReportLoopback(Integer weekday) {
        byte[] testPayload = CommandClassClimateControlScheduleV1.getScheduleReport(weekday);

        Map<String, Object> response = CommandClassClimateControlScheduleV1.handleScheduleReport(testPayload);
        assertEquals(weekday, (Integer) response.get("WEEKDAY"));
    }

    /**
     * Performs an in/out test of the SCHEDULE_CHANGED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param changecounter {@link Integer}
     */
    public static void testScheduleChangedReportLoopback(Integer changecounter) {
        byte[] testPayload = CommandClassClimateControlScheduleV1.getScheduleChangedReport(changecounter);

        Map<String, Object> response = CommandClassClimateControlScheduleV1.handleScheduleChangedReport(testPayload);
        assertEquals(changecounter, (Integer) response.get("CHANGECOUNTER"));
    }

    /**
     * Performs an in/out test of the SCHEDULE_OVERRIDE_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param overrideType {@link Integer}
     * @param overrideState {@link String}
     */
    public static void testScheduleOverrideSetLoopback(Integer overrideType, String overrideState) {
        byte[] testPayload = CommandClassClimateControlScheduleV1.getScheduleOverrideSet(overrideType, overrideState);

        Map<String, Object> response = CommandClassClimateControlScheduleV1.handleScheduleOverrideSet(testPayload);
        assertEquals(overrideType, (Integer) response.get("OVERRIDE_TYPE"));
        assertEquals(overrideState, (String) response.get("OVERRIDE_STATE"));
    }

    /**
     * Performs an in/out test of the SCHEDULE_OVERRIDE_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param overrideType {@link Integer}
     * @param overrideState {@link String}
     */
    public static void testScheduleOverrideReportLoopback(Integer overrideType, String overrideState) {
        byte[] testPayload = CommandClassClimateControlScheduleV1.getScheduleOverrideReport(overrideType, overrideState);

        Map<String, Object> response = CommandClassClimateControlScheduleV1.handleScheduleOverrideReport(testPayload);
        assertEquals(overrideType, (Integer) response.get("OVERRIDE_TYPE"));
        assertEquals(overrideState, (String) response.get("OVERRIDE_STATE"));
    }

}
