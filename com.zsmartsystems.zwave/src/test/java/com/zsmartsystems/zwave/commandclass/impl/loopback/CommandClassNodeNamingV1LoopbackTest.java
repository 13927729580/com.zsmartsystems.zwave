/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassNodeNamingV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_NODE_NAMING</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNodeNamingV1LoopbackTest {
    /**
     * Performs an in/out test of the NODE_NAMING_NODE_NAME_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param charPresentation {@link Integer}
     * @param nodeNameChar {@link byte[]}
     */
    public static void testNodeNamingNodeNameSetLoopback(Integer charPresentation, byte[] nodeNameChar) {
        byte[] testPayload = CommandClassNodeNamingV1.getNodeNamingNodeNameSet(charPresentation, nodeNameChar);

        Map<String, Object> response = CommandClassNodeNamingV1.handleNodeNamingNodeNameSet(testPayload);
        assertEquals(charPresentation, (Integer) response.get("CHAR_PRESENTATION"));
        assertEquals(nodeNameChar, (byte[]) response.get("NODE_NAME_CHAR"));
    }

    /**
     * Performs an in/out test of the NODE_NAMING_NODE_NAME_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param charPresentation {@link Integer}
     * @param nodeNameChar {@link byte[]}
     */
    public static void testNodeNamingNodeNameReportLoopback(Integer charPresentation, byte[] nodeNameChar) {
        byte[] testPayload = CommandClassNodeNamingV1.getNodeNamingNodeNameReport(charPresentation, nodeNameChar);

        Map<String, Object> response = CommandClassNodeNamingV1.handleNodeNamingNodeNameReport(testPayload);
        assertEquals(charPresentation, (Integer) response.get("CHAR_PRESENTATION"));
        assertEquals(nodeNameChar, (byte[]) response.get("NODE_NAME_CHAR"));
    }

    /**
     * Performs an in/out test of the NODE_NAMING_NODE_LOCATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param charPresentation {@link Integer}
     * @param nodeLocationChar {@link byte[]}
     */
    public static void testNodeNamingNodeLocationSetLoopback(Integer charPresentation, byte[] nodeLocationChar) {
        byte[] testPayload = CommandClassNodeNamingV1.getNodeNamingNodeLocationSet(charPresentation, nodeLocationChar);

        Map<String, Object> response = CommandClassNodeNamingV1.handleNodeNamingNodeLocationSet(testPayload);
        assertEquals(charPresentation, (Integer) response.get("CHAR_PRESENTATION"));
        assertEquals(nodeLocationChar, (byte[]) response.get("NODE_LOCATION_CHAR"));
    }

    /**
     * Performs an in/out test of the NODE_NAMING_NODE_LOCATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param charPresentation {@link Integer}
     * @param nodeLocationChar {@link byte[]}
     */
    public static void testNodeNamingNodeLocationReportLoopback(Integer charPresentation, byte[] nodeLocationChar) {
        byte[] testPayload = CommandClassNodeNamingV1.getNodeNamingNodeLocationReport(charPresentation, nodeLocationChar);

        Map<String, Object> response = CommandClassNodeNamingV1.handleNodeNamingNodeLocationReport(testPayload);
        assertEquals(charPresentation, (Integer) response.get("CHAR_PRESENTATION"));
        assertEquals(nodeLocationChar, (byte[]) response.get("NODE_LOCATION_CHAR"));
    }

}
