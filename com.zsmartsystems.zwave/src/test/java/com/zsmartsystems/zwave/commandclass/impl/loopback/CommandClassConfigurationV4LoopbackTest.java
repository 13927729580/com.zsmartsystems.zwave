/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassConfigurationV4;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_CONFIGURATION</b> version <b>4</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassConfigurationV4LoopbackTest {
    /**
     * Performs an in/out test of the CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param defaultValue {@link Boolean}
     * @param configurationValue {@link byte[]}
     */
    public static void testConfigurationSetLoopback(Integer parameterNumber, Boolean defaultValue,
            byte[] configurationValue) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationSet(parameterNumber, defaultValue,
                configurationValue);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationSet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(defaultValue, (Boolean) response.get("DEFAULT_VALUE"));
        assertEquals(configurationValue, (byte[]) response.get("CONFIGURATION_VALUE"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     */
    public static void testConfigurationGetLoopback(Integer parameterNumber) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationGet(parameterNumber);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationGet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param configurationValue {@link byte[]}
     */
    public static void testConfigurationReportLoopback(Integer parameterNumber, byte[] configurationValue) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationReport(parameterNumber, configurationValue);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationReport(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(configurationValue, (byte[]) response.get("CONFIGURATION_VALUE"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_BULK_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterOffset {@link Integer}
     * @param numberOfParameters {@link Integer}
     * @param size {@link Integer}
     * @param handshake {@link Boolean}
     * @param defaultValue {@link Boolean}
     */
    public static void testConfigurationBulkSetLoopback(Integer parameterOffset, Integer numberOfParameters,
            Integer size, Boolean handshake, Boolean defaultValue) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationBulkSet(parameterOffset, numberOfParameters,
                size, handshake, defaultValue);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationBulkSet(testPayload);
        assertEquals(parameterOffset, (Integer) response.get("PARAMETER_OFFSET"));
        assertEquals(numberOfParameters, (Integer) response.get("NUMBER_OF_PARAMETERS"));
        assertEquals(size, (Integer) response.get("SIZE"));
        assertEquals(handshake, (Boolean) response.get("HANDSHAKE"));
        assertEquals(defaultValue, (Boolean) response.get("DEFAULT_VALUE"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_BULK_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterOffset {@link Integer}
     * @param numberOfParameters {@link Integer}
     */
    public static void testConfigurationBulkGetLoopback(Integer parameterOffset, Integer numberOfParameters) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationBulkGet(parameterOffset, numberOfParameters);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationBulkGet(testPayload);
        assertEquals(parameterOffset, (Integer) response.get("PARAMETER_OFFSET"));
        assertEquals(numberOfParameters, (Integer) response.get("NUMBER_OF_PARAMETERS"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_BULK_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterOffset {@link Integer}
     * @param numberOfParameters {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param size {@link Integer}
     * @param handshake {@link Boolean}
     * @param defaultValue {@link Boolean}
     */
    public static void testConfigurationBulkReportLoopback(Integer parameterOffset, Integer numberOfParameters,
            Integer reportsToFollow, Integer size, Boolean handshake, Boolean defaultValue) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationBulkReport(parameterOffset, numberOfParameters,
                reportsToFollow, size, handshake, defaultValue);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationBulkReport(testPayload);
        assertEquals(parameterOffset, (Integer) response.get("PARAMETER_OFFSET"));
        assertEquals(numberOfParameters, (Integer) response.get("NUMBER_OF_PARAMETERS"));
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(size, (Integer) response.get("SIZE"));
        assertEquals(handshake, (Boolean) response.get("HANDSHAKE"));
        assertEquals(defaultValue, (Boolean) response.get("DEFAULT_VALUE"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_NAME_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     */
    public static void testConfigurationNameGetLoopback(Integer parameterNumber) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationNameGet(parameterNumber);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationNameGet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_NAME_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param name {@link byte[]}
     */
    public static void testConfigurationNameReportLoopback(Integer parameterNumber, Integer reportsToFollow, byte[] name) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationNameReport(parameterNumber, reportsToFollow,
                name);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationNameReport(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(name, (byte[]) response.get("NAME"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_INFO_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     */
    public static void testConfigurationInfoGetLoopback(Integer parameterNumber) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationInfoGet(parameterNumber);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationInfoGet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_INFO_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param info {@link byte[]}
     */
    public static void testConfigurationInfoReportLoopback(Integer parameterNumber, Integer reportsToFollow, byte[] info) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationInfoReport(parameterNumber, reportsToFollow,
                info);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationInfoReport(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(info, (byte[]) response.get("INFO"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_PROPERTIES_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     */
    public static void testConfigurationPropertiesGetLoopback(Integer parameterNumber) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationPropertiesGet(parameterNumber);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationPropertiesGet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_PROPERTIES_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param format {@link String}
     * @param readonly {@link Boolean}
     * @param reInclusionRequired {@link Boolean}
     * @param minValue {@link byte[]}
     * @param maxValue {@link byte[]}
     * @param defaultValue {@link byte[]}
     * @param nextParameterNumber {@link Integer}
     * @param advanced {@link Boolean}
     * @param noBulkSupport {@link Boolean}
     */
    public static void testConfigurationPropertiesReportLoopback(Integer parameterNumber, String format,
            Boolean readonly, Boolean reInclusionRequired, byte[] minValue, byte[] maxValue, byte[] defaultValue,
            Integer nextParameterNumber, Boolean advanced, Boolean noBulkSupport) {
        byte[] testPayload = CommandClassConfigurationV4.getConfigurationPropertiesReport(parameterNumber, format,
                readonly, reInclusionRequired, minValue, maxValue, defaultValue, nextParameterNumber, advanced,
                noBulkSupport);

        Map<String, Object> response = CommandClassConfigurationV4.handleConfigurationPropertiesReport(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(format, (String) response.get("FORMAT"));
        assertEquals(readonly, (Boolean) response.get("READONLY"));
        assertEquals(reInclusionRequired, (Boolean) response.get("RE_INCLUSION_REQUIRED"));
        assertEquals(minValue, (byte[]) response.get("MIN_VALUE"));
        assertEquals(maxValue, (byte[]) response.get("MAX_VALUE"));
        assertEquals(defaultValue, (byte[]) response.get("DEFAULT_VALUE"));
        assertEquals(nextParameterNumber, (Integer) response.get("NEXT_PARAMETER_NUMBER"));
        assertEquals(advanced, (Boolean) response.get("ADVANCED"));
        assertEquals(noBulkSupport, (Boolean) response.get("NO_BULK_SUPPORT"));
    }

}
