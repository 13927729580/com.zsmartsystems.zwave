/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassZipV3;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ZIP</b> version <b>3</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassZipV3LoopbackTest {
    /**
     * Performs an in/out test of the COMMAND_ZIP_PACKET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param nackOptionError {@link Boolean}
     * @param nackQueueFull {@link Boolean}
     * @param nackWaiting {@link Boolean}
     * @param nackResponse {@link Boolean}
     * @param ackResponse {@link Boolean}
     * @param ackRequest {@link Boolean}
     * @param secureOrigin {@link Boolean}
     * @param moreInformation {@link Boolean}
     * @param zWaveCmdIncluded {@link Boolean}
     * @param headerExtIncluded {@link Boolean}
     * @param seqNo {@link Integer}
     * @param sourceEndPoint {@link Integer}
     * @param destinationEndPoint {@link Integer}
     * @param bitAddress {@link Boolean}
     * @param headerLength {@link Integer}
     * @param headerExtension {@link byte[]}
     * @param zWaveCommand {@link byte[]}
     */
    public static void testCommandZipPacketLoopback(Boolean nackOptionError, Boolean nackQueueFull, Boolean nackWaiting,
            Boolean nackResponse, Boolean ackResponse, Boolean ackRequest, Boolean secureOrigin, Boolean moreInformation,
            Boolean zWaveCmdIncluded, Boolean headerExtIncluded, Integer seqNo, Integer sourceEndPoint,
            Integer destinationEndPoint, Boolean bitAddress, Integer headerLength, byte[] headerExtension,
            byte[] zWaveCommand) {
        byte[] testPayload = CommandClassZipV3.getCommandZipPacket(nackOptionError, nackQueueFull, nackWaiting,
                nackResponse, ackResponse, ackRequest, secureOrigin, moreInformation, zWaveCmdIncluded,
                headerExtIncluded, seqNo, sourceEndPoint, destinationEndPoint, bitAddress, headerLength, headerExtension,
                zWaveCommand);

        Map<String, Object> response = CommandClassZipV3.handleCommandZipPacket(testPayload);
        assertEquals(nackOptionError, (Boolean) response.get("NACK_OPTION_ERROR"));
        assertEquals(nackQueueFull, (Boolean) response.get("NACK_QUEUE_FULL"));
        assertEquals(nackWaiting, (Boolean) response.get("NACK_WAITING"));
        assertEquals(nackResponse, (Boolean) response.get("NACK_RESPONSE"));
        assertEquals(ackResponse, (Boolean) response.get("ACK_RESPONSE"));
        assertEquals(ackRequest, (Boolean) response.get("ACK_REQUEST"));
        assertEquals(secureOrigin, (Boolean) response.get("SECURE_ORIGIN"));
        assertEquals(moreInformation, (Boolean) response.get("MORE_INFORMATION"));
        assertEquals(zWaveCmdIncluded, (Boolean) response.get("Z_WAVE_CMD_INCLUDED"));
        assertEquals(headerExtIncluded, (Boolean) response.get("HEADER_EXT_INCLUDED"));
        assertEquals(seqNo, (Integer) response.get("SEQ_NO"));
        assertEquals(sourceEndPoint, (Integer) response.get("SOURCE_END_POINT"));
        assertEquals(destinationEndPoint, (Integer) response.get("DESTINATION_END_POINT"));
        assertEquals(bitAddress, (Boolean) response.get("BIT_ADDRESS"));
        assertEquals(headerLength, (Integer) response.get("HEADER_LENGTH"));
        assertEquals(headerExtension, (byte[]) response.get("HEADER_EXTENSION"));
        assertEquals(zWaveCommand, (byte[]) response.get("Z_WAVE_COMMAND"));
    }

}
