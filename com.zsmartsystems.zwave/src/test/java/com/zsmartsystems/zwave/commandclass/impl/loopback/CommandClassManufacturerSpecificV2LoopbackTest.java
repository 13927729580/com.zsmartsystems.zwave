/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassManufacturerSpecificV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_MANUFACTURER_SPECIFIC</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassManufacturerSpecificV2LoopbackTest {
    /**
     * Performs an in/out test of the MANUFACTURER_SPECIFIC_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param productTypeId {@link Integer}
     * @param productId {@link Integer}
     */
    public static void testManufacturerSpecificReportLoopback(Integer manufacturerId, Integer productTypeId,
            Integer productId) {
        byte[] testPayload = CommandClassManufacturerSpecificV2.getManufacturerSpecificReport(manufacturerId,
                productTypeId, productId);

        Map<String, Object> response = CommandClassManufacturerSpecificV2.handleManufacturerSpecificReport(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(productTypeId, (Integer) response.get("PRODUCT_TYPE_ID"));
        assertEquals(productId, (Integer) response.get("PRODUCT_ID"));
    }

    /**
     * Performs an in/out test of the DEVICE_SPECIFIC_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param deviceIdType {@link String}
     */
    public static void testDeviceSpecificGetLoopback(String deviceIdType) {
        byte[] testPayload = CommandClassManufacturerSpecificV2.getDeviceSpecificGet(deviceIdType);

        Map<String, Object> response = CommandClassManufacturerSpecificV2.handleDeviceSpecificGet(testPayload);
        assertEquals(deviceIdType, (String) response.get("DEVICE_ID_TYPE"));
    }

    /**
     * Performs an in/out test of the DEVICE_SPECIFIC_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param deviceIdType {@link String}
     * @param deviceIdDataFormat {@link String}
     * @param deviceIdData {@link byte[]}
     */
    public static void testDeviceSpecificReportLoopback(String deviceIdType, String deviceIdDataFormat,
            byte[] deviceIdData) {
        byte[] testPayload = CommandClassManufacturerSpecificV2.getDeviceSpecificReport(deviceIdType, deviceIdDataFormat,
                deviceIdData);

        Map<String, Object> response = CommandClassManufacturerSpecificV2.handleDeviceSpecificReport(testPayload);
        assertEquals(deviceIdType, (String) response.get("DEVICE_ID_TYPE"));
        assertEquals(deviceIdDataFormat, (String) response.get("DEVICE_ID_DATA_FORMAT"));
        assertEquals(deviceIdData, (byte[]) response.get("DEVICE_ID_DATA"));
    }

}
