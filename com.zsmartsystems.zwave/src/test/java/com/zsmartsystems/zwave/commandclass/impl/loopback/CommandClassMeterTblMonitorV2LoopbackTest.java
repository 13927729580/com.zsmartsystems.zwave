/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassMeterTblMonitorV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_METER_TBL_MONITOR</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassMeterTblMonitorV2LoopbackTest {
    /**
     * Performs an in/out test of the METER_TBL_TABLE_POINT_ADM_NO_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param meterPointAdmNumberCharacter {@link byte[]}
     */
    public static void testMeterTblTablePointAdmNoReportLoopback(byte[] meterPointAdmNumberCharacter) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblTablePointAdmNoReport(meterPointAdmNumberCharacter);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblTablePointAdmNoReport(testPayload);
        assertEquals(meterPointAdmNumberCharacter, (byte[]) response.get("METER_POINT_ADM_NUMBER_CHARACTER"));
    }

    /**
     * Performs an in/out test of the METER_TBL_TABLE_ID_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param meterIdCharacter {@link byte[]}
     */
    public static void testMeterTblTableIdReportLoopback(byte[] meterIdCharacter) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblTableIdReport(meterIdCharacter);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblTableIdReport(testPayload);
        assertEquals(meterIdCharacter, (byte[]) response.get("METER_ID_CHARACTER"));
    }

    /**
     * Performs an in/out test of the METER_TBL_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param meterType {@link Integer}
     * @param rateType {@link Integer}
     * @param payMeter {@link String}
     */
    public static void testMeterTblReportLoopback(Integer meterType, Integer rateType, String payMeter) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblReport(meterType, rateType, payMeter);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblReport(testPayload);
        assertEquals(meterType, (Integer) response.get("METER_TYPE"));
        assertEquals(rateType, (Integer) response.get("RATE_TYPE"));
        assertEquals(payMeter, (String) response.get("PAY_METER"));
    }

    /**
     * Performs an in/out test of the METER_TBL_STATUS_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param statusEventLogDepth {@link Integer}
     */
    public static void testMeterTblStatusSupportedReportLoopback(Integer statusEventLogDepth) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblStatusSupportedReport(statusEventLogDepth);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblStatusSupportedReport(testPayload);
        assertEquals(statusEventLogDepth, (Integer) response.get("STATUS_EVENT_LOG_DEPTH"));
    }

    /**
     * Performs an in/out test of the METER_TBL_STATUS_DEPTH_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param statusEventLogDepth {@link Integer}
     */
    public static void testMeterTblStatusDepthGetLoopback(Integer statusEventLogDepth) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblStatusDepthGet(statusEventLogDepth);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblStatusDepthGet(testPayload);
        assertEquals(statusEventLogDepth, (Integer) response.get("STATUS_EVENT_LOG_DEPTH"));
    }

    /**
     * Performs an in/out test of the METER_TBL_STATUS_DATE_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param maximumReports {@link Integer}
     * @param startYear {@link Integer}
     * @param startMonth {@link Integer}
     * @param startDay {@link Integer}
     * @param startHourLocalTime {@link Integer}
     * @param startMinuteLocalTime {@link Integer}
     * @param startSecondLocalTime {@link Integer}
     * @param stopYear {@link Integer}
     * @param stopMonth {@link Integer}
     * @param stopDay {@link Integer}
     * @param stopHourLocalTime {@link Integer}
     * @param stopMinuteLocalTime {@link Integer}
     * @param stopSecondLocalTime {@link Integer}
     */
    public static void testMeterTblStatusDateGetLoopback(Integer maximumReports, Integer startYear, Integer startMonth,
            Integer startDay, Integer startHourLocalTime, Integer startMinuteLocalTime, Integer startSecondLocalTime,
            Integer stopYear, Integer stopMonth, Integer stopDay, Integer stopHourLocalTime, Integer stopMinuteLocalTime,
            Integer stopSecondLocalTime) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblStatusDateGet(maximumReports, startYear,
                startMonth, startDay, startHourLocalTime, startMinuteLocalTime, startSecondLocalTime, stopYear,
                stopMonth, stopDay, stopHourLocalTime, stopMinuteLocalTime, stopSecondLocalTime);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblStatusDateGet(testPayload);
        assertEquals(maximumReports, (Integer) response.get("MAXIMUM_REPORTS"));
        assertEquals(startYear, (Integer) response.get("START_YEAR"));
        assertEquals(startMonth, (Integer) response.get("START_MONTH"));
        assertEquals(startDay, (Integer) response.get("START_DAY"));
        assertEquals(startHourLocalTime, (Integer) response.get("START_HOUR_LOCAL_TIME"));
        assertEquals(startMinuteLocalTime, (Integer) response.get("START_MINUTE_LOCAL_TIME"));
        assertEquals(startSecondLocalTime, (Integer) response.get("START_SECOND_LOCAL_TIME"));
        assertEquals(stopYear, (Integer) response.get("STOP_YEAR"));
        assertEquals(stopMonth, (Integer) response.get("STOP_MONTH"));
        assertEquals(stopDay, (Integer) response.get("STOP_DAY"));
        assertEquals(stopHourLocalTime, (Integer) response.get("STOP_HOUR_LOCAL_TIME"));
        assertEquals(stopMinuteLocalTime, (Integer) response.get("STOP_MINUTE_LOCAL_TIME"));
        assertEquals(stopSecondLocalTime, (Integer) response.get("STOP_SECOND_LOCAL_TIME"));
    }

    /**
     * Performs an in/out test of the METER_TBL_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param reportsToFollow {@link Integer}
     */
    public static void testMeterTblStatusReportLoopback(Integer reportsToFollow) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblStatusReport(reportsToFollow);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblStatusReport(testPayload);
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
    }

    /**
     * Performs an in/out test of the METER_TBL_CURRENT_DATA_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param reportsToFollow {@link Integer}
     * @param rateType {@link Integer}
     * @param operatingStatusIndication {@link Boolean}
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     */
    public static void testMeterTblCurrentDataReportLoopback(Integer reportsToFollow, Integer rateType,
            Boolean operatingStatusIndication, Integer year, Integer month, Integer day, Integer hourLocalTime,
            Integer minuteLocalTime, Integer secondLocalTime) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblCurrentDataReport(reportsToFollow, rateType,
                operatingStatusIndication, year, month, day, hourLocalTime, minuteLocalTime, secondLocalTime);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblCurrentDataReport(testPayload);
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(rateType, (Integer) response.get("RATE_TYPE"));
        assertEquals(operatingStatusIndication, (Boolean) response.get("OPERATING_STATUS_INDICATION"));
        assertEquals(year, (Integer) response.get("YEAR"));
        assertEquals(month, (Integer) response.get("MONTH"));
        assertEquals(day, (Integer) response.get("DAY"));
        assertEquals(hourLocalTime, (Integer) response.get("HOUR_LOCAL_TIME"));
        assertEquals(minuteLocalTime, (Integer) response.get("MINUTE_LOCAL_TIME"));
        assertEquals(secondLocalTime, (Integer) response.get("SECOND_LOCAL_TIME"));
    }

    /**
     * Performs an in/out test of the METER_TBL_HISTORICAL_DATA_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param maximumReports {@link Integer}
     * @param startYear {@link Integer}
     * @param startMonth {@link Integer}
     * @param startDay {@link Integer}
     * @param startHourLocalTime {@link Integer}
     * @param startMinuteLocalTime {@link Integer}
     * @param startSecondLocalTime {@link Integer}
     * @param stopYear {@link Integer}
     * @param stopMonth {@link Integer}
     * @param stopDay {@link Integer}
     * @param stopHourLocalTime {@link Integer}
     * @param stopMinuteLocalTime {@link Integer}
     * @param stopSecondLocalTime {@link Integer}
     */
    public static void testMeterTblHistoricalDataGetLoopback(Integer maximumReports, Integer startYear,
            Integer startMonth, Integer startDay, Integer startHourLocalTime, Integer startMinuteLocalTime,
            Integer startSecondLocalTime, Integer stopYear, Integer stopMonth, Integer stopDay,
            Integer stopHourLocalTime, Integer stopMinuteLocalTime, Integer stopSecondLocalTime) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblHistoricalDataGet(maximumReports, startYear,
                startMonth, startDay, startHourLocalTime, startMinuteLocalTime, startSecondLocalTime, stopYear,
                stopMonth, stopDay, stopHourLocalTime, stopMinuteLocalTime, stopSecondLocalTime);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblHistoricalDataGet(testPayload);
        assertEquals(maximumReports, (Integer) response.get("MAXIMUM_REPORTS"));
        assertEquals(startYear, (Integer) response.get("START_YEAR"));
        assertEquals(startMonth, (Integer) response.get("START_MONTH"));
        assertEquals(startDay, (Integer) response.get("START_DAY"));
        assertEquals(startHourLocalTime, (Integer) response.get("START_HOUR_LOCAL_TIME"));
        assertEquals(startMinuteLocalTime, (Integer) response.get("START_MINUTE_LOCAL_TIME"));
        assertEquals(startSecondLocalTime, (Integer) response.get("START_SECOND_LOCAL_TIME"));
        assertEquals(stopYear, (Integer) response.get("STOP_YEAR"));
        assertEquals(stopMonth, (Integer) response.get("STOP_MONTH"));
        assertEquals(stopDay, (Integer) response.get("STOP_DAY"));
        assertEquals(stopHourLocalTime, (Integer) response.get("STOP_HOUR_LOCAL_TIME"));
        assertEquals(stopMinuteLocalTime, (Integer) response.get("STOP_MINUTE_LOCAL_TIME"));
        assertEquals(stopSecondLocalTime, (Integer) response.get("STOP_SECOND_LOCAL_TIME"));
    }

    /**
     * Performs an in/out test of the METER_TBL_HISTORICAL_DATA_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param reportsToFollow {@link Integer}
     * @param rateType {@link Integer}
     * @param operatingStatusIndication {@link Boolean}
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     */
    public static void testMeterTblHistoricalDataReportLoopback(Integer reportsToFollow, Integer rateType,
            Boolean operatingStatusIndication, Integer year, Integer month, Integer day, Integer hourLocalTime,
            Integer minuteLocalTime, Integer secondLocalTime) {
        byte[] testPayload = CommandClassMeterTblMonitorV2.getMeterTblHistoricalDataReport(reportsToFollow, rateType,
                operatingStatusIndication, year, month, day, hourLocalTime, minuteLocalTime, secondLocalTime);

        Map<String, Object> response = CommandClassMeterTblMonitorV2.handleMeterTblHistoricalDataReport(testPayload);
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(rateType, (Integer) response.get("RATE_TYPE"));
        assertEquals(operatingStatusIndication, (Boolean) response.get("OPERATING_STATUS_INDICATION"));
        assertEquals(year, (Integer) response.get("YEAR"));
        assertEquals(month, (Integer) response.get("MONTH"));
        assertEquals(day, (Integer) response.get("DAY"));
        assertEquals(hourLocalTime, (Integer) response.get("HOUR_LOCAL_TIME"));
        assertEquals(minuteLocalTime, (Integer) response.get("MINUTE_LOCAL_TIME"));
        assertEquals(secondLocalTime, (Integer) response.get("SECOND_LOCAL_TIME"));
    }

}
