/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassAssociationV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ASSOCIATION</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassAssociationV2LoopbackTest {
    /**
     * Performs an in/out test of the ASSOCIATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param nodeId {@link byte[]}
     */
    public static void testAssociationSetLoopback(Integer groupingIdentifier, byte[] nodeId) {
        byte[] testPayload = CommandClassAssociationV2.getAssociationSet(groupingIdentifier, nodeId);

        Map<String, Object> response = CommandClassAssociationV2.handleAssociationSet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(nodeId, (byte[]) response.get("NODE_ID"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     */
    public static void testAssociationGetLoopback(Integer groupingIdentifier) {
        byte[] testPayload = CommandClassAssociationV2.getAssociationGet(groupingIdentifier);

        Map<String, Object> response = CommandClassAssociationV2.handleAssociationGet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param maxNodesSupported {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param nodeid {@link byte[]}
     */
    public static void testAssociationReportLoopback(Integer groupingIdentifier, Integer maxNodesSupported,
            Integer reportsToFollow, byte[] nodeid) {
        byte[] testPayload = CommandClassAssociationV2.getAssociationReport(groupingIdentifier, maxNodesSupported,
                reportsToFollow, nodeid);

        Map<String, Object> response = CommandClassAssociationV2.handleAssociationReport(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(maxNodesSupported, (Integer) response.get("MAX_NODES_SUPPORTED"));
        assertEquals(reportsToFollow, (Integer) response.get("REPORTS_TO_FOLLOW"));
        assertEquals(nodeid, (byte[]) response.get("NODEID"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_REMOVE command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param nodeId {@link byte[]}
     */
    public static void testAssociationRemoveLoopback(Integer groupingIdentifier, byte[] nodeId) {
        byte[] testPayload = CommandClassAssociationV2.getAssociationRemove(groupingIdentifier, nodeId);

        Map<String, Object> response = CommandClassAssociationV2.handleAssociationRemove(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(nodeId, (byte[]) response.get("NODE_ID"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GROUPINGS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param supportedGroupings {@link Integer}
     */
    public static void testAssociationGroupingsReportLoopback(Integer supportedGroupings) {
        byte[] testPayload = CommandClassAssociationV2.getAssociationGroupingsReport(supportedGroupings);

        Map<String, Object> response = CommandClassAssociationV2.handleAssociationGroupingsReport(testPayload);
        assertEquals(supportedGroupings, (Integer) response.get("SUPPORTED_GROUPINGS"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_SPECIFIC_GROUP_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param group {@link Integer}
     */
    public static void testAssociationSpecificGroupReportLoopback(Integer group) {
        byte[] testPayload = CommandClassAssociationV2.getAssociationSpecificGroupReport(group);

        Map<String, Object> response = CommandClassAssociationV2.handleAssociationSpecificGroupReport(testPayload);
        assertEquals(group, (Integer) response.get("GROUP"));
    }

}
