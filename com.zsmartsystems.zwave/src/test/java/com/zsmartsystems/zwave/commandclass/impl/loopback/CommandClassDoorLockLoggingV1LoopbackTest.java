/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassDoorLockLoggingV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_DOOR_LOCK_LOGGING</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassDoorLockLoggingV1LoopbackTest {
    /**
     * Performs an in/out test of the DOOR_LOCK_LOGGING_RECORDS_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param maxRecordsStored {@link Integer}
     */
    public static void testDoorLockLoggingRecordsSupportedReportLoopback(Integer maxRecordsStored) {
        byte[] testPayload = CommandClassDoorLockLoggingV1.getDoorLockLoggingRecordsSupportedReport(maxRecordsStored);

        Map<String, Object> response = CommandClassDoorLockLoggingV1.handleDoorLockLoggingRecordsSupportedReport(testPayload);
        assertEquals(maxRecordsStored, (Integer) response.get("MAX_RECORDS_STORED"));
    }

    /**
     * Performs an in/out test of the RECORD_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param recordNumber {@link Integer}
     */
    public static void testRecordGetLoopback(Integer recordNumber) {
        byte[] testPayload = CommandClassDoorLockLoggingV1.getRecordGet(recordNumber);

        Map<String, Object> response = CommandClassDoorLockLoggingV1.handleRecordGet(testPayload);
        assertEquals(recordNumber, (Integer) response.get("RECORD_NUMBER"));
    }

    /**
     * Performs an in/out test of the RECORD_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param recordNumber {@link Integer}
     * @param year {@link Integer}
     * @param month {@link Integer}
     * @param day {@link Integer}
     * @param hourLocalTime {@link Integer}
     * @param recordStatus {@link Integer}
     * @param minuteLocalTime {@link Integer}
     * @param secondLocalTime {@link Integer}
     * @param eventType {@link Integer}
     * @param userIdentifier {@link Integer}
     * @param userCodeLength {@link Integer}
     * @param userCode {@link byte[]}
     */
    public static void testRecordReportLoopback(Integer recordNumber, Integer year, Integer month, Integer day,
            Integer hourLocalTime, Integer recordStatus, Integer minuteLocalTime, Integer secondLocalTime,
            Integer eventType, Integer userIdentifier, Integer userCodeLength, byte[] userCode) {
        byte[] testPayload = CommandClassDoorLockLoggingV1.getRecordReport(recordNumber, year, month, day, hourLocalTime,
                recordStatus, minuteLocalTime, secondLocalTime, eventType, userIdentifier, userCodeLength, userCode);

        Map<String, Object> response = CommandClassDoorLockLoggingV1.handleRecordReport(testPayload);
        assertEquals(recordNumber, (Integer) response.get("RECORD_NUMBER"));
        assertEquals(year, (Integer) response.get("YEAR"));
        assertEquals(month, (Integer) response.get("MONTH"));
        assertEquals(day, (Integer) response.get("DAY"));
        assertEquals(hourLocalTime, (Integer) response.get("HOUR_LOCAL_TIME"));
        assertEquals(recordStatus, (Integer) response.get("RECORD_STATUS"));
        assertEquals(minuteLocalTime, (Integer) response.get("MINUTE_LOCAL_TIME"));
        assertEquals(secondLocalTime, (Integer) response.get("SECOND_LOCAL_TIME"));
        assertEquals(eventType, (Integer) response.get("EVENT_TYPE"));
        assertEquals(userIdentifier, (Integer) response.get("USER_IDENTIFIER"));
        assertEquals(userCodeLength, (Integer) response.get("USER_CODE_LENGTH"));
        assertEquals(userCode, (byte[]) response.get("USER_CODE"));
    }

}
