/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassFirmwareUpdateMdV4;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_FIRMWARE_UPDATE_MD</b> version <b>4</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassFirmwareUpdateMdV4LoopbackTest {
    /**
     * Performs an in/out test of the FIRMWARE_MD_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param firmware0Id {@link Integer}
     * @param firmware0Checksum {@link Integer}
     * @param firmwareUpgradable {@link Integer}
     * @param numberOfFirmwareTargets {@link Integer}
     * @param maxFragmentSize {@link Integer}
     */
    public static void testFirmwareMdReportLoopback(Integer manufacturerId, Integer firmware0Id,
            Integer firmware0Checksum, Integer firmwareUpgradable, Integer numberOfFirmwareTargets,
            Integer maxFragmentSize) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareMdReport(manufacturerId, firmware0Id,
                firmware0Checksum, firmwareUpgradable, numberOfFirmwareTargets, maxFragmentSize);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareMdReport(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(firmware0Id, (Integer) response.get("FIRMWARE0_ID"));
        assertEquals(firmware0Checksum, (Integer) response.get("FIRMWARE0_CHECKSUM"));
        assertEquals(firmwareUpgradable, (Integer) response.get("FIRMWARE_UPGRADABLE"));
        assertEquals(numberOfFirmwareTargets, (Integer) response.get("NUMBER_OF_FIRMWARE_TARGETS"));
        assertEquals(maxFragmentSize, (Integer) response.get("MAX_FRAGMENT_SIZE"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_REQUEST_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param firmwareId {@link Integer}
     * @param checksum {@link Integer}
     * @param firmwareTarget {@link Integer}
     * @param fragmentSize {@link Integer}
     * @param activation {@link Boolean}
     */
    public static void testFirmwareUpdateMdRequestGetLoopback(Integer manufacturerId, Integer firmwareId,
            Integer checksum, Integer firmwareTarget, Integer fragmentSize, Boolean activation) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateMdRequestGet(manufacturerId, firmwareId,
                checksum, firmwareTarget, fragmentSize, activation);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateMdRequestGet(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(firmwareId, (Integer) response.get("FIRMWARE_ID"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
        assertEquals(firmwareTarget, (Integer) response.get("FIRMWARE_TARGET"));
        assertEquals(fragmentSize, (Integer) response.get("FRAGMENT_SIZE"));
        assertEquals(activation, (Boolean) response.get("ACTIVATION"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_REQUEST_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param status {@link String}
     */
    public static void testFirmwareUpdateMdRequestReportLoopback(String status) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateMdRequestReport(status);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateMdRequestReport(testPayload);
        assertEquals(status, (String) response.get("STATUS"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param numberOfReports {@link Integer}
     * @param reportNumber1 {@link Integer}
     * @param zero {@link Boolean}
     * @param reportNumber2 {@link Integer}
     */
    public static void testFirmwareUpdateMdGetLoopback(Integer numberOfReports, Integer reportNumber1, Boolean zero,
            Integer reportNumber2) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateMdGet(numberOfReports, reportNumber1, zero,
                reportNumber2);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateMdGet(testPayload);
        assertEquals(numberOfReports, (Integer) response.get("NUMBER_OF_REPORTS"));
        assertEquals(reportNumber1, (Integer) response.get("REPORT_NUMBER1"));
        assertEquals(zero, (Boolean) response.get("ZERO"));
        assertEquals(reportNumber2, (Integer) response.get("REPORT_NUMBER2"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param reportNumber1 {@link Integer}
     * @param last {@link Boolean}
     * @param reportNumber2 {@link Integer}
     * @param data {@link byte[]}
     * @param checksum {@link Integer}
     */
    public static void testFirmwareUpdateMdReportLoopback(Integer reportNumber1, Boolean last, Integer reportNumber2,
            byte[] data, Integer checksum) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateMdReport(reportNumber1, last, reportNumber2,
                data, checksum);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateMdReport(testPayload);
        assertEquals(reportNumber1, (Integer) response.get("REPORT_NUMBER1"));
        assertEquals(last, (Boolean) response.get("LAST"));
        assertEquals(reportNumber2, (Integer) response.get("REPORT_NUMBER2"));
        assertEquals(data, (byte[]) response.get("DATA"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_MD_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param status {@link String}
     * @param waittime {@link Integer}
     */
    public static void testFirmwareUpdateMdStatusReportLoopback(String status, Integer waittime) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateMdStatusReport(status, waittime);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateMdStatusReport(testPayload);
        assertEquals(status, (String) response.get("STATUS"));
        assertEquals(waittime, (Integer) response.get("WAITTIME"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_ACTIVATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param firmwareId {@link Integer}
     * @param checksum {@link Integer}
     * @param firmwareTarget {@link Integer}
     */
    public static void testFirmwareUpdateActivationSetLoopback(Integer manufacturerId, Integer firmwareId,
            Integer checksum, Integer firmwareTarget) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateActivationSet(manufacturerId, firmwareId,
                checksum, firmwareTarget);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateActivationSet(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(firmwareId, (Integer) response.get("FIRMWARE_ID"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
        assertEquals(firmwareTarget, (Integer) response.get("FIRMWARE_TARGET"));
    }

    /**
     * Performs an in/out test of the FIRMWARE_UPDATE_ACTIVATION_STATUS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param manufacturerId {@link Integer}
     * @param firmwareId {@link Integer}
     * @param checksum {@link Integer}
     * @param firmwareTarget {@link Integer}
     * @param firmwareUpdateStatus {@link String}
     */
    public static void testFirmwareUpdateActivationStatusReportLoopback(Integer manufacturerId, Integer firmwareId,
            Integer checksum, Integer firmwareTarget, String firmwareUpdateStatus) {
        byte[] testPayload = CommandClassFirmwareUpdateMdV4.getFirmwareUpdateActivationStatusReport(manufacturerId,
                firmwareId, checksum, firmwareTarget, firmwareUpdateStatus);

        Map<String, Object> response = CommandClassFirmwareUpdateMdV4.handleFirmwareUpdateActivationStatusReport(testPayload);
        assertEquals(manufacturerId, (Integer) response.get("MANUFACTURER_ID"));
        assertEquals(firmwareId, (Integer) response.get("FIRMWARE_ID"));
        assertEquals(checksum, (Integer) response.get("CHECKSUM"));
        assertEquals(firmwareTarget, (Integer) response.get("FIRMWARE_TARGET"));
        assertEquals(firmwareUpdateStatus, (String) response.get("FIRMWARE_UPDATE_STATUS"));
    }

}
