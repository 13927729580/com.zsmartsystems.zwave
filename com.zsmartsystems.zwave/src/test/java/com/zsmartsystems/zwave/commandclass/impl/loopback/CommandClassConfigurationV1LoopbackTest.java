/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassConfigurationV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_CONFIGURATION</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassConfigurationV1LoopbackTest {
    /**
     * Performs an in/out test of the CONFIGURATION_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param defaultValue {@link Boolean}
     * @param configurationValue {@link byte[]}
     */
    public static void testConfigurationSetLoopback(Integer parameterNumber, Boolean defaultValue,
            byte[] configurationValue) {
        byte[] testPayload = CommandClassConfigurationV1.getConfigurationSet(parameterNumber, defaultValue,
                configurationValue);

        Map<String, Object> response = CommandClassConfigurationV1.handleConfigurationSet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(defaultValue, (Boolean) response.get("DEFAULT_VALUE"));
        assertEquals(configurationValue, (byte[]) response.get("CONFIGURATION_VALUE"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     */
    public static void testConfigurationGetLoopback(Integer parameterNumber) {
        byte[] testPayload = CommandClassConfigurationV1.getConfigurationGet(parameterNumber);

        Map<String, Object> response = CommandClassConfigurationV1.handleConfigurationGet(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
    }

    /**
     * Performs an in/out test of the CONFIGURATION_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param parameterNumber {@link Integer}
     * @param configurationValue {@link byte[]}
     */
    public static void testConfigurationReportLoopback(Integer parameterNumber, byte[] configurationValue) {
        byte[] testPayload = CommandClassConfigurationV1.getConfigurationReport(parameterNumber, configurationValue);

        Map<String, Object> response = CommandClassConfigurationV1.handleConfigurationReport(testPayload);
        assertEquals(parameterNumber, (Integer) response.get("PARAMETER_NUMBER"));
        assertEquals(configurationValue, (byte[]) response.get("CONFIGURATION_VALUE"));
    }

}
