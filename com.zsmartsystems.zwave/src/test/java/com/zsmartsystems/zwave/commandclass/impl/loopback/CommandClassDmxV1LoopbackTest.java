/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassDmxV1;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_DMX</b> version <b>1</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassDmxV1LoopbackTest {
    /**
     * Performs an in/out test of the DMX_ADDRESS_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param pageId {@link Integer}
     * @param channelId {@link Integer}
     */
    public static void testDmxAddressSetLoopback(Integer pageId, Integer channelId) {
        byte[] testPayload = CommandClassDmxV1.getDmxAddressSet(pageId, channelId);

        Map<String, Object> response = CommandClassDmxV1.handleDmxAddressSet(testPayload);
        assertEquals(pageId, (Integer) response.get("PAGE_ID"));
        assertEquals(channelId, (Integer) response.get("CHANNEL_ID"));
    }

    /**
     * Performs an in/out test of the DMX_ADDRESS_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param pageId {@link Integer}
     * @param channelId {@link Integer}
     */
    public static void testDmxAddressReportLoopback(Integer pageId, Integer channelId) {
        byte[] testPayload = CommandClassDmxV1.getDmxAddressReport(pageId, channelId);

        Map<String, Object> response = CommandClassDmxV1.handleDmxAddressReport(testPayload);
        assertEquals(pageId, (Integer) response.get("PAGE_ID"));
        assertEquals(channelId, (Integer) response.get("CHANNEL_ID"));
    }

    /**
     * Performs an in/out test of the DMX_CAPABILITY_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param channelId {@link Integer}
     */
    public static void testDmxCapabilityGetLoopback(Integer channelId) {
        byte[] testPayload = CommandClassDmxV1.getDmxCapabilityGet(channelId);

        Map<String, Object> response = CommandClassDmxV1.handleDmxCapabilityGet(testPayload);
        assertEquals(channelId, (Integer) response.get("CHANNEL_ID"));
    }

    /**
     * Performs an in/out test of the DMX_CAPABILITY_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param channelId {@link Integer}
     * @param propertyId {@link Integer}
     * @param deviceChannels {@link Integer}
     * @param maxChannels {@link Integer}
     */
    public static void testDmxCapabilityReportLoopback(Integer channelId, Integer propertyId, Integer deviceChannels,
            Integer maxChannels) {
        byte[] testPayload = CommandClassDmxV1.getDmxCapabilityReport(channelId, propertyId, deviceChannels, maxChannels);

        Map<String, Object> response = CommandClassDmxV1.handleDmxCapabilityReport(testPayload);
        assertEquals(channelId, (Integer) response.get("CHANNEL_ID"));
        assertEquals(propertyId, (Integer) response.get("PROPERTY_ID"));
        assertEquals(deviceChannels, (Integer) response.get("DEVICE_CHANNELS"));
        assertEquals(maxChannels, (Integer) response.get("MAX_CHANNELS"));
    }

    /**
     * Performs an in/out test of the DMX_DATA command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param source {@link Integer}
     * @param page {@link Integer}
     * @param sequenceNo {@link Integer}
     * @param dmxChannel {@link byte[]}
     */
    public static void testDmxDataLoopback(Integer source, Integer page, Integer sequenceNo, byte[] dmxChannel) {
        byte[] testPayload = CommandClassDmxV1.getDmxData(source, page, sequenceNo, dmxChannel);

        Map<String, Object> response = CommandClassDmxV1.handleDmxData(testPayload);
        assertEquals(source, (Integer) response.get("SOURCE"));
        assertEquals(page, (Integer) response.get("PAGE"));
        assertEquals(sequenceNo, (Integer) response.get("SEQUENCE_NO"));
        assertEquals(dmxChannel, (byte[]) response.get("DMX_CHANNEL"));
    }

}
