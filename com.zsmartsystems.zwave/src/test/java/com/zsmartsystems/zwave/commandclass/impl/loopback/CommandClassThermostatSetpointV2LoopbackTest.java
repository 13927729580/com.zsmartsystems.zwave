/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassThermostatSetpointV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_THERMOSTAT_SETPOINT</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassThermostatSetpointV2LoopbackTest {
    /**
     * Performs an in/out test of the THERMOSTAT_SETPOINT_SET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testThermostatSetpointSetLoopback(String setpointType, Integer scale, Integer precision,
            byte[] value) {
        byte[] testPayload = CommandClassThermostatSetpointV2.getThermostatSetpointSet(setpointType, scale, precision,
                value);

        Map<String, Object> response = CommandClassThermostatSetpointV2.handleThermostatSetpointSet(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_SETPOINT_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     */
    public static void testThermostatSetpointGetLoopback(String setpointType) {
        byte[] testPayload = CommandClassThermostatSetpointV2.getThermostatSetpointGet(setpointType);

        Map<String, Object> response = CommandClassThermostatSetpointV2.handleThermostatSetpointGet(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_SETPOINT_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param setpointType {@link String}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     */
    public static void testThermostatSetpointReportLoopback(String setpointType, Integer scale, Integer precision,
            byte[] value) {
        byte[] testPayload = CommandClassThermostatSetpointV2.getThermostatSetpointReport(setpointType, scale, precision,
                value);

        Map<String, Object> response = CommandClassThermostatSetpointV2.handleThermostatSetpointReport(testPayload);
        assertEquals(setpointType, (String) response.get("SETPOINT_TYPE"));
        assertEquals(scale, (Integer) response.get("SCALE"));
        assertEquals(precision, (Integer) response.get("PRECISION"));
        assertEquals(value, (byte[]) response.get("VALUE"));
    }

    /**
     * Performs an in/out test of the THERMOSTAT_SETPOINT_SUPPORTED_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param bitMask {@link List<String>}
     */
    public static void testThermostatSetpointSupportedReportLoopback(List<String> bitMask) {
        byte[] testPayload = CommandClassThermostatSetpointV2.getThermostatSetpointSupportedReport(bitMask);

        Map<String, Object> response = CommandClassThermostatSetpointV2.handleThermostatSetpointSupportedReport(testPayload);
        assertEquals(bitMask, (List<String>) response.get("BIT_MASK"));
    }

}
