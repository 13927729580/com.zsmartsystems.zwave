/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl.loopback;

import static org.junit.Assert.assertEquals;

import java.util.Map;
import java.util.List;
import com.zsmartsystems.zwave.commandclass.impl.CommandClassAssociationGrpInfoV2;

/**
 * Class to implement loopback tests for command class <b>COMMAND_CLASS_ASSOCIATION_GRP_INFO</b> version <b>2</b>.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassAssociationGrpInfoV2LoopbackTest {
    /**
     * Performs an in/out test of the ASSOCIATION_GROUP_NAME_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     */
    public static void testAssociationGroupNameGetLoopback(Integer groupingIdentifier) {
        byte[] testPayload = CommandClassAssociationGrpInfoV2.getAssociationGroupNameGet(groupingIdentifier);

        Map<String, Object> response = CommandClassAssociationGrpInfoV2.handleAssociationGroupNameGet(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GROUP_NAME_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param lengthOfName {@link Integer}
     * @param name {@link byte[]}
     */
    public static void testAssociationGroupNameReportLoopback(Integer groupingIdentifier, Integer lengthOfName,
            byte[] name) {
        byte[] testPayload = CommandClassAssociationGrpInfoV2.getAssociationGroupNameReport(groupingIdentifier,
                lengthOfName, name);

        Map<String, Object> response = CommandClassAssociationGrpInfoV2.handleAssociationGroupNameReport(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(lengthOfName, (Integer) response.get("LENGTH_OF_NAME"));
        assertEquals(name, (byte[]) response.get("NAME"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GROUP_INFO_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param listMode {@link Boolean}
     * @param refreshCache {@link Boolean}
     * @param groupingIdentifier {@link Integer}
     */
    public static void testAssociationGroupInfoGetLoopback(Boolean listMode, Boolean refreshCache,
            Integer groupingIdentifier) {
        byte[] testPayload = CommandClassAssociationGrpInfoV2.getAssociationGroupInfoGet(listMode, refreshCache,
                groupingIdentifier);

        Map<String, Object> response = CommandClassAssociationGrpInfoV2.handleAssociationGroupInfoGet(testPayload);
        assertEquals(listMode, (Boolean) response.get("LIST_MODE"));
        assertEquals(refreshCache, (Boolean) response.get("REFRESH_CACHE"));
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GROUP_INFO_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupCount {@link Integer}
     * @param dynamicInfo {@link Boolean}
     * @param listMode {@link Boolean}
     */
    public static void testAssociationGroupInfoReportLoopback(Integer groupCount, Boolean dynamicInfo, Boolean listMode) {
        byte[] testPayload = CommandClassAssociationGrpInfoV2.getAssociationGroupInfoReport(groupCount, dynamicInfo,
                listMode);

        Map<String, Object> response = CommandClassAssociationGrpInfoV2.handleAssociationGroupInfoReport(testPayload);
        assertEquals(groupCount, (Integer) response.get("GROUP_COUNT"));
        assertEquals(dynamicInfo, (Boolean) response.get("DYNAMIC_INFO"));
        assertEquals(listMode, (Boolean) response.get("LIST_MODE"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GROUP_COMMAND_LIST_GET command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param allowCache {@link Boolean}
     * @param groupingIdentifier {@link Integer}
     */
    public static void testAssociationGroupCommandListGetLoopback(Boolean allowCache, Integer groupingIdentifier) {
        byte[] testPayload = CommandClassAssociationGrpInfoV2.getAssociationGroupCommandListGet(allowCache,
                groupingIdentifier);

        Map<String, Object> response = CommandClassAssociationGrpInfoV2.handleAssociationGroupCommandListGet(testPayload);
        assertEquals(allowCache, (Boolean) response.get("ALLOW_CACHE"));
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
    }

    /**
     * Performs an in/out test of the ASSOCIATION_GROUP_COMMAND_LIST_REPORT command.
     * <p>
     * Test is designed to ensure that the command generates the same data
     * as the handler processes and is mainly a check of the code generator.
     *
     * @param groupingIdentifier {@link Integer}
     * @param listLength {@link Integer}
     * @param command {@link byte[]}
     */
    public static void testAssociationGroupCommandListReportLoopback(Integer groupingIdentifier, Integer listLength,
            byte[] command) {
        byte[] testPayload = CommandClassAssociationGrpInfoV2.getAssociationGroupCommandListReport(groupingIdentifier,
                listLength, command);

        Map<String, Object> response = CommandClassAssociationGrpInfoV2.handleAssociationGroupCommandListReport(testPayload);
        assertEquals(groupingIdentifier, (Integer) response.get("GROUPING_IDENTIFIER"));
        assertEquals(listLength, (Integer) response.get("LIST_LENGTH"));
        assertEquals(command, (byte[]) response.get("COMMAND"));
    }

}
