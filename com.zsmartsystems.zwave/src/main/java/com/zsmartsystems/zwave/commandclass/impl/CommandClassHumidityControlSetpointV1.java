/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT</b> version <b>1</b>.<br>
 *
 * Command Class Humidity Control Setpoint<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassHumidityControlSetpointV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassHumidityControlSetpointV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_HUMIDITY_CONTROL_SETPOINT
     */
    public final static int COMMAND_CLASS_KEY = 0x64;

    /**
     * Humidity Control Setpoint Set Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_SET = 0x01;
    /**
     * Humidity Control Setpoint Get Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_GET = 0x02;
    /**
     * Humidity Control Setpoint Report Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_REPORT = 0x03;
    /**
     * Humidity Control Setpoint Supported Get Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET = 0x04;
    /**
     * Humidity Control Setpoint Supported Report Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT = 0x05;
    /**
     * Humidity Control Setpoint Scale Supported Get Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET = 0x06;
    /**
     * Humidity Control Setpoint Scale Supported Report Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT = 0x07;
    /**
     * Humidity Control Setpoint Capabilities Get Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET = 0x08;
    /**
     * Humidity Control Setpoint Capabilities Report Command Constant
     */
    public final static int HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT = 0x09;

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_SET command.<br>
     *
     * Humidity Control Setpoint Set<br>
     *
     *
     * @param setpointType {@link String}
     * @param size {@link Integer}
     * @param scale {@link String}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointSet(String setpointType, Integer size, String scale,
            Integer precision, byte[] value) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_SET);

        // Process 'Properties1'
        int valsetpointType;
        switch (setpointType) {
            case "HUMIDIFIER":
                valsetpointType = 0;
                break;
            case "DEHUMIDIFIER":
                valsetpointType = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for setpointType: " + setpointType);
        }
        outputData.write(valsetpointType & 0x0F);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= size & 0x07;
        int valscale;
        switch (scale) {
            case "PERCENTAGE":
                valscale = 0;
                break;
            case "ABSOLUTE":
                valscale = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for scale: " + scale);
        }
        valProperties2 |= valscale >> 3 & 0x18;
        valProperties2 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_SET command<br>
     *
     * Humidity Control Setpoint Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link String}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        switch ((int) payload[msgOffset] & 0x0F) {
            case 0x00:
                response.put("SETPOINT_TYPE", "HUMIDIFIER");
                break;
            case 0x01:
                response.put("SETPOINT_TYPE", "DEHUMIDIFIER");
                break;
            default:
                logger.debug("Unknown enum value {} for SETPOINT_TYPE", String.format("0x%02X", msgOffset));
        }
        msgOffset += 1;

        // Process 'Properties2'
        response.put("SIZE", new Integer(payload[msgOffset] & 0x07));
        switch ((payload[msgOffset] & 0x18) >> 3) {
            case 0x00:
                response.put("SCALE", "PERCENTAGE");
                break;
            case 0x01:
                response.put("SCALE", "ABSOLUTE");
                break;
            default:
                logger.debug("Unknown enum value {} for SCALE", String.format("0x%02X", msgOffset));
        }
        response.put("PRECISION", new Integer((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        int valValue = 0;
        int lenValue = payload[msgOffset - 1] & 0x07;
        for (int cntValue = 0; cntValue < lenValue; cntValue++) {
            valValue = (valValue << 8) + payload[msgOffset + cntValue];
        }
        response.put("VALUE", valValue);
        msgOffset += lenValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_GET command.<br>
     *
     * Humidity Control Setpoint Get<br>
     *
     *
     * @param setpointType {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointGet(String setpointType) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_GET);

        // Process 'Properties1'
        int valsetpointType;
        switch (setpointType) {
            case "HUMIDIFIER":
                valsetpointType = 0;
                break;
            case "DEHUMIDIFIER":
                valsetpointType = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for setpointType: " + setpointType);
        }
        outputData.write(valsetpointType & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_GET command<br>
     *
     * Humidity Control Setpoint Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        switch ((int) payload[2] & 0x0F) {
            case 0x00:
                response.put("SETPOINT_TYPE", "HUMIDIFIER");
                break;
            case 0x01:
                response.put("SETPOINT_TYPE", "DEHUMIDIFIER");
                break;
            default:
                logger.debug("Unknown enum value {} for SETPOINT_TYPE", String.format("0x%02X", 2));
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_REPORT command.<br>
     *
     * Humidity Control Setpoint Report<br>
     *
     *
     * @param setpointType {@link String}
     * @param size {@link Integer}
     * @param scale {@link String}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointReport(String setpointType, Integer size, String scale,
            Integer precision, byte[] value) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_REPORT);

        // Process 'Properties1'
        int valsetpointType;
        switch (setpointType) {
            case "HUMIDIFIER":
                valsetpointType = 0;
                break;
            case "DEHUMIDIFIER":
                valsetpointType = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for setpointType: " + setpointType);
        }
        outputData.write(valsetpointType & 0x0F);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= size & 0x07;
        int valscale;
        switch (scale) {
            case "PERCENTAGE":
                valscale = 0;
                break;
            case "ABSOLUTE":
                valscale = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for scale: " + scale);
        }
        valProperties2 |= valscale >> 3 & 0x18;
        valProperties2 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_REPORT command<br>
     *
     * Humidity Control Setpoint Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link String}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        switch ((int) payload[msgOffset] & 0x0F) {
            case 0x00:
                response.put("SETPOINT_TYPE", "HUMIDIFIER");
                break;
            case 0x01:
                response.put("SETPOINT_TYPE", "DEHUMIDIFIER");
                break;
            default:
                logger.debug("Unknown enum value {} for SETPOINT_TYPE", String.format("0x%02X", msgOffset));
        }
        msgOffset += 1;

        // Process 'Properties2'
        response.put("SIZE", new Integer(payload[msgOffset] & 0x07));
        switch ((payload[msgOffset] & 0x18) >> 3) {
            case 0x00:
                response.put("SCALE", "PERCENTAGE");
                break;
            case 0x01:
                response.put("SCALE", "ABSOLUTE");
                break;
            default:
                logger.debug("Unknown enum value {} for SCALE", String.format("0x%02X", msgOffset));
        }
        response.put("PRECISION", new Integer((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        int valValue = 0;
        int lenValue = payload[msgOffset - 1] & 0x07;
        for (int cntValue = 0; cntValue < lenValue; cntValue++) {
            valValue = (valValue << 8) + payload[msgOffset + cntValue];
        }
        response.put("VALUE", valValue);
        msgOffset += lenValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET command.<br>
     *
     * Humidity Control Setpoint Supported Get<br>
     *
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointSupportedGet() {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_SUPPORTED_GET command<br>
     *
     * Humidity Control Setpoint Supported Get<br>
     *
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT command.<br>
     *
     * Humidity Control Setpoint Supported Report<br>
     *
     *
     * @param bitMask {@link List<String>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointSupportedReport(List<String> bitMask) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT);

        // Process 'Bit Mask'
        int valBitMask = 0;
        valBitMask |= (bitMask.contains("HUMIDIFIER") ? 0x02 : 0);
        valBitMask |= (bitMask.contains("DEHUMIDIFIER") ? 0x04 : 0);
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_SUPPORTED_REPORT command<br>
     *
     * Humidity Control Setpoint Supported Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>BIT_MASK {@link List}<{@link String}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        int lenBitMask = 1;
        for (int cntBitMask = 0; cntBitMask < lenBitMask; cntBitMask++) {
            if ((payload[2 + (cntBitMask / 8)] & cntBitMask % 8) == 0) {
                continue;
            }
            switch (cntBitMask) {
                case 0x01:
                    responseBitMask.add("HUMIDIFIER");
                    break;
                case 0x02:
                    responseBitMask.add("DEHUMIDIFIER");
                    break;
                default:
                    responseBitMask.add("BITMASK_" + cntBitMask);
                    break;
            }
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET command.<br>
     *
     * Humidity Control Setpoint Scale Supported Get<br>
     *
     *
     * @param setpointType {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointScaleSupportedGet(String setpointType) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET);

        // Process 'Properties1'
        int valsetpointType;
        switch (setpointType) {
            case "HUMIDIFIER":
                valsetpointType = 0;
                break;
            case "DEHUMIDIFIER":
                valsetpointType = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for setpointType: " + setpointType);
        }
        outputData.write(valsetpointType & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_GET command<br>
     *
     * Humidity Control Setpoint Scale Supported Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointScaleSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        switch ((int) payload[2] & 0x0F) {
            case 0x00:
                response.put("SETPOINT_TYPE", "HUMIDIFIER");
                break;
            case 0x01:
                response.put("SETPOINT_TYPE", "DEHUMIDIFIER");
                break;
            default:
                logger.debug("Unknown enum value {} for SETPOINT_TYPE", String.format("0x%02X", 2));
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT command.<br>
     *
     * Humidity Control Setpoint Scale Supported Report<br>
     *
     *
     * @param scaleBitMask {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointScaleSupportedReport(String scaleBitMask) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT);

        // Process 'Properties1'
        int valscaleBitMask;
        switch (scaleBitMask) {
            case "PERCENTAGE":
                valscaleBitMask = 0;
                break;
            case "ABSOLUTE":
                valscaleBitMask = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for scaleBitMask: " + scaleBitMask);
        }
        outputData.write(valscaleBitMask & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_SCALE_SUPPORTED_REPORT command<br>
     *
     * Humidity Control Setpoint Scale Supported Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SCALE_BIT_MASK {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointScaleSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        switch ((int) payload[2] & 0x0F) {
            case 0x00:
                response.put("SCALE_BIT_MASK", "PERCENTAGE");
                break;
            case 0x01:
                response.put("SCALE_BIT_MASK", "ABSOLUTE");
                break;
            default:
                logger.debug("Unknown enum value {} for SCALE_BIT_MASK", String.format("0x%02X", 2));
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET command.<br>
     *
     * Humidity Control Setpoint Capabilities Get<br>
     *
     *
     * @param setpointType {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointCapabilitiesGet(String setpointType) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET);

        // Process 'Properties1'
        int valsetpointType;
        switch (setpointType) {
            case "HUMIDIFIER":
                valsetpointType = 0;
                break;
            case "DEHUMIDIFIER":
                valsetpointType = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for setpointType: " + setpointType);
        }
        outputData.write(valsetpointType & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_GET command<br>
     *
     * Humidity Control Setpoint Capabilities Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointCapabilitiesGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        switch ((int) payload[2] & 0x0F) {
            case 0x00:
                response.put("SETPOINT_TYPE", "HUMIDIFIER");
                break;
            case 0x01:
                response.put("SETPOINT_TYPE", "DEHUMIDIFIER");
                break;
            default:
                logger.debug("Unknown enum value {} for SETPOINT_TYPE", String.format("0x%02X", 2));
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT command.<br>
     *
     * Humidity Control Setpoint Capabilities Report<br>
     *
     *
     * @param setpointType {@link String}
     * @param size1 {@link Integer}
     * @param scale1 {@link String}
     * @param precision1 {@link Integer}
     * @param minimumValue {@link byte[]}
     * @param size2 {@link Integer}
     * @param scale2 {@link String}
     * @param precision2 {@link Integer}
     * @param maximumValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getHumidityControlSetpointCapabilitiesReport(String setpointType, Integer size1, String scale1,
            Integer precision1, byte[] minimumValue, Integer size2, String scale2, Integer precision2,
            byte[] maximumValue) {
        logger.debug("Creating command message HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT);

        // Process 'Properties1'
        int valsetpointType;
        switch (setpointType) {
            case "HUMIDIFIER":
                valsetpointType = 0;
                break;
            case "DEHUMIDIFIER":
                valsetpointType = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for setpointType: " + setpointType);
        }
        outputData.write(valsetpointType & 0x0F);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= size1 & 0x07;
        int valscale1;
        switch (scale1) {
            case "PERCENTAGE":
                valscale1 = 0;
                break;
            case "ABSOLUTE":
                valscale1 = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for scale1: " + scale1);
        }
        valProperties2 |= valscale1 >> 3 & 0x18;
        valProperties2 |= ((precision1 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Minimum Value'
        try {
            outputData.write(minimumValue);
        } catch (IOException e) {
        }

        // Process 'Properties3'
        int valProperties3 = 0;
        valProperties3 |= size2 & 0x07;
        int valscale2;
        switch (scale2) {
            case "PERCENTAGE":
                valscale2 = 0;
                break;
            case "ABSOLUTE":
                valscale2 = 1;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for scale2: " + scale2);
        }
        valProperties3 |= valscale2 >> 3 & 0x18;
        valProperties3 |= ((precision2 << 5) & 0xE0);
        outputData.write(valProperties3);

        // Process 'Maximum Value'
        try {
            outputData.write(maximumValue);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the HUMIDITY_CONTROL_SETPOINT_CAPABILITIES_REPORT command<br>
     *
     * Humidity Control Setpoint Capabilities Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SETPOINT_TYPE {@link String}
     * <li>SIZE1 {@link Integer}
     * <li>SCALE1 {@link String}
     * <li>PRECISION1 {@link Integer}
     * <li>MINIMUM_VALUE {@link byte[]}
     * <li>SIZE2 {@link Integer}
     * <li>SCALE2 {@link String}
     * <li>PRECISION2 {@link Integer}
     * <li>MAXIMUM_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleHumidityControlSetpointCapabilitiesReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        switch ((int) payload[msgOffset] & 0x0F) {
            case 0x00:
                response.put("SETPOINT_TYPE", "HUMIDIFIER");
                break;
            case 0x01:
                response.put("SETPOINT_TYPE", "DEHUMIDIFIER");
                break;
            default:
                logger.debug("Unknown enum value {} for SETPOINT_TYPE", String.format("0x%02X", msgOffset));
        }
        msgOffset += 1;

        // Process 'Properties2'
        response.put("SIZE1", new Integer(payload[msgOffset] & 0x07));
        switch ((payload[msgOffset] & 0x18) >> 3) {
            case 0x00:
                response.put("SCALE1", "PERCENTAGE");
                break;
            case 0x01:
                response.put("SCALE1", "ABSOLUTE");
                break;
            default:
                logger.debug("Unknown enum value {} for SCALE1", String.format("0x%02X", msgOffset));
        }
        response.put("PRECISION1", new Integer((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Minimum Value'
        int valMinimumValue = 0;
        int lenMinimumValue = payload[msgOffset - 1] & 0x07;
        for (int cntMinimumValue = 0; cntMinimumValue < lenMinimumValue; cntMinimumValue++) {
            valMinimumValue = (valMinimumValue << 8) + payload[msgOffset + cntMinimumValue];
        }
        response.put("MINIMUM_VALUE", valMinimumValue);
        msgOffset += lenMinimumValue;

        // Process 'Properties3'
        response.put("SIZE2", new Integer(payload[msgOffset] & 0x07));
        switch ((payload[msgOffset] & 0x18) >> 3) {
            case 0x00:
                response.put("SCALE2", "PERCENTAGE");
                break;
            case 0x01:
                response.put("SCALE2", "ABSOLUTE");
                break;
            default:
                logger.debug("Unknown enum value {} for SCALE2", String.format("0x%02X", msgOffset));
        }
        response.put("PRECISION2", new Integer((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Maximum Value'
        int valMaximumValue = 0;
        int lenMaximumValue = payload[msgOffset - 1] & 0x07;
        for (int cntMaximumValue = 0; cntMaximumValue < lenMaximumValue; cntMaximumValue++) {
            valMaximumValue = (valMaximumValue << 8) + payload[msgOffset + cntMaximumValue];
        }
        response.put("MAXIMUM_VALUE", valMaximumValue);
        msgOffset += lenMaximumValue;

        // Return the map of processed response data;
        return response;
    }

}
