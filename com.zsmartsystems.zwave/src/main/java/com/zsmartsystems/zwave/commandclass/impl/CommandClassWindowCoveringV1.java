/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.lang.IllegalArgumentException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_WINDOW_COVERING</b> version <b>1</b>.<br>
 *
 * Command Class Window Covering<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassWindowCoveringV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassWindowCoveringV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_WINDOW_COVERING
     */
    public final static int COMMAND_CLASS_KEY = 0x6A;

    /**
     * Window Covering Supported Get Command Constant
     */
    public final static int WINDOW_COVERING_SUPPORTED_GET = 0x01;
    /**
     * Window Covering Supported Report Command Constant
     */
    public final static int WINDOW_COVERING_SUPPORTED_REPORT = 0x02;
    /**
     * Window Covering Get Command Constant
     */
    public final static int WINDOW_COVERING_GET = 0x03;
    /**
     * Window Covering Report Command Constant
     */
    public final static int WINDOW_COVERING_REPORT = 0x04;
    /**
     * Window Covering Set Command Constant
     */
    public final static int WINDOW_COVERING_SET = 0x05;
    /**
     * Window Covering Start Level Change Command Constant
     */
    public final static int WINDOW_COVERING_START_LEVEL_CHANGE = 0x06;
    /**
     * Window Covering Stop Level Change Command Constant
     */
    public final static int WINDOW_COVERING_STOP_LEVEL_CHANGE = 0x07;

    /**
     * Creates a new message with the WINDOW_COVERING_SUPPORTED_GET command.<br>
     *
     * Window Covering Supported Get<br>
     *
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringSupportedGet() {
        logger.debug("Creating command message WINDOW_COVERING_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_SUPPORTED_GET command<br>
     *
     * Window Covering Supported Get<br>
     *
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_SUPPORTED_REPORT command.<br>
     *
     * Window Covering Supported Report<br>
     *
     *
     * @param parameterMask {@link List<Integer>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringSupportedReport(List<Integer> parameterMask) {
        logger.debug("Creating command message WINDOW_COVERING_SUPPORTED_REPORT version 1");

        Collections.sort(parameterMask);
        int lenParameterMask = (parameterMask.get(parameterMask.size() - 1) / 8) + 1;

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_SUPPORTED_REPORT);

        // Process 'Properties1'
        outputData.write(lenParameterMask);

        // Process 'Parameter Mask'
        int valParameterMask = 0;
        for (int cntParameterMask = 1 ; cntParameterMask < lenParameterMask * 8 ; cntParameterMask++) {
            valParameterMask |= parameterMask.contains(valParameterMask) ? (1 << cntParameterMask % 8) : 0;
            if (cntParameterMask % 8 == 0) {
                outputData.write(valParameterMask);
                valParameterMask = 0;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_SUPPORTED_REPORT command<br>
     *
     * Window Covering Supported Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_MASK {@link List}<{@link Integer}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'

        // Process 'Parameter Mask'
        List<Integer> responseParameterMask = new ArrayList<Integer>();
        int lenParameterMask = (payload[0] & 0x0F) * 8;
        for (int cntParameterMask = 0; cntParameterMask < lenParameterMask; cntParameterMask++) {
            if ((payload[3 + (cntParameterMask / 8)] & cntParameterMask % 8) == 0) {
                continue;
            }
            responseParameterMask.add(cntParameterMask);
        }
        response.put("PARAMETER_MASK", responseParameterMask);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_GET command.<br>
     *
     * Window Covering Get<br>
     *
     *
     * @param parameterId {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringGet(String parameterId) {
        logger.debug("Creating command message WINDOW_COVERING_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_GET);

        // Process 'Parameter ID'
        switch (parameterId) {
            case "OUT_LEFT_1":
                outputData.write(0x00);
                break;
            case "OUT_LEFT_2":
                outputData.write(0x01);
                break;
            case "OUT_RIGHT_1":
                outputData.write(0x02);
                break;
            case "OUT_RIGHT_2":
                outputData.write(0x03);
                break;
            case "IN_LEFT_1":
                outputData.write(0x04);
                break;
            case "IN_LEFT_2":
                outputData.write(0x05);
                break;
            case "IN_RIGHT_1":
                outputData.write(0x06);
                break;
            case "IN_RIGHT_2":
                outputData.write(0x07);
                break;
            case "IN_RIGHT_LEFT_1":
                outputData.write(0x08);
                break;
            case "IN_RIGHT_LEFT_2":
                outputData.write(0x09);
                break;
            case "VERTICAL_SLATS_ANGLE_1":
                outputData.write(0x0A);
                break;
            case "VERTICAL_SLATS_ANGLE_2":
                outputData.write(0x0B);
                break;
            case "OUT_BOTTOM_1":
                outputData.write(0x0C);
                break;
            case "OUT_BOTTOM_2":
                outputData.write(0x0D);
                break;
            case "OUT_TOP_1":
                outputData.write(0x0E);
                break;
            case "OUT_TOP_2":
                outputData.write(0x0F);
                break;
            case "IN_BOTTOM_1":
                outputData.write(0x10);
                break;
            case "IN_BOTTOM_2":
                outputData.write(0x11);
                break;
            case "IN_TOP_1":
                outputData.write(0x0B);
                break;
            case "IN_TOP_2":
                outputData.write(0x12);
                break;
            case "IN_TOP_BOTTOM_1":
                outputData.write(0x13);
                break;
            case "IN_TOP_BOTTOM_2":
                outputData.write(0x14);
                break;
            case "HORIZONTAL_SLATS_ANGLE_1":
                outputData.write(0x15);
                break;
            case "HORIZONTAL_SLATS_ANGLE_2":
                outputData.write(0x16);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for parameterId: " + parameterId);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_GET command<br>
     *
     * Window Covering Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_ID {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter ID'
        switch ((int) payload[2]) {
            case (byte) 0x00:
                response.put("PARAMETER_ID", "OUT_LEFT_1");
                break;
            case (byte) 0x01:
                response.put("PARAMETER_ID", "OUT_LEFT_2");
                break;
            case (byte) 0x02:
                response.put("PARAMETER_ID", "OUT_RIGHT_1");
                break;
            case (byte) 0x03:
                response.put("PARAMETER_ID", "OUT_RIGHT_2");
                break;
            case (byte) 0x04:
                response.put("PARAMETER_ID", "IN_LEFT_1");
                break;
            case (byte) 0x05:
                response.put("PARAMETER_ID", "IN_LEFT_2");
                break;
            case (byte) 0x06:
                response.put("PARAMETER_ID", "IN_RIGHT_1");
                break;
            case (byte) 0x07:
                response.put("PARAMETER_ID", "IN_RIGHT_2");
                break;
            case (byte) 0x08:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_1");
                break;
            case (byte) 0x09:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_2");
                break;
            case (byte) 0x0A:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x0B:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_2");
                break;
            case (byte) 0x0C:
                response.put("PARAMETER_ID", "OUT_BOTTOM_1");
                break;
            case (byte) 0x0D:
                response.put("PARAMETER_ID", "OUT_BOTTOM_2");
                break;
            case (byte) 0x0E:
                response.put("PARAMETER_ID", "OUT_TOP_1");
                break;
            case (byte) 0x0F:
                response.put("PARAMETER_ID", "OUT_TOP_2");
                break;
            case (byte) 0x10:
                response.put("PARAMETER_ID", "IN_BOTTOM_1");
                break;
            case (byte) 0x11:
                response.put("PARAMETER_ID", "IN_BOTTOM_2");
                break;
            case (byte) 0x12:
                response.put("PARAMETER_ID", "IN_TOP_2");
                break;
            case (byte) 0x13:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_1");
                break;
            case (byte) 0x14:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_2");
                break;
            case (byte) 0x15:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x16:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_2");
                break;
            default:
                logger.debug("Unknown value {} for constant 'PARAMETER_ID'", String.format("%02X", payload[2]));
                response.put("PARAMETER_ID", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_REPORT command.<br>
     *
     * Window Covering Report<br>
     *
     *
     * @param parameterId {@link String}
     * @param currentValue {@link Integer}
     * @param targetValue {@link Integer}
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringReport(String parameterId, Integer currentValue, Integer targetValue,
            Integer duration) {
        logger.debug("Creating command message WINDOW_COVERING_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_REPORT);

        // Process 'Parameter ID'
        switch (parameterId) {
            case "OUT_LEFT_1":
                outputData.write(0x00);
                break;
            case "OUT_LEFT_2":
                outputData.write(0x01);
                break;
            case "OUT_RIGHT_1":
                outputData.write(0x02);
                break;
            case "OUT_RIGHT_2":
                outputData.write(0x03);
                break;
            case "IN_LEFT_1":
                outputData.write(0x04);
                break;
            case "IN_LEFT_2":
                outputData.write(0x05);
                break;
            case "IN_RIGHT_1":
                outputData.write(0x06);
                break;
            case "IN_RIGHT_2":
                outputData.write(0x07);
                break;
            case "IN_RIGHT_LEFT_1":
                outputData.write(0x08);
                break;
            case "IN_RIGHT_LEFT_2":
                outputData.write(0x09);
                break;
            case "VERTICAL_SLATS_ANGLE_1":
                outputData.write(0x0A);
                break;
            case "VERTICAL_SLATS_ANGLE_2":
                outputData.write(0x0B);
                break;
            case "OUT_BOTTOM_1":
                outputData.write(0x0C);
                break;
            case "OUT_BOTTOM_2":
                outputData.write(0x0D);
                break;
            case "OUT_TOP_1":
                outputData.write(0x0E);
                break;
            case "OUT_TOP_2":
                outputData.write(0x0F);
                break;
            case "IN_BOTTOM_1":
                outputData.write(0x10);
                break;
            case "IN_BOTTOM_2":
                outputData.write(0x11);
                break;
            case "IN_TOP_1":
                outputData.write(0x0B);
                break;
            case "IN_TOP_2":
                outputData.write(0x12);
                break;
            case "IN_TOP_BOTTOM_1":
                outputData.write(0x13);
                break;
            case "IN_TOP_BOTTOM_2":
                outputData.write(0x14);
                break;
            case "HORIZONTAL_SLATS_ANGLE_1":
                outputData.write(0x15);
                break;
            case "HORIZONTAL_SLATS_ANGLE_2":
                outputData.write(0x16);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for parameterId: " + parameterId);
        }

        // Process 'Current Value'
        outputData.write(currentValue);

        // Process 'Target Value'
        outputData.write(targetValue);

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_REPORT command<br>
     *
     * Window Covering Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_ID {@link String}
     * <li>CURRENT_VALUE {@link Integer}
     * <li>TARGET_VALUE {@link Integer}
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter ID'
        switch ((int) payload[2]) {
            case (byte) 0x00:
                response.put("PARAMETER_ID", "OUT_LEFT_1");
                break;
            case (byte) 0x01:
                response.put("PARAMETER_ID", "OUT_LEFT_2");
                break;
            case (byte) 0x02:
                response.put("PARAMETER_ID", "OUT_RIGHT_1");
                break;
            case (byte) 0x03:
                response.put("PARAMETER_ID", "OUT_RIGHT_2");
                break;
            case (byte) 0x04:
                response.put("PARAMETER_ID", "IN_LEFT_1");
                break;
            case (byte) 0x05:
                response.put("PARAMETER_ID", "IN_LEFT_2");
                break;
            case (byte) 0x06:
                response.put("PARAMETER_ID", "IN_RIGHT_1");
                break;
            case (byte) 0x07:
                response.put("PARAMETER_ID", "IN_RIGHT_2");
                break;
            case (byte) 0x08:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_1");
                break;
            case (byte) 0x09:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_2");
                break;
            case (byte) 0x0A:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x0B:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_2");
                break;
            case (byte) 0x0C:
                response.put("PARAMETER_ID", "OUT_BOTTOM_1");
                break;
            case (byte) 0x0D:
                response.put("PARAMETER_ID", "OUT_BOTTOM_2");
                break;
            case (byte) 0x0E:
                response.put("PARAMETER_ID", "OUT_TOP_1");
                break;
            case (byte) 0x0F:
                response.put("PARAMETER_ID", "OUT_TOP_2");
                break;
            case (byte) 0x10:
                response.put("PARAMETER_ID", "IN_BOTTOM_1");
                break;
            case (byte) 0x11:
                response.put("PARAMETER_ID", "IN_BOTTOM_2");
                break;
            case (byte) 0x12:
                response.put("PARAMETER_ID", "IN_TOP_2");
                break;
            case (byte) 0x13:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_1");
                break;
            case (byte) 0x14:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_2");
                break;
            case (byte) 0x15:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x16:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_2");
                break;
            default:
                logger.debug("Unknown value {} for constant 'PARAMETER_ID'", String.format("%02X", payload[2]));
                response.put("PARAMETER_ID", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Process 'Current Value'
        response.put("CURRENT_VALUE", new Integer(payload[3]));

        // Process 'Target Value'
        response.put("TARGET_VALUE", new Integer(payload[4]));

        // Process 'Duration'
        response.put("DURATION", new Integer(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_SET command.<br>
     *
     * Window Covering Set<br>
     *
     *
     * @param parameterCount {@link Integer}
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringSet(Integer parameterCount, Integer duration) {
        logger.debug("Creating command message WINDOW_COVERING_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_SET);

        // Process 'Properties1'
        outputData.write(parameterCount & 0x1F);

        // Process 'vg1'

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_SET command<br>
     *
     * Window Covering Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_COUNT {@link Integer}
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("PARAMETER_COUNT", new Integer(payload[2] & 0x1F));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 3;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Parameter ID'
            switch ((int) payload[3]) {
                case (byte) 0x00:
                    variant.put("PARAMETER_ID", "OUT_LEFT_1");
                    break;
                case (byte) 0x01:
                    variant.put("PARAMETER_ID", "OUT_LEFT_2");
                    break;
                case (byte) 0x02:
                    variant.put("PARAMETER_ID", "OUT_RIGHT_1");
                    break;
                case (byte) 0x03:
                    variant.put("PARAMETER_ID", "OUT_RIGHT_2");
                    break;
                case (byte) 0x04:
                    variant.put("PARAMETER_ID", "IN_LEFT_1");
                    break;
                case (byte) 0x05:
                    variant.put("PARAMETER_ID", "IN_LEFT_2");
                    break;
                case (byte) 0x06:
                    variant.put("PARAMETER_ID", "IN_RIGHT_1");
                    break;
                case (byte) 0x07:
                    variant.put("PARAMETER_ID", "IN_RIGHT_2");
                    break;
                case (byte) 0x08:
                    variant.put("PARAMETER_ID", "IN_RIGHT_LEFT_1");
                    break;
                case (byte) 0x09:
                    variant.put("PARAMETER_ID", "IN_RIGHT_LEFT_2");
                    break;
                case (byte) 0x0A:
                    variant.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_1");
                    break;
                case (byte) 0x0B:
                    variant.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_2");
                    break;
                case (byte) 0x0C:
                    variant.put("PARAMETER_ID", "OUT_BOTTOM_1");
                    break;
                case (byte) 0x0D:
                    variant.put("PARAMETER_ID", "OUT_BOTTOM_2");
                    break;
                case (byte) 0x0E:
                    variant.put("PARAMETER_ID", "OUT_TOP_1");
                    break;
                case (byte) 0x0F:
                    variant.put("PARAMETER_ID", "OUT_TOP_2");
                    break;
                case (byte) 0x10:
                    variant.put("PARAMETER_ID", "IN_BOTTOM_1");
                    break;
                case (byte) 0x11:
                    variant.put("PARAMETER_ID", "IN_BOTTOM_2");
                    break;
                case (byte) 0x12:
                    variant.put("PARAMETER_ID", "IN_TOP_2");
                    break;
                case (byte) 0x13:
                    variant.put("PARAMETER_ID", "IN_TOP_BOTTOM_1");
                    break;
                case (byte) 0x14:
                    variant.put("PARAMETER_ID", "IN_TOP_BOTTOM_2");
                    break;
                case (byte) 0x15:
                    variant.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_1");
                    break;
                case (byte) 0x16:
                    variant.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_2");
                    break;
                default:
                    logger.debug("Unknown value {} for constant 'PARAMETER_ID'", String.format("%02X", payload[3]));
                    variant.put("PARAMETER_ID", "UNKNOWN_" + String.format("%02X", payload[3]));
                    break;
            }

            // Process 'Value'
            variant.put("VALUE", new Integer(payload[4]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 0] & 0x1F) >> 0;
        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Process 'Duration'
        response.put("DURATION", new Integer(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_START_LEVEL_CHANGE command.<br>
     *
     * Window Covering Start Level Change<br>
     *
     *
     * @param res1 {@link Integer}
     * @param upDown {@link Boolean}
     * @param res2 {@link Boolean}
     * @param parameterId {@link String}
     * @param duration {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringStartLevelChange(Integer res1, Boolean upDown, Boolean res2,
            String parameterId, Integer duration) {
        logger.debug("Creating command message WINDOW_COVERING_START_LEVEL_CHANGE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_START_LEVEL_CHANGE);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= res1 & 0x3F;
        valProperties1 |= upDown ? 0x40 : 0;
        valProperties1 |= res2 ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Parameter ID'
        switch (parameterId) {
            case "OUT_LEFT_1":
                outputData.write(0x00);
                break;
            case "OUT_LEFT_2":
                outputData.write(0x01);
                break;
            case "OUT_RIGHT_1":
                outputData.write(0x02);
                break;
            case "OUT_RIGHT_2":
                outputData.write(0x03);
                break;
            case "IN_LEFT_1":
                outputData.write(0x04);
                break;
            case "IN_LEFT_2":
                outputData.write(0x05);
                break;
            case "IN_RIGHT_1":
                outputData.write(0x06);
                break;
            case "IN_RIGHT_2":
                outputData.write(0x07);
                break;
            case "IN_RIGHT_LEFT_1":
                outputData.write(0x08);
                break;
            case "IN_RIGHT_LEFT_2":
                outputData.write(0x09);
                break;
            case "VERTICAL_SLATS_ANGLE_1":
                outputData.write(0x0A);
                break;
            case "VERTICAL_SLATS_ANGLE_2":
                outputData.write(0x0B);
                break;
            case "OUT_BOTTOM_1":
                outputData.write(0x0C);
                break;
            case "OUT_BOTTOM_2":
                outputData.write(0x0D);
                break;
            case "OUT_TOP_1":
                outputData.write(0x0E);
                break;
            case "OUT_TOP_2":
                outputData.write(0x0F);
                break;
            case "IN_BOTTOM_1":
                outputData.write(0x10);
                break;
            case "IN_BOTTOM_2":
                outputData.write(0x11);
                break;
            case "IN_TOP_1":
                outputData.write(0x0B);
                break;
            case "IN_TOP_2":
                outputData.write(0x12);
                break;
            case "IN_TOP_BOTTOM_1":
                outputData.write(0x13);
                break;
            case "IN_TOP_BOTTOM_2":
                outputData.write(0x14);
                break;
            case "HORIZONTAL_SLATS_ANGLE_1":
                outputData.write(0x15);
                break;
            case "HORIZONTAL_SLATS_ANGLE_2":
                outputData.write(0x16);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for parameterId: " + parameterId);
        }

        // Process 'Duration'
        outputData.write(duration);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_START_LEVEL_CHANGE command<br>
     *
     * Window Covering Start Level Change<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>RES1 {@link Integer}
     * <li>UP_DOWN {@link Boolean}
     * <li>RES2 {@link Boolean}
     * <li>PARAMETER_ID {@link String}
     * <li>DURATION {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringStartLevelChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Properties1'
        response.put("RES1", new Integer(payload[2] & 0x3F));
        response.put("UP_DOWN", new Boolean((payload[2] & 0x40) != 0));
        response.put("RES2", new Boolean((payload[2] & 0x80) != 0));

        // Process 'Parameter ID'
        switch ((int) payload[3]) {
            case (byte) 0x00:
                response.put("PARAMETER_ID", "OUT_LEFT_1");
                break;
            case (byte) 0x01:
                response.put("PARAMETER_ID", "OUT_LEFT_2");
                break;
            case (byte) 0x02:
                response.put("PARAMETER_ID", "OUT_RIGHT_1");
                break;
            case (byte) 0x03:
                response.put("PARAMETER_ID", "OUT_RIGHT_2");
                break;
            case (byte) 0x04:
                response.put("PARAMETER_ID", "IN_LEFT_1");
                break;
            case (byte) 0x05:
                response.put("PARAMETER_ID", "IN_LEFT_2");
                break;
            case (byte) 0x06:
                response.put("PARAMETER_ID", "IN_RIGHT_1");
                break;
            case (byte) 0x07:
                response.put("PARAMETER_ID", "IN_RIGHT_2");
                break;
            case (byte) 0x08:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_1");
                break;
            case (byte) 0x09:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_2");
                break;
            case (byte) 0x0A:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x0B:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_2");
                break;
            case (byte) 0x0C:
                response.put("PARAMETER_ID", "OUT_BOTTOM_1");
                break;
            case (byte) 0x0D:
                response.put("PARAMETER_ID", "OUT_BOTTOM_2");
                break;
            case (byte) 0x0E:
                response.put("PARAMETER_ID", "OUT_TOP_1");
                break;
            case (byte) 0x0F:
                response.put("PARAMETER_ID", "OUT_TOP_2");
                break;
            case (byte) 0x10:
                response.put("PARAMETER_ID", "IN_BOTTOM_1");
                break;
            case (byte) 0x11:
                response.put("PARAMETER_ID", "IN_BOTTOM_2");
                break;
            case (byte) 0x12:
                response.put("PARAMETER_ID", "IN_TOP_2");
                break;
            case (byte) 0x13:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_1");
                break;
            case (byte) 0x14:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_2");
                break;
            case (byte) 0x15:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x16:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_2");
                break;
            default:
                logger.debug("Unknown value {} for constant 'PARAMETER_ID'", String.format("%02X", payload[3]));
                response.put("PARAMETER_ID", "UNKNOWN_" + String.format("%02X", payload[3]));
                break;
        }

        // Process 'Duration'
        response.put("DURATION", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the WINDOW_COVERING_STOP_LEVEL_CHANGE command.<br>
     *
     * Window Covering Stop Level Change<br>
     *
     *
     * @param parameterId {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getWindowCoveringStopLevelChange(String parameterId) {
        logger.debug("Creating command message WINDOW_COVERING_STOP_LEVEL_CHANGE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(WINDOW_COVERING_STOP_LEVEL_CHANGE);

        // Process 'Parameter ID'
        switch (parameterId) {
            case "OUT_LEFT_1":
                outputData.write(0x00);
                break;
            case "OUT_LEFT_2":
                outputData.write(0x01);
                break;
            case "OUT_RIGHT_1":
                outputData.write(0x02);
                break;
            case "OUT_RIGHT_2":
                outputData.write(0x03);
                break;
            case "IN_LEFT_1":
                outputData.write(0x04);
                break;
            case "IN_LEFT_2":
                outputData.write(0x05);
                break;
            case "IN_RIGHT_1":
                outputData.write(0x06);
                break;
            case "IN_RIGHT_2":
                outputData.write(0x07);
                break;
            case "IN_RIGHT_LEFT_1":
                outputData.write(0x08);
                break;
            case "IN_RIGHT_LEFT_2":
                outputData.write(0x09);
                break;
            case "VERTICAL_SLATS_ANGLE_1":
                outputData.write(0x0A);
                break;
            case "VERTICAL_SLATS_ANGLE_2":
                outputData.write(0x0B);
                break;
            case "OUT_BOTTOM_1":
                outputData.write(0x0C);
                break;
            case "OUT_BOTTOM_2":
                outputData.write(0x0D);
                break;
            case "OUT_TOP_1":
                outputData.write(0x0E);
                break;
            case "OUT_TOP_2":
                outputData.write(0x0F);
                break;
            case "IN_BOTTOM_1":
                outputData.write(0x10);
                break;
            case "IN_BOTTOM_2":
                outputData.write(0x11);
                break;
            case "IN_TOP_1":
                outputData.write(0x0B);
                break;
            case "IN_TOP_2":
                outputData.write(0x12);
                break;
            case "IN_TOP_BOTTOM_1":
                outputData.write(0x13);
                break;
            case "IN_TOP_BOTTOM_2":
                outputData.write(0x14);
                break;
            case "HORIZONTAL_SLATS_ANGLE_1":
                outputData.write(0x15);
                break;
            case "HORIZONTAL_SLATS_ANGLE_2":
                outputData.write(0x16);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for parameterId: " + parameterId);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the WINDOW_COVERING_STOP_LEVEL_CHANGE command<br>
     *
     * Window Covering Stop Level Change<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_ID {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleWindowCoveringStopLevelChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter ID'
        switch ((int) payload[2]) {
            case (byte) 0x00:
                response.put("PARAMETER_ID", "OUT_LEFT_1");
                break;
            case (byte) 0x01:
                response.put("PARAMETER_ID", "OUT_LEFT_2");
                break;
            case (byte) 0x02:
                response.put("PARAMETER_ID", "OUT_RIGHT_1");
                break;
            case (byte) 0x03:
                response.put("PARAMETER_ID", "OUT_RIGHT_2");
                break;
            case (byte) 0x04:
                response.put("PARAMETER_ID", "IN_LEFT_1");
                break;
            case (byte) 0x05:
                response.put("PARAMETER_ID", "IN_LEFT_2");
                break;
            case (byte) 0x06:
                response.put("PARAMETER_ID", "IN_RIGHT_1");
                break;
            case (byte) 0x07:
                response.put("PARAMETER_ID", "IN_RIGHT_2");
                break;
            case (byte) 0x08:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_1");
                break;
            case (byte) 0x09:
                response.put("PARAMETER_ID", "IN_RIGHT_LEFT_2");
                break;
            case (byte) 0x0A:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x0B:
                response.put("PARAMETER_ID", "VERTICAL_SLATS_ANGLE_2");
                break;
            case (byte) 0x0C:
                response.put("PARAMETER_ID", "OUT_BOTTOM_1");
                break;
            case (byte) 0x0D:
                response.put("PARAMETER_ID", "OUT_BOTTOM_2");
                break;
            case (byte) 0x0E:
                response.put("PARAMETER_ID", "OUT_TOP_1");
                break;
            case (byte) 0x0F:
                response.put("PARAMETER_ID", "OUT_TOP_2");
                break;
            case (byte) 0x10:
                response.put("PARAMETER_ID", "IN_BOTTOM_1");
                break;
            case (byte) 0x11:
                response.put("PARAMETER_ID", "IN_BOTTOM_2");
                break;
            case (byte) 0x12:
                response.put("PARAMETER_ID", "IN_TOP_2");
                break;
            case (byte) 0x13:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_1");
                break;
            case (byte) 0x14:
                response.put("PARAMETER_ID", "IN_TOP_BOTTOM_2");
                break;
            case (byte) 0x15:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_1");
                break;
            case (byte) 0x16:
                response.put("PARAMETER_ID", "HORIZONTAL_SLATS_ANGLE_2");
                break;
            default:
                logger.debug("Unknown value {} for constant 'PARAMETER_ID'", String.format("%02X", payload[2]));
                response.put("PARAMETER_ID", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Return the map of processed response data;
        return response;
    }

}
