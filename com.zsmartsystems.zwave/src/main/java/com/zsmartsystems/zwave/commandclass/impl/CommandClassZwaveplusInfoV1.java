/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_ZWAVEPLUS_INFO</b> version <b>1</b>.
 * <p>
 * Command Class Z-Wave+ Info
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassZwaveplusInfoV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassZwaveplusInfoV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_ZWAVEPLUS_INFO
     */
    public final static int COMMAND_CLASS_KEY = 0x5E;

    /**
     * Z-Wave+ Info Get Command Constant
     */
    public final static int ZWAVEPLUS_INFO_GET = 0x01;
    /**
     * Z-Wave+ Info Report Command Constant
     */
    public final static int ZWAVEPLUS_INFO_REPORT = 0x02;


    /**
     * Map holding constants for Role Type
     */
    private static Map<Integer, String> constantRoleType = new HashMap<Integer, String>();

    /**
     * Map holding constants for Node Type
     */
    private static Map<Integer, String> constantNodeType = new HashMap<Integer, String>();
    static {

        // Constants for Role Type
        constantRoleType.put(0x00, "ROLE_TYPE_CONTROLLER_CENTRAL_STATIC");
        constantRoleType.put(0x01, "ROLE_TYPE_CONTROLLER_SUB_STATIC");
        constantRoleType.put(0x02, "ROLE_TYPE_CONTROLLER_PORTABLE");
        constantRoleType.put(0x03, "ROLE_TYPE_CONTROLLER_PORTABLE_REPORTING");
        constantRoleType.put(0x04, "ROLE_TYPE_SLAVE_PORTABLE");
        constantRoleType.put(0x05, "ROLE_TYPE_SLAVE_ALWAYS_ON");
        constantRoleType.put(0x06, "ROLE_TYPE_SLAVE_SLEEPING_REPORTING");
        constantRoleType.put(0x07, "ROLE_TYPE_SLAVE_SLEEPING_LISTENING");

        // Constants for Node Type
        constantNodeType.put(0x00, "NODE_TYPE_ZWAVEPLUS_NODE");
        constantNodeType.put(0x01, "NODE_TYPE_ZWAVEPLUS_FOR_IP_ROUTER");
        constantNodeType.put(0x02, "NODE_TYPE_ZWAVEPLUS_FOR_IP_GATEWAY");
        constantNodeType.put(0x03, "NODE_TYPE_ZWAVEPLUS_FOR_IP_CLIENT_IP_NODE");
        constantNodeType.put(0x04, "NODE_TYPE_ZWAVEPLUS_FOR_IP_CLIENT_ZWAVE_NODE");
    }

    /**
     * Creates a new message with the ZWAVEPLUS_INFO_GET command.
     * <p>
     * Z-Wave+ Info Get
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getZwaveplusInfoGet() {
        logger.debug("Creating command message ZWAVEPLUS_INFO_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ZWAVEPLUS_INFO_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ZWAVEPLUS_INFO_GET command.
     * <p>
     * Z-Wave+ Info Get
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleZwaveplusInfoGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the ZWAVEPLUS_INFO_REPORT command.
     * <p>
     * Z-Wave+ Info Report
     *
     * @param zWavePlusVersion {@link Integer}
     * @param roleType {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>ROLE_TYPE_CONTROLLER_CENTRAL_STATIC
     *            <li>ROLE_TYPE_CONTROLLER_SUB_STATIC
     *            <li>ROLE_TYPE_CONTROLLER_PORTABLE
     *            <li>ROLE_TYPE_CONTROLLER_PORTABLE_REPORTING
     *            <li>ROLE_TYPE_SLAVE_PORTABLE
     *            <li>ROLE_TYPE_SLAVE_ALWAYS_ON
     *            <li>ROLE_TYPE_SLAVE_SLEEPING_REPORTING
     *            <li>ROLE_TYPE_SLAVE_SLEEPING_LISTENING
     *            </ul>
     * @param nodeType {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>NODE_TYPE_ZWAVEPLUS_NODE
     *            <li>NODE_TYPE_ZWAVEPLUS_FOR_IP_ROUTER
     *            <li>NODE_TYPE_ZWAVEPLUS_FOR_IP_GATEWAY
     *            <li>NODE_TYPE_ZWAVEPLUS_FOR_IP_CLIENT_IP_NODE
     *            <li>NODE_TYPE_ZWAVEPLUS_FOR_IP_CLIENT_ZWAVE_NODE
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getZwaveplusInfoReport(Integer zWavePlusVersion, String roleType, String nodeType) {
        logger.debug("Creating command message ZWAVEPLUS_INFO_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ZWAVEPLUS_INFO_REPORT);

        // Process 'Z-Wave+ Version'
        outputData.write(zWavePlusVersion);

        // Process 'Role Type'
        boolean foundRoleType = false;
        for (Integer entry : constantRoleType.keySet()) {
            if (constantRoleType.get(entry).equals(roleType)) {
                outputData.write(entry);
                foundRoleType = true;
                break;
            }
        }
        if (!foundRoleType) {
            throw new IllegalArgumentException("Unknown constant value '" + roleType + "' for roleType");
        }

        // Process 'Node Type'
        boolean foundNodeType = false;
        for (Integer entry : constantNodeType.keySet()) {
            if (constantNodeType.get(entry).equals(nodeType)) {
                outputData.write(entry);
                foundNodeType = true;
                break;
            }
        }
        if (!foundNodeType) {
            throw new IllegalArgumentException("Unknown constant value '" + nodeType + "' for nodeType");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ZWAVEPLUS_INFO_REPORT command.
     * <p>
     * Z-Wave+ Info Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>Z_WAVE_PLUS_VERSION {@link Integer}
     * <li>ROLE_TYPE {@link String}
     * <li>NODE_TYPE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleZwaveplusInfoReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Z-Wave+ Version'
        response.put("Z_WAVE_PLUS_VERSION", Integer.valueOf(payload[2]));

        // Process 'Role Type'
        response.put("ROLE_TYPE", constantRoleType.get(payload[3] & 0xff));

        // Process 'Node Type'
        response.put("NODE_TYPE", constantNodeType.get(payload[4] & 0xff));

        // Return the map of processed response data;
        return response;
    }

}
