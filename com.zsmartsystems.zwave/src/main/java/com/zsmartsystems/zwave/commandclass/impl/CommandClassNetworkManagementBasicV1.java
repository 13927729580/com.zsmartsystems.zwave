/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC</b> version <b>1</b>.
 * <p>
 * Command Class Network Management Basic
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementBasicV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementBasicV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_BASIC
     */
    public final static int COMMAND_CLASS_KEY = 0x4D;

    /**
     * Learn Mode Set Command Constant
     */
    public final static int LEARN_MODE_SET = 0x01;
    /**
     * Learn Mode Set Status Command Constant
     */
    public final static int LEARN_MODE_SET_STATUS = 0x02;
    /**
     * Network Update Request Command Constant
     */
    public final static int NETWORK_UPDATE_REQUEST = 0x03;
    /**
     * Network Update Request Status Command Constant
     */
    public final static int NETWORK_UPDATE_REQUEST_STATUS = 0x04;
    /**
     * Node Information Send Command Constant
     */
    public final static int NODE_INFORMATION_SEND = 0x05;
    /**
     * Default Set Command Constant
     */
    public final static int DEFAULT_SET = 0x06;
    /**
     * Default Set Complete Command Constant
     */
    public final static int DEFAULT_SET_COMPLETE = 0x07;


    /**
     * Map holding constants for Status
     */
    private static Map<Integer, String> constantStatus = new HashMap<Integer, String>();

    /**
     * Map holding constants for tx Options
     */
    private static Map<Integer, String> constantTxOptions = new HashMap<Integer, String>();

    /**
     * Map holding constants for Mode
     */
    private static Map<Integer, String> constantMode = new HashMap<Integer, String>();
    static {

        // Constants for Status
        constantStatus.put(0x01, "LEARN_MODE_FAILED_TIMEOUT");
        constantStatus.put(0x06, "LEARN_MODE_DONE");
        constantStatus.put(0x07, "LEARN_MODE_FAILED");
        constantStatus.put(0x09, "LEARN_MODE_SECURITY_FAILED");

        // Constants for tx Options
        constantTxOptions.put(0x10, "NO_ROUTE");
        constantTxOptions.put(0x01, "ACK");
        constantTxOptions.put(0x20, "EXPLORE");
        constantTxOptions.put(0x02, "LOW_POWER");
        constantTxOptions.put(0x40, "NO_RETRANSMISSION");
        constantTxOptions.put(0x04, "AUTO_ROUTE");
        constantTxOptions.put(0x80, "HIGH_POWER");

        // Constants for Mode
        constantMode.put(0x00, "LEARN_MODE_SET_DISABLE");
        constantMode.put(0x01, "LEARN_MODE_SET_CLASSIC");
        constantMode.put(0x02, "LEARN_MODE_SET_NWI");
    }

    /**
     * Creates a new message with the LEARN_MODE_SET command.
     * <p>
     * Learn Mode Set
     *
     * @param seqNo {@link Integer}
     * @param mode {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLearnModeSet(Integer seqNo, String mode) {
        logger.debug("Creating command message LEARN_MODE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LEARN_MODE_SET);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        // Process 'Mode'
        boolean foundMode = false;
        for (Integer entry : constantMode.keySet()) {
            if (constantMode.get(entry).equals(mode)) {
                outputData.write(entry);
                foundMode = true;
                break;
            }
        }
        if (!foundMode) {
            throw new IllegalArgumentException("Unknown constant value '" + mode + "' for mode");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the LEARN_MODE_SET command.
     * <p>
     * Learn Mode Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MODE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleLearnModeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Mode'
        response.put("MODE", constantMode.get(payload[4] & 0xff));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the LEARN_MODE_SET_STATUS command.
     * <p>
     * Learn Mode Set Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     * @param newNodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLearnModeSetStatus(Integer seqNo, String status, Integer newNodeId) {
        logger.debug("Creating command message LEARN_MODE_SET_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LEARN_MODE_SET_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantStatus.keySet()) {
            if (constantStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        // Process 'Reserved'
        // Process 'New Node ID'
        // Check the node number boundary
        if (newNodeId < 1 || newNodeId > 232) {
            logger.debug("Node number is out of bounds {}", newNodeId);
            return null;
        }
        outputData.write(newNodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the LEARN_MODE_SET_STATUS command.
     * <p>
     * Learn Mode Set Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * <li>NEW_NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleLearnModeSetStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantStatus.get(payload[3] & 0xff));

        // Process 'New Node ID'
        response.put("NEW_NODE_ID", Integer.valueOf(payload[5]));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the NETWORK_UPDATE_REQUEST command.
     * <p>
     * Network Update Request
     *
     * @param seqNo {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNetworkUpdateRequest(Integer seqNo) {
        logger.debug("Creating command message NETWORK_UPDATE_REQUEST version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NETWORK_UPDATE_REQUEST);

        // Process 'Seq. No'
        outputData.write(seqNo);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NETWORK_UPDATE_REQUEST command.
     * <p>
     * Network Update Request
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNetworkUpdateRequest(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the NETWORK_UPDATE_REQUEST_STATUS command.
     * <p>
     * Network Update Request Status
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNetworkUpdateRequestStatus(Integer seqNo, String status) {
        logger.debug("Creating command message NETWORK_UPDATE_REQUEST_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NETWORK_UPDATE_REQUEST_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantStatus.keySet()) {
            if (constantStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NETWORK_UPDATE_REQUEST_STATUS command.
     * <p>
     * Network Update Request Status
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNetworkUpdateRequestStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantStatus.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the NODE_INFORMATION_SEND command.
     * <p>
     * Node Information Send
     *
     * @param seqNo {@link Integer}
     * @param destinationNodeId {@link Integer}
     * @param txOptions {@link List<String>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeInformationSend(Integer seqNo, Integer destinationNodeId, List<String> txOptions) {
        logger.debug("Creating command message NODE_INFORMATION_SEND version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_INFORMATION_SEND);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        // Process 'Destination Node ID'
        // Check the node number boundary
        if (destinationNodeId < 1 || destinationNodeId > 232) {
            logger.debug("Node number is out of bounds {}", destinationNodeId);
            return null;
        }
        outputData.write(destinationNodeId);

        // Process 'tx Options'
        int valTxOptions = 0;
        valTxOptions |= (txOptions.contains("ACK") ? 0x02 : 0);
        valTxOptions |= (txOptions.contains("LOW_POWER") ? 0x04 : 0);
        valTxOptions |= (txOptions.contains("AUTO_ROUTE") ? 0x10 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_ROUTE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("EXPLORE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_RETRANSMISSION") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("HIGH_POWER") ? 0x01 : 0);
        outputData.write(valTxOptions);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_INFORMATION_SEND command.
     * <p>
     * Node Information Send
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>DESTINATION_NODE_ID {@link Integer}
     * <li>TX_OPTIONS {@link List}<{@link String}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeInformationSend(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Destination Node ID'
        response.put("DESTINATION_NODE_ID", Integer.valueOf(payload[4]));

        // Process 'tx Options'
        List<String> responseTxOptions = new ArrayList<String>();
        int lenTxOptions = 1;
        for (int cntTxOptions = 0; cntTxOptions < lenTxOptions; cntTxOptions++) {
            if ((payload[5 + (cntTxOptions / 8)] & (1 << cntTxOptions % 8)) == 0) {
                continue;
            }
            responseTxOptions.add(constantTxOptions.get(cntTxOptions));
        }
        response.put("TX_OPTIONS", responseTxOptions);

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the DEFAULT_SET command.
     * <p>
     * Default Set
     *
     * @param seqNo {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDefaultSet(Integer seqNo) {
        logger.debug("Creating command message DEFAULT_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DEFAULT_SET);

        // Process 'Seq. No'
        outputData.write(seqNo);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DEFAULT_SET command.
     * <p>
     * Default Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDefaultSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the DEFAULT_SET_COMPLETE command.
     * <p>
     * Default Set Complete
     *
     * @param seqNo {@link Integer}
     * @param status {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getDefaultSetComplete(Integer seqNo, String status) {
        logger.debug("Creating command message DEFAULT_SET_COMPLETE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(DEFAULT_SET_COMPLETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        boolean foundStatus = false;
        for (Integer entry : constantStatus.keySet()) {
            if (constantStatus.get(entry).equals(status)) {
                outputData.write(entry);
                foundStatus = true;
                break;
            }
        }
        if (!foundStatus) {
            throw new IllegalArgumentException("Unknown constant value '" + status + "' for status");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the DEFAULT_SET_COMPLETE command.
     * <p>
     * Default Set Complete
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleDefaultSetComplete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Status'
        response.put("STATUS", constantStatus.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

}
