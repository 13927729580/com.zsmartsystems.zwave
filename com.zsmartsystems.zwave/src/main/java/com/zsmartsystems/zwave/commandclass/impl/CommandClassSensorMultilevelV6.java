/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SENSOR_MULTILEVEL</b> version <b>6</b>.<br>
 *
 * Command Class Sensor Multilevel<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSensorMultilevelV6 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSensorMultilevelV6.class);

    /**
     * Integer command class key for COMMAND_CLASS_SENSOR_MULTILEVEL
     */
    public final static int COMMAND_CLASS_KEY = 0x31;

    /**
     * Multilevel Sensor Get Supported Sensor Command Constant
     */
    public final static int SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR = 0x01;
    /**
     * Multilevel Sensor Supported Sensor Report Command Constant
     */
    public final static int SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT = 0x02;
    /**
     * Multilevel Sensor Get Supported Scale Command Constant
     */
    public final static int SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE = 0x03;
    /**
     * Multilevel Sensor Get Command Constant
     */
    public final static int SENSOR_MULTILEVEL_GET = 0x04;
    /**
     * Multilevel Sensor Report Command Constant
     */
    public final static int SENSOR_MULTILEVEL_REPORT = 0x05;
    /**
     * Multilevel Sensor Supported Scale Report Command Constant
     */
    public final static int SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT = 0x06;

    /**
     * Creates a new message with the SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR command.<br>
     *
     * Multilevel Sensor Get Supported Sensor<br>
     *
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorMultilevelSupportedGetSensor() {
        logger.debug("Creating command message SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR version 6");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR command<br>
     *
     * Multilevel Sensor Get Supported Sensor<br>
     *
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorMultilevelSupportedGetSensor(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT command.<br>
     *
     * Multilevel Sensor Supported Sensor Report<br>
     *
     *
     * @param bitMask {@link List<String>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorMultilevelSupportedSensorReport(List<String> bitMask) {
        logger.debug("Creating command message SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT version 6");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT);

        // Process 'Bit Mask'
        int valBitMask = 0;
        valBitMask |= (bitMask.contains("AIR_TEMPERATURE") ? 0x02 : 0);
        valBitMask |= (bitMask.contains("GENERAL_PURPOSE_VALUE") ? 0x04 : 0);
        valBitMask |= (bitMask.contains("LUMINANCE") ? 0x08 : 0);
        valBitMask |= (bitMask.contains("POWER") ? 0x10 : 0);
        valBitMask |= (bitMask.contains("HUMIDITY") ? 0x20 : 0);
        valBitMask |= (bitMask.contains("VELOCITY") ? 0x40 : 0);
        valBitMask |= (bitMask.contains("DIRECTION") ? 0x80 : 0);
        outputData.write(valBitMask);
        valBitMask = 0;
        valBitMask |= (bitMask.contains("ATMOSPHERIC_PRESSURE") ? 0x01 : 0);
        valBitMask |= (bitMask.contains("BAROMETRIC_PRESSURE") ? 0x02 : 0);
        valBitMask |= (bitMask.contains("SOLAR_RADIATION") ? 0x04 : 0);
        valBitMask |= (bitMask.contains("DEW_POINT") ? 0x08 : 0);
        valBitMask |= (bitMask.contains("RAIN_RATE") ? 0x10 : 0);
        valBitMask |= (bitMask.contains("TIDE_LEVEL") ? 0x20 : 0);
        valBitMask |= (bitMask.contains("WEIGHT") ? 0x40 : 0);
        valBitMask |= (bitMask.contains("VOLTAGE") ? 0x80 : 0);
        outputData.write(valBitMask);
        valBitMask = 0;
        valBitMask |= (bitMask.contains("CURRENT") ? 0x01 : 0);
        valBitMask |= (bitMask.contains("CO2_LEVEL") ? 0x02 : 0);
        valBitMask |= (bitMask.contains("AIR_FLOW") ? 0x04 : 0);
        valBitMask |= (bitMask.contains("TANK_CAPACITY") ? 0x08 : 0);
        valBitMask |= (bitMask.contains("DISTANCE") ? 0x10 : 0);
        valBitMask |= (bitMask.contains("ANGLE_POSITION") ? 0x20 : 0);
        valBitMask |= (bitMask.contains("ROTATION") ? 0x40 : 0);
        valBitMask |= (bitMask.contains("WATER_TEMPERATURE") ? 0x80 : 0);
        outputData.write(valBitMask);
        valBitMask = 0;
        valBitMask |= (bitMask.contains("SOIL_TEMPERATURE") ? 0x01 : 0);
        valBitMask |= (bitMask.contains("SEISMIC_INTENSITY") ? 0x02 : 0);
        valBitMask |= (bitMask.contains("SEISMIC_MAGNITUDE") ? 0x04 : 0);
        valBitMask |= (bitMask.contains("ULTRAVIOLET") ? 0x08 : 0);
        valBitMask |= (bitMask.contains("ELECTRICAL_RESISTIVITY") ? 0x10 : 0);
        valBitMask |= (bitMask.contains("ELECTRICAL_CONDUCTIVITY") ? 0x20 : 0);
        valBitMask |= (bitMask.contains("LOUDNESS") ? 0x40 : 0);
        valBitMask |= (bitMask.contains("MOISTURE") ? 0x80 : 0);
        outputData.write(valBitMask);
        valBitMask = 0;
        valBitMask |= (bitMask.contains("FREQUENCY") ? 0x01 : 0);
        valBitMask |= (bitMask.contains("TIME") ? 0x02 : 0);
        valBitMask |= (bitMask.contains("TARGET_TEMPERATURE") ? 0x04 : 0);
        outputData.write(valBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT command<br>
     *
     * Multilevel Sensor Supported Sensor Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>BIT_MASK {@link List}<{@link String}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorMultilevelSupportedSensorReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Bit Mask'
        List<String> responseBitMask = new ArrayList<String>();
        int cntBitMask = 0;
        while (cntBitMask < payload.length - 2) {
            if ((payload[2 + (cntBitMask / 8)] & cntBitMask % 8) == 0) {
                continue;
            }
            switch (cntBitMask) {
                case 0x01:
                    responseBitMask.add("AIR_TEMPERATURE");
                    break;
                case 0x02:
                    responseBitMask.add("GENERAL_PURPOSE_VALUE");
                    break;
                case 0x03:
                    responseBitMask.add("LUMINANCE");
                    break;
                case 0x04:
                    responseBitMask.add("POWER");
                    break;
                case 0x05:
                    responseBitMask.add("HUMIDITY");
                    break;
                case 0x06:
                    responseBitMask.add("VELOCITY");
                    break;
                case 0x07:
                    responseBitMask.add("DIRECTION");
                    break;
                case 0x08:
                    responseBitMask.add("ATMOSPHERIC_PRESSURE");
                    break;
                case 0x09:
                    responseBitMask.add("BAROMETRIC_PRESSURE");
                    break;
                case 0x0A:
                    responseBitMask.add("SOLAR_RADIATION");
                    break;
                case 0x0B:
                    responseBitMask.add("DEW_POINT");
                    break;
                case 0x0C:
                    responseBitMask.add("RAIN_RATE");
                    break;
                case 0x0D:
                    responseBitMask.add("TIDE_LEVEL");
                    break;
                case 0x0E:
                    responseBitMask.add("WEIGHT");
                    break;
                case 0x0F:
                    responseBitMask.add("VOLTAGE");
                    break;
                case 0x10:
                    responseBitMask.add("CURRENT");
                    break;
                case 0x11:
                    responseBitMask.add("CO2_LEVEL");
                    break;
                case 0x12:
                    responseBitMask.add("AIR_FLOW");
                    break;
                case 0x13:
                    responseBitMask.add("TANK_CAPACITY");
                    break;
                case 0x14:
                    responseBitMask.add("DISTANCE");
                    break;
                case 0x15:
                    responseBitMask.add("ANGLE_POSITION");
                    break;
                case 0x16:
                    responseBitMask.add("ROTATION");
                    break;
                case 0x17:
                    responseBitMask.add("WATER_TEMPERATURE");
                    break;
                case 0x18:
                    responseBitMask.add("SOIL_TEMPERATURE");
                    break;
                case 0x19:
                    responseBitMask.add("SEISMIC_INTENSITY");
                    break;
                case 0x1A:
                    responseBitMask.add("SEISMIC_MAGNITUDE");
                    break;
                case 0x1B:
                    responseBitMask.add("ULTRAVIOLET");
                    break;
                case 0x1C:
                    responseBitMask.add("ELECTRICAL_RESISTIVITY");
                    break;
                case 0x1D:
                    responseBitMask.add("ELECTRICAL_CONDUCTIVITY");
                    break;
                case 0x1E:
                    responseBitMask.add("LOUDNESS");
                    break;
                case 0x1F:
                    responseBitMask.add("MOISTURE");
                    break;
                case 0x20:
                    responseBitMask.add("FREQUENCY");
                    break;
                case 0x21:
                    responseBitMask.add("TIME");
                    break;
                case 0x22:
                    responseBitMask.add("TARGET_TEMPERATURE");
                    break;
                default:
                    responseBitMask.add("BITMASK_" + cntBitMask);
                    break;
            }
        }
        response.put("BIT_MASK", responseBitMask);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE command.<br>
     *
     * Multilevel Sensor Get Supported Scale<br>
     *
     *
     * @param sensorType {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorMultilevelSupportedGetScale(String sensorType) {
        logger.debug("Creating command message SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE version 6");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE);

        // Process 'Sensor Type'
        switch (sensorType) {
            case "TEMPERATURE":
                outputData.write(0x01);
                break;
            case "GENERAL_PURPOSE_VALUE":
                outputData.write(0x02);
                break;
            case "LUMINANCE":
                outputData.write(0x03);
                break;
            case "POWER":
                outputData.write(0x04);
                break;
            case "RELATIVE_HUMIDITY":
                outputData.write(0x05);
                break;
            case "VELOCITY":
                outputData.write(0x06);
                break;
            case "DIRECTION":
                outputData.write(0x07);
                break;
            case "ATMOSPHERIC_PRESSURE":
                outputData.write(0x08);
                break;
            case "BAROMETRIC_PRESSURE":
                outputData.write(0x09);
                break;
            case "SOLAR_RADIATION":
                outputData.write(0x0A);
                break;
            case "DEW_POINT":
                outputData.write(0x0B);
                break;
            case "RAIN_RATE":
                outputData.write(0x0C);
                break;
            case "TIDE_LEVEL":
                outputData.write(0x0D);
                break;
            case "WEIGHT":
                outputData.write(0x0E);
                break;
            case "VOLTAGE":
                outputData.write(0x0F);
                break;
            case "CURRENT":
                outputData.write(0x10);
                break;
            case "CO2_LEVEL":
                outputData.write(0x11);
                break;
            case "AIR_FLOW":
                outputData.write(0x12);
                break;
            case "TANK_CAPACITY":
                outputData.write(0x13);
                break;
            case "DISTANCE":
                outputData.write(0x14);
                break;
            case "ANGLE_POSITION":
                outputData.write(0x15);
                break;
            case "ROTATION":
                outputData.write(0x16);
                break;
            case "WATER_TEMPERATURE":
                outputData.write(0x17);
                break;
            case "SOIL_TEMPERATURE":
                outputData.write(0x18);
                break;
            case "SEISMIC_INTENSITY":
                outputData.write(0x19);
                break;
            case "SEISMIC_MAGNITUDE":
                outputData.write(0x1A);
                break;
            case "ULTRAVIOLET":
                outputData.write(0x1B);
                break;
            case "ELECTRICAL_RESISTIVITY":
                outputData.write(0x1C);
                break;
            case "ELECTRICAL_CONDUCTIVITY":
                outputData.write(0x1D);
                break;
            case "LOUDNESS":
                outputData.write(0x1E);
                break;
            case "MOISTURE":
                outputData.write(0x1F);
                break;
            case "FREQUENCY":
                outputData.write(0x20);
                break;
            case "TIME":
                outputData.write(0x21);
                break;
            case "TARGET_TEMPERATURE":
                outputData.write(0x22);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for sensorType: " + sensorType);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE command<br>
     *
     * Multilevel Sensor Get Supported Scale<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SENSOR_TYPE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorMultilevelSupportedGetScale(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sensor Type'
        switch ((int) payload[2]) {
            case (byte) 0x01:
                response.put("SENSOR_TYPE", "TEMPERATURE");
                break;
            case (byte) 0x02:
                response.put("SENSOR_TYPE", "GENERAL_PURPOSE_VALUE");
                break;
            case (byte) 0x03:
                response.put("SENSOR_TYPE", "LUMINANCE");
                break;
            case (byte) 0x04:
                response.put("SENSOR_TYPE", "POWER");
                break;
            case (byte) 0x05:
                response.put("SENSOR_TYPE", "RELATIVE_HUMIDITY");
                break;
            case (byte) 0x06:
                response.put("SENSOR_TYPE", "VELOCITY");
                break;
            case (byte) 0x07:
                response.put("SENSOR_TYPE", "DIRECTION");
                break;
            case (byte) 0x08:
                response.put("SENSOR_TYPE", "ATMOSPHERIC_PRESSURE");
                break;
            case (byte) 0x09:
                response.put("SENSOR_TYPE", "BAROMETRIC_PRESSURE");
                break;
            case (byte) 0x0A:
                response.put("SENSOR_TYPE", "SOLAR_RADIATION");
                break;
            case (byte) 0x0B:
                response.put("SENSOR_TYPE", "DEW_POINT");
                break;
            case (byte) 0x0C:
                response.put("SENSOR_TYPE", "RAIN_RATE");
                break;
            case (byte) 0x0D:
                response.put("SENSOR_TYPE", "TIDE_LEVEL");
                break;
            case (byte) 0x0E:
                response.put("SENSOR_TYPE", "WEIGHT");
                break;
            case (byte) 0x0F:
                response.put("SENSOR_TYPE", "VOLTAGE");
                break;
            case (byte) 0x10:
                response.put("SENSOR_TYPE", "CURRENT");
                break;
            case (byte) 0x11:
                response.put("SENSOR_TYPE", "CO2_LEVEL");
                break;
            case (byte) 0x12:
                response.put("SENSOR_TYPE", "AIR_FLOW");
                break;
            case (byte) 0x13:
                response.put("SENSOR_TYPE", "TANK_CAPACITY");
                break;
            case (byte) 0x14:
                response.put("SENSOR_TYPE", "DISTANCE");
                break;
            case (byte) 0x15:
                response.put("SENSOR_TYPE", "ANGLE_POSITION");
                break;
            case (byte) 0x16:
                response.put("SENSOR_TYPE", "ROTATION");
                break;
            case (byte) 0x17:
                response.put("SENSOR_TYPE", "WATER_TEMPERATURE");
                break;
            case (byte) 0x18:
                response.put("SENSOR_TYPE", "SOIL_TEMPERATURE");
                break;
            case (byte) 0x19:
                response.put("SENSOR_TYPE", "SEISMIC_INTENSITY");
                break;
            case (byte) 0x1A:
                response.put("SENSOR_TYPE", "SEISMIC_MAGNITUDE");
                break;
            case (byte) 0x1B:
                response.put("SENSOR_TYPE", "ULTRAVIOLET");
                break;
            case (byte) 0x1C:
                response.put("SENSOR_TYPE", "ELECTRICAL_RESISTIVITY");
                break;
            case (byte) 0x1D:
                response.put("SENSOR_TYPE", "ELECTRICAL_CONDUCTIVITY");
                break;
            case (byte) 0x1E:
                response.put("SENSOR_TYPE", "LOUDNESS");
                break;
            case (byte) 0x1F:
                response.put("SENSOR_TYPE", "MOISTURE");
                break;
            case (byte) 0x20:
                response.put("SENSOR_TYPE", "FREQUENCY");
                break;
            case (byte) 0x21:
                response.put("SENSOR_TYPE", "TIME");
                break;
            case (byte) 0x22:
                response.put("SENSOR_TYPE", "TARGET_TEMPERATURE");
                break;
            default:
                logger.debug("Unknown value {} for constant 'SENSOR_TYPE'", String.format("%02X", payload[2]));
                response.put("SENSOR_TYPE", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_MULTILEVEL_GET command.<br>
     *
     * Multilevel Sensor Get<br>
     *
     *
     * @param sensorType {@link String}
     * @param scale {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorMultilevelGet(String sensorType, Integer scale) {
        logger.debug("Creating command message SENSOR_MULTILEVEL_GET version 6");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_MULTILEVEL_GET);

        // Process 'Sensor Type'
        switch (sensorType) {
            case "TEMPERATURE":
                outputData.write(0x01);
                break;
            case "GENERAL_PURPOSE_VALUE":
                outputData.write(0x02);
                break;
            case "LUMINANCE":
                outputData.write(0x03);
                break;
            case "POWER":
                outputData.write(0x04);
                break;
            case "RELATIVE_HUMIDITY":
                outputData.write(0x05);
                break;
            case "VELOCITY":
                outputData.write(0x06);
                break;
            case "DIRECTION":
                outputData.write(0x07);
                break;
            case "ATMOSPHERIC_PRESSURE":
                outputData.write(0x08);
                break;
            case "BAROMETRIC_PRESSURE":
                outputData.write(0x09);
                break;
            case "SOLAR_RADIATION":
                outputData.write(0x0A);
                break;
            case "DEW_POINT":
                outputData.write(0x0B);
                break;
            case "RAIN_RATE":
                outputData.write(0x0C);
                break;
            case "TIDE_LEVEL":
                outputData.write(0x0D);
                break;
            case "WEIGHT":
                outputData.write(0x0E);
                break;
            case "VOLTAGE":
                outputData.write(0x0F);
                break;
            case "CURRENT":
                outputData.write(0x10);
                break;
            case "CO2_LEVEL":
                outputData.write(0x11);
                break;
            case "AIR_FLOW":
                outputData.write(0x12);
                break;
            case "TANK_CAPACITY":
                outputData.write(0x13);
                break;
            case "DISTANCE":
                outputData.write(0x14);
                break;
            case "ANGLE_POSITION":
                outputData.write(0x15);
                break;
            case "ROTATION":
                outputData.write(0x16);
                break;
            case "WATER_TEMPERATURE":
                outputData.write(0x17);
                break;
            case "SOIL_TEMPERATURE":
                outputData.write(0x18);
                break;
            case "SEISMIC_INTENSITY":
                outputData.write(0x19);
                break;
            case "SEISMIC_MAGNITUDE":
                outputData.write(0x1A);
                break;
            case "ULTRAVIOLET":
                outputData.write(0x1B);
                break;
            case "ELECTRICAL_RESISTIVITY":
                outputData.write(0x1C);
                break;
            case "ELECTRICAL_CONDUCTIVITY":
                outputData.write(0x1D);
                break;
            case "LOUDNESS":
                outputData.write(0x1E);
                break;
            case "MOISTURE":
                outputData.write(0x1F);
                break;
            case "FREQUENCY":
                outputData.write(0x20);
                break;
            case "TIME":
                outputData.write(0x21);
                break;
            case "TARGET_TEMPERATURE":
                outputData.write(0x22);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for sensorType: " + sensorType);
        }

        // Process 'Properties1'
        outputData.write(((scale << 3) & 0x18));

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_MULTILEVEL_GET command<br>
     *
     * Multilevel Sensor Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SENSOR_TYPE {@link String}
     * <li>SCALE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorMultilevelGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sensor Type'
        switch ((int) payload[2]) {
            case (byte) 0x01:
                response.put("SENSOR_TYPE", "TEMPERATURE");
                break;
            case (byte) 0x02:
                response.put("SENSOR_TYPE", "GENERAL_PURPOSE_VALUE");
                break;
            case (byte) 0x03:
                response.put("SENSOR_TYPE", "LUMINANCE");
                break;
            case (byte) 0x04:
                response.put("SENSOR_TYPE", "POWER");
                break;
            case (byte) 0x05:
                response.put("SENSOR_TYPE", "RELATIVE_HUMIDITY");
                break;
            case (byte) 0x06:
                response.put("SENSOR_TYPE", "VELOCITY");
                break;
            case (byte) 0x07:
                response.put("SENSOR_TYPE", "DIRECTION");
                break;
            case (byte) 0x08:
                response.put("SENSOR_TYPE", "ATMOSPHERIC_PRESSURE");
                break;
            case (byte) 0x09:
                response.put("SENSOR_TYPE", "BAROMETRIC_PRESSURE");
                break;
            case (byte) 0x0A:
                response.put("SENSOR_TYPE", "SOLAR_RADIATION");
                break;
            case (byte) 0x0B:
                response.put("SENSOR_TYPE", "DEW_POINT");
                break;
            case (byte) 0x0C:
                response.put("SENSOR_TYPE", "RAIN_RATE");
                break;
            case (byte) 0x0D:
                response.put("SENSOR_TYPE", "TIDE_LEVEL");
                break;
            case (byte) 0x0E:
                response.put("SENSOR_TYPE", "WEIGHT");
                break;
            case (byte) 0x0F:
                response.put("SENSOR_TYPE", "VOLTAGE");
                break;
            case (byte) 0x10:
                response.put("SENSOR_TYPE", "CURRENT");
                break;
            case (byte) 0x11:
                response.put("SENSOR_TYPE", "CO2_LEVEL");
                break;
            case (byte) 0x12:
                response.put("SENSOR_TYPE", "AIR_FLOW");
                break;
            case (byte) 0x13:
                response.put("SENSOR_TYPE", "TANK_CAPACITY");
                break;
            case (byte) 0x14:
                response.put("SENSOR_TYPE", "DISTANCE");
                break;
            case (byte) 0x15:
                response.put("SENSOR_TYPE", "ANGLE_POSITION");
                break;
            case (byte) 0x16:
                response.put("SENSOR_TYPE", "ROTATION");
                break;
            case (byte) 0x17:
                response.put("SENSOR_TYPE", "WATER_TEMPERATURE");
                break;
            case (byte) 0x18:
                response.put("SENSOR_TYPE", "SOIL_TEMPERATURE");
                break;
            case (byte) 0x19:
                response.put("SENSOR_TYPE", "SEISMIC_INTENSITY");
                break;
            case (byte) 0x1A:
                response.put("SENSOR_TYPE", "SEISMIC_MAGNITUDE");
                break;
            case (byte) 0x1B:
                response.put("SENSOR_TYPE", "ULTRAVIOLET");
                break;
            case (byte) 0x1C:
                response.put("SENSOR_TYPE", "ELECTRICAL_RESISTIVITY");
                break;
            case (byte) 0x1D:
                response.put("SENSOR_TYPE", "ELECTRICAL_CONDUCTIVITY");
                break;
            case (byte) 0x1E:
                response.put("SENSOR_TYPE", "LOUDNESS");
                break;
            case (byte) 0x1F:
                response.put("SENSOR_TYPE", "MOISTURE");
                break;
            case (byte) 0x20:
                response.put("SENSOR_TYPE", "FREQUENCY");
                break;
            case (byte) 0x21:
                response.put("SENSOR_TYPE", "TIME");
                break;
            case (byte) 0x22:
                response.put("SENSOR_TYPE", "TARGET_TEMPERATURE");
                break;
            default:
                logger.debug("Unknown value {} for constant 'SENSOR_TYPE'", String.format("%02X", payload[2]));
                response.put("SENSOR_TYPE", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Process 'Properties1'
        response.put("SCALE", Integer.valueOf((payload[3] & 0x18 >> 3)));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_MULTILEVEL_REPORT command.<br>
     *
     * Multilevel Sensor Report<br>
     *
     *
     * @param sensorType {@link String}
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param sensorValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorMultilevelReport(String sensorType, Integer size, Integer scale, Integer precision,
            byte[] sensorValue) {
        logger.debug("Creating command message SENSOR_MULTILEVEL_REPORT version 6");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_MULTILEVEL_REPORT);

        // Process 'Sensor Type'
        switch (sensorType) {
            case "TEMPERATURE":
                outputData.write(0x01);
                break;
            case "GENERAL_PURPOSE_VALUE":
                outputData.write(0x02);
                break;
            case "LUMINANCE":
                outputData.write(0x03);
                break;
            case "POWER":
                outputData.write(0x04);
                break;
            case "RELATIVE_HUMIDITY":
                outputData.write(0x05);
                break;
            case "VELOCITY":
                outputData.write(0x06);
                break;
            case "DIRECTION":
                outputData.write(0x07);
                break;
            case "ATMOSPHERIC_PRESSURE":
                outputData.write(0x08);
                break;
            case "BAROMETRIC_PRESSURE":
                outputData.write(0x09);
                break;
            case "SOLAR_RADIATION":
                outputData.write(0x0A);
                break;
            case "DEW_POINT":
                outputData.write(0x0B);
                break;
            case "RAIN_RATE":
                outputData.write(0x0C);
                break;
            case "TIDE_LEVEL":
                outputData.write(0x0D);
                break;
            case "WEIGHT":
                outputData.write(0x0E);
                break;
            case "VOLTAGE":
                outputData.write(0x0F);
                break;
            case "CURRENT":
                outputData.write(0x10);
                break;
            case "CO2_LEVEL":
                outputData.write(0x11);
                break;
            case "AIR_FLOW":
                outputData.write(0x12);
                break;
            case "TANK_CAPACITY":
                outputData.write(0x13);
                break;
            case "DISTANCE":
                outputData.write(0x14);
                break;
            case "ANGLE_POSITION":
                outputData.write(0x15);
                break;
            case "ROTATION":
                outputData.write(0x16);
                break;
            case "WATER_TEMPERATURE":
                outputData.write(0x17);
                break;
            case "SOIL_TEMPERATURE":
                outputData.write(0x18);
                break;
            case "SEISMIC_INTENSITY":
                outputData.write(0x19);
                break;
            case "SEISMIC_MAGNITUDE":
                outputData.write(0x1A);
                break;
            case "ULTRAVIOLET":
                outputData.write(0x1B);
                break;
            case "ELECTRICAL_RESISTIVITY":
                outputData.write(0x1C);
                break;
            case "ELECTRICAL_CONDUCTIVITY":
                outputData.write(0x1D);
                break;
            case "LOUDNESS":
                outputData.write(0x1E);
                break;
            case "MOISTURE":
                outputData.write(0x1F);
                break;
            case "FREQUENCY":
                outputData.write(0x20);
                break;
            case "TIME":
                outputData.write(0x21);
                break;
            case "TARGET_TEMPERATURE":
                outputData.write(0x22);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for sensorType: " + sensorType);
        }

        // Process 'Level'
        int valLevel = 0;
        valLevel |= size & 0x07;
        valLevel |= ((scale << 3) & 0x18);
        valLevel |= ((precision << 5) & 0xE0);
        outputData.write(valLevel);

        // Process 'Sensor Value'
        try {
            outputData.write(sensorValue);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_MULTILEVEL_REPORT command<br>
     *
     * Multilevel Sensor Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SENSOR_TYPE {@link String}
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>SENSOR_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorMultilevelReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Sensor Type'
        switch ((int) payload[msgOffset]) {
            case (byte) 0x01:
                response.put("SENSOR_TYPE", "TEMPERATURE");
                break;
            case (byte) 0x02:
                response.put("SENSOR_TYPE", "GENERAL_PURPOSE_VALUE");
                break;
            case (byte) 0x03:
                response.put("SENSOR_TYPE", "LUMINANCE");
                break;
            case (byte) 0x04:
                response.put("SENSOR_TYPE", "POWER");
                break;
            case (byte) 0x05:
                response.put("SENSOR_TYPE", "RELATIVE_HUMIDITY");
                break;
            case (byte) 0x06:
                response.put("SENSOR_TYPE", "VELOCITY");
                break;
            case (byte) 0x07:
                response.put("SENSOR_TYPE", "DIRECTION");
                break;
            case (byte) 0x08:
                response.put("SENSOR_TYPE", "ATMOSPHERIC_PRESSURE");
                break;
            case (byte) 0x09:
                response.put("SENSOR_TYPE", "BAROMETRIC_PRESSURE");
                break;
            case (byte) 0x0A:
                response.put("SENSOR_TYPE", "SOLAR_RADIATION");
                break;
            case (byte) 0x0B:
                response.put("SENSOR_TYPE", "DEW_POINT");
                break;
            case (byte) 0x0C:
                response.put("SENSOR_TYPE", "RAIN_RATE");
                break;
            case (byte) 0x0D:
                response.put("SENSOR_TYPE", "TIDE_LEVEL");
                break;
            case (byte) 0x0E:
                response.put("SENSOR_TYPE", "WEIGHT");
                break;
            case (byte) 0x0F:
                response.put("SENSOR_TYPE", "VOLTAGE");
                break;
            case (byte) 0x10:
                response.put("SENSOR_TYPE", "CURRENT");
                break;
            case (byte) 0x11:
                response.put("SENSOR_TYPE", "CO2_LEVEL");
                break;
            case (byte) 0x12:
                response.put("SENSOR_TYPE", "AIR_FLOW");
                break;
            case (byte) 0x13:
                response.put("SENSOR_TYPE", "TANK_CAPACITY");
                break;
            case (byte) 0x14:
                response.put("SENSOR_TYPE", "DISTANCE");
                break;
            case (byte) 0x15:
                response.put("SENSOR_TYPE", "ANGLE_POSITION");
                break;
            case (byte) 0x16:
                response.put("SENSOR_TYPE", "ROTATION");
                break;
            case (byte) 0x17:
                response.put("SENSOR_TYPE", "WATER_TEMPERATURE");
                break;
            case (byte) 0x18:
                response.put("SENSOR_TYPE", "SOIL_TEMPERATURE");
                break;
            case (byte) 0x19:
                response.put("SENSOR_TYPE", "SEISMIC_INTENSITY");
                break;
            case (byte) 0x1A:
                response.put("SENSOR_TYPE", "SEISMIC_MAGNITUDE");
                break;
            case (byte) 0x1B:
                response.put("SENSOR_TYPE", "ULTRAVIOLET");
                break;
            case (byte) 0x1C:
                response.put("SENSOR_TYPE", "ELECTRICAL_RESISTIVITY");
                break;
            case (byte) 0x1D:
                response.put("SENSOR_TYPE", "ELECTRICAL_CONDUCTIVITY");
                break;
            case (byte) 0x1E:
                response.put("SENSOR_TYPE", "LOUDNESS");
                break;
            case (byte) 0x1F:
                response.put("SENSOR_TYPE", "MOISTURE");
                break;
            case (byte) 0x20:
                response.put("SENSOR_TYPE", "FREQUENCY");
                break;
            case (byte) 0x21:
                response.put("SENSOR_TYPE", "TIME");
                break;
            case (byte) 0x22:
                response.put("SENSOR_TYPE", "TARGET_TEMPERATURE");
                break;
            default:
                logger.debug("Unknown value {} for constant 'SENSOR_TYPE'", String.format("%02X", payload[msgOffset]));
                response.put("SENSOR_TYPE", "UNKNOWN_" + String.format("%02X", payload[msgOffset]));
                break;
        }
        msgOffset += 1;

        // Process 'Level'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Sensor Value'
        int valSensorValue = 0;
        int lenSensorValue = payload[msgOffset - 1] & 0x07;
        for (int cntSensorValue = 0; cntSensorValue < lenSensorValue; cntSensorValue++) {
            valSensorValue = (valSensorValue << 8) + payload[msgOffset + cntSensorValue];
        }
        response.put("SENSOR_VALUE", valSensorValue);
        msgOffset += lenSensorValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT command.<br>
     *
     * Multilevel Sensor Supported Scale Report<br>
     *
     *
     * @param sensorType {@link String}
     * @param scaleBitMask {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorMultilevelSupportedScaleReport(String sensorType, Integer scaleBitMask) {
        logger.debug("Creating command message SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT version 6");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT);

        // Process 'Sensor Type'
        switch (sensorType) {
            case "TEMPERATURE":
                outputData.write(0x01);
                break;
            case "GENERAL_PURPOSE_VALUE":
                outputData.write(0x02);
                break;
            case "LUMINANCE":
                outputData.write(0x03);
                break;
            case "POWER":
                outputData.write(0x04);
                break;
            case "RELATIVE_HUMIDITY":
                outputData.write(0x05);
                break;
            case "VELOCITY":
                outputData.write(0x06);
                break;
            case "DIRECTION":
                outputData.write(0x07);
                break;
            case "ATMOSPHERIC_PRESSURE":
                outputData.write(0x08);
                break;
            case "BAROMETRIC_PRESSURE":
                outputData.write(0x09);
                break;
            case "SOLAR_RADIATION":
                outputData.write(0x0A);
                break;
            case "DEW_POINT":
                outputData.write(0x0B);
                break;
            case "RAIN_RATE":
                outputData.write(0x0C);
                break;
            case "TIDE_LEVEL":
                outputData.write(0x0D);
                break;
            case "WEIGHT":
                outputData.write(0x0E);
                break;
            case "VOLTAGE":
                outputData.write(0x0F);
                break;
            case "CURRENT":
                outputData.write(0x10);
                break;
            case "CO2_LEVEL":
                outputData.write(0x11);
                break;
            case "AIR_FLOW":
                outputData.write(0x12);
                break;
            case "TANK_CAPACITY":
                outputData.write(0x13);
                break;
            case "DISTANCE":
                outputData.write(0x14);
                break;
            case "ANGLE_POSITION":
                outputData.write(0x15);
                break;
            case "ROTATION":
                outputData.write(0x16);
                break;
            case "WATER_TEMPERATURE":
                outputData.write(0x17);
                break;
            case "SOIL_TEMPERATURE":
                outputData.write(0x18);
                break;
            case "SEISMIC_INTENSITY":
                outputData.write(0x19);
                break;
            case "SEISMIC_MAGNITUDE":
                outputData.write(0x1A);
                break;
            case "ULTRAVIOLET":
                outputData.write(0x1B);
                break;
            case "ELECTRICAL_RESISTIVITY":
                outputData.write(0x1C);
                break;
            case "ELECTRICAL_CONDUCTIVITY":
                outputData.write(0x1D);
                break;
            case "LOUDNESS":
                outputData.write(0x1E);
                break;
            case "MOISTURE":
                outputData.write(0x1F);
                break;
            case "FREQUENCY":
                outputData.write(0x20);
                break;
            case "TIME":
                outputData.write(0x21);
                break;
            case "TARGET_TEMPERATURE":
                outputData.write(0x22);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for sensorType: " + sensorType);
        }

        // Process 'Properties1'
        outputData.write(scaleBitMask & 0x0F);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT command<br>
     *
     * Multilevel Sensor Supported Scale Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SENSOR_TYPE {@link String}
     * <li>SCALE_BIT_MASK {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorMultilevelSupportedScaleReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Sensor Type'
        switch ((int) payload[2]) {
            case (byte) 0x01:
                response.put("SENSOR_TYPE", "TEMPERATURE");
                break;
            case (byte) 0x02:
                response.put("SENSOR_TYPE", "GENERAL_PURPOSE_VALUE");
                break;
            case (byte) 0x03:
                response.put("SENSOR_TYPE", "LUMINANCE");
                break;
            case (byte) 0x04:
                response.put("SENSOR_TYPE", "POWER");
                break;
            case (byte) 0x05:
                response.put("SENSOR_TYPE", "RELATIVE_HUMIDITY");
                break;
            case (byte) 0x06:
                response.put("SENSOR_TYPE", "VELOCITY");
                break;
            case (byte) 0x07:
                response.put("SENSOR_TYPE", "DIRECTION");
                break;
            case (byte) 0x08:
                response.put("SENSOR_TYPE", "ATMOSPHERIC_PRESSURE");
                break;
            case (byte) 0x09:
                response.put("SENSOR_TYPE", "BAROMETRIC_PRESSURE");
                break;
            case (byte) 0x0A:
                response.put("SENSOR_TYPE", "SOLAR_RADIATION");
                break;
            case (byte) 0x0B:
                response.put("SENSOR_TYPE", "DEW_POINT");
                break;
            case (byte) 0x0C:
                response.put("SENSOR_TYPE", "RAIN_RATE");
                break;
            case (byte) 0x0D:
                response.put("SENSOR_TYPE", "TIDE_LEVEL");
                break;
            case (byte) 0x0E:
                response.put("SENSOR_TYPE", "WEIGHT");
                break;
            case (byte) 0x0F:
                response.put("SENSOR_TYPE", "VOLTAGE");
                break;
            case (byte) 0x10:
                response.put("SENSOR_TYPE", "CURRENT");
                break;
            case (byte) 0x11:
                response.put("SENSOR_TYPE", "CO2_LEVEL");
                break;
            case (byte) 0x12:
                response.put("SENSOR_TYPE", "AIR_FLOW");
                break;
            case (byte) 0x13:
                response.put("SENSOR_TYPE", "TANK_CAPACITY");
                break;
            case (byte) 0x14:
                response.put("SENSOR_TYPE", "DISTANCE");
                break;
            case (byte) 0x15:
                response.put("SENSOR_TYPE", "ANGLE_POSITION");
                break;
            case (byte) 0x16:
                response.put("SENSOR_TYPE", "ROTATION");
                break;
            case (byte) 0x17:
                response.put("SENSOR_TYPE", "WATER_TEMPERATURE");
                break;
            case (byte) 0x18:
                response.put("SENSOR_TYPE", "SOIL_TEMPERATURE");
                break;
            case (byte) 0x19:
                response.put("SENSOR_TYPE", "SEISMIC_INTENSITY");
                break;
            case (byte) 0x1A:
                response.put("SENSOR_TYPE", "SEISMIC_MAGNITUDE");
                break;
            case (byte) 0x1B:
                response.put("SENSOR_TYPE", "ULTRAVIOLET");
                break;
            case (byte) 0x1C:
                response.put("SENSOR_TYPE", "ELECTRICAL_RESISTIVITY");
                break;
            case (byte) 0x1D:
                response.put("SENSOR_TYPE", "ELECTRICAL_CONDUCTIVITY");
                break;
            case (byte) 0x1E:
                response.put("SENSOR_TYPE", "LOUDNESS");
                break;
            case (byte) 0x1F:
                response.put("SENSOR_TYPE", "MOISTURE");
                break;
            case (byte) 0x20:
                response.put("SENSOR_TYPE", "FREQUENCY");
                break;
            case (byte) 0x21:
                response.put("SENSOR_TYPE", "TIME");
                break;
            case (byte) 0x22:
                response.put("SENSOR_TYPE", "TARGET_TEMPERATURE");
                break;
            default:
                logger.debug("Unknown value {} for constant 'SENSOR_TYPE'", String.format("%02X", payload[2]));
                response.put("SENSOR_TYPE", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Process 'Properties1'
        response.put("SCALE_BIT_MASK", Integer.valueOf(payload[3] & 0x0F));

        // Return the map of processed response data;
        return response;
    }

}
