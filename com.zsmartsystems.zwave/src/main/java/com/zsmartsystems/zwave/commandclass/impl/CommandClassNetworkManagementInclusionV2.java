/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION</b> version <b>2</b>.<br>
 *
 * Command Class Network Management Inclusion<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementInclusionV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementInclusionV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_INCLUSION
     */
    public final static int COMMAND_CLASS_KEY = 0x34;

    /**
     * Node Add Command Constant
     */
    public final static int NODE_ADD = 0x01;
    /**
     * Node Add Status Command Constant
     */
    public final static int NODE_ADD_STATUS = 0x02;
    /**
     * Node Remove Command Constant
     */
    public final static int NODE_REMOVE = 0x03;
    /**
     * Node Remove Status Command Constant
     */
    public final static int NODE_REMOVE_STATUS = 0x04;
    /**
     * Failed Node Remove Command Constant
     */
    public final static int FAILED_NODE_REMOVE = 0x07;
    /**
     * Failed Node Remove Status Command Constant
     */
    public final static int FAILED_NODE_REMOVE_STATUS = 0x08;
    /**
     * Failed Node Replace Command Constant
     */
    public final static int FAILED_NODE_REPLACE = 0x09;
    /**
     * Failed Node Replace Status Command Constant
     */
    public final static int FAILED_NODE_REPLACE_STATUS = 0x0A;
    /**
     * Node Neighbor Update Request Command Constant
     */
    public final static int NODE_NEIGHBOR_UPDATE_REQUEST = 0x0B;
    /**
     * Node Neighbor Update Status Command Constant
     */
    public final static int NODE_NEIGHBOR_UPDATE_STATUS = 0x0C;
    /**
     * Return Route Assign Command Constant
     */
    public final static int RETURN_ROUTE_ASSIGN = 0x0D;
    /**
     * Return Route Assign Complete Command Constant
     */
    public final static int RETURN_ROUTE_ASSIGN_COMPLETE = 0x0E;
    /**
     * Return Route Delete Command Constant
     */
    public final static int RETURN_ROUTE_DELETE = 0x0F;
    /**
     * Return Route Delete Complete Command Constant
     */
    public final static int RETURN_ROUTE_DELETE_COMPLETE = 0x10;
    /**
     * Node Add Keys Report Command Constant
     */
    public final static int NODE_ADD_KEYS_REPORT = 0x11;
    /**
     * Node Add Keys Set Command Constant
     */
    public final static int NODE_ADD_KEYS_SET = 0x12;
    /**
     * Node Add DSK Report Command Constant
     */
    public final static int NODE_ADD_DSK_REPORT = 0x13;
    /**
     * Node Add DSK Set Command Constant
     */
    public final static int NODE_ADD_DSK_SET = 0x14;

    /**
     * Creates a new message with the NODE_ADD command.<br>
     *
     * Node Add<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param mode {@link Integer}
     * @param txOptions {@link List<String>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAdd(Integer seqNo, Integer mode, List<String> txOptions) {
        logger.debug("Creating command message NODE_ADD version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        // Process 'Mode'
        outputData.write(mode);

        // Process 'tx Options'
        int valTxOptions = 0;
        valTxOptions |= (txOptions.contains("ACK") ? 0x02 : 0);
        valTxOptions |= (txOptions.contains("LOW_POWER") ? 0x04 : 0);
        valTxOptions |= (txOptions.contains("AUTO_ROUTE") ? 0x10 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_ROUTE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("EXPLORE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_RETRANSMISSION") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("HIGH_POWER") ? 0x01 : 0);
        outputData.write(valTxOptions);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD command<br>
     *
     * Node Add<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MODE {@link Integer}
     * <li>TX_OPTIONS {@link List}<{@link String}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAdd(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Mode'
        switch ((int) payload[4]) {
            case 0x01:
                response.put("MODE", "NODE_ADD_ANY");
                break;
            case 0x02:
                response.put("MODE", "NODE_ADD_CONTROLLER");
                break;
            case 0x03:
                response.put("MODE", "NODE_ADD_SLAVE");
                break;
            case 0x04:
                response.put("MODE", "NODE_ADD_EXISTING");
                break;
            case 0x05:
                response.put("MODE", "NODE_ADD_STOP");
                break;
            case 0x06:
                response.put("MODE", "NODE_ADD_STOP_FAILED");
                break;
            case 0x07:
                response.put("MODE", "NODE_ADD_ANY_S2");
                break;
            default:
                logger.debug("");
                break;
        }

        // Process 'tx Options'
        List<String> responseTxOptions = new ArrayList<String>();
        int lenTxOptions = 1;
        for (int cntTxOptions = 0; cntTxOptions < lenTxOptions; cntTxOptions++) {
            if ((payload[5 + (cntTxOptions / 8)] & cntTxOptions % 8) == 0) {
                continue;
            }
            switch (cntTxOptions) {
                case 0x01:
                    responseTxOptions.add("ACK");
                    break;
                case 0x02:
                    responseTxOptions.add("LOW_POWER");
                    break;
                case 0x04:
                    responseTxOptions.add("AUTO_ROUTE");
                    break;
                case 0x10:
                    responseTxOptions.add("NO_ROUTE");
                    break;
                case 0x20:
                    responseTxOptions.add("EXPLORE");
                    break;
                case 0x40:
                    responseTxOptions.add("NO_RETRANSMISSION");
                    break;
                case 0x80:
                    responseTxOptions.add("HIGH_POWER");
                    break;
                default:
                    responseTxOptions.add("BITMASK_" + cntTxOptions);
                    break;
            }
        }
        response.put("TX_OPTIONS", responseTxOptions);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_ADD_STATUS command.<br>
     *
     * Node Add Status<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @param newNodeId {@link Integer}
     * @param nodeInfoLength {@link Integer}
     * @param capability {@link Integer}
     * @param listening {@link Boolean}
     * @param security {@link Integer}
     * @param opt {@link Boolean}
     * @param basicDeviceClass {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param nonSecureCommandClass {@link byte[]}
     * @param secureCommandClass {@link byte[]}
     * @param grantedKeys {@link Integer}
     * @param kexFailType {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAddStatus(Integer seqNo, Integer status, Integer newNodeId, Integer nodeInfoLength,
            Integer capability, Boolean listening, Integer security, Boolean opt, Integer basicDeviceClass,
            Integer genericDeviceClass, Integer specificDeviceClass, byte[] nonSecureCommandClass,
            byte[] secureCommandClass, Integer grantedKeys, Integer kexFailType) {
        logger.debug("Creating command message NODE_ADD_STATUS version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        // Process 'Reserved'
        // Process 'New Node ID'
        // Check the node number boundary
        if (newNodeId < 1 || newNodeId > 232) {
            logger.debug("Node number is out of bounds {}", newNodeId);
            return null;
        }
        outputData.write(newNodeId);

        // Process 'Node Info Length'
        outputData.write(nodeInfoLength);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= capability & 0x7F;
        valProperties1 |= listening ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= security & 0x7F;
        valProperties2 |= opt ? 0x80 : 0;
        outputData.write(valProperties2);

        // Process 'Basic Device Class'
        outputData.write(basicDeviceClass);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        // Process 'Non-Secure Command Class'
        try {
            outputData.write(nonSecureCommandClass);
        } catch (IOException e) {
        }

        // Process 'Security MARK'
        outputData.write(0xF1);

        // Process 'Secure Command Class'
        try {
            outputData.write(secureCommandClass);
        } catch (IOException e) {
        }

        // Process 'Granted Keys'
        outputData.write(grantedKeys);

        // Process 'KEX Fail Type'
        outputData.write(kexFailType);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD_STATUS command<br>
     *
     * Node Add Status<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * <li>NEW_NODE_ID {@link Integer}
     * <li>NODE_INFO_LENGTH {@link Integer}
     * <li>CAPABILITY {@link Integer}
     * <li>LISTENING {@link Boolean}
     * <li>SECURITY {@link Integer}
     * <li>OPT {@link Boolean}
     * <li>BASIC_DEVICE_CLASS {@link Integer}
     * <li>GENERIC_DEVICE_CLASS {@link Integer}
     * <li>SPECIFIC_DEVICE_CLASS {@link Integer}
     * <li>NON_SECURE_COMMAND_CLASS {@link byte[]}
     * <li>SECURE_COMMAND_CLASS {@link byte[]}
     * <li>GRANTED_KEYS {@link Integer}
     * <li>KEX_FAIL_TYPE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAddStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Status'
        switch ((int) payload[msgOffset]) {
            case 0x06:
                response.put("STATUS", "NODE_ADD_STATUS_DONE");
                break;
            case 0x07:
                response.put("STATUS", "NODE_ADD_STATUS_FAILED");
                break;
            case 0x09:
                response.put("STATUS", "NODE_ADD_STATUS_SECURITY_FAILED");
                break;
            default:
                logger.debug("");
                break;
        }
        msgOffset += 1;

        msgOffset += 1;

        // Process 'New Node ID'
        response.put("NEW_NODE_ID", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Node Info Length'
        response.put("NODE_INFO_LENGTH", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("CAPABILITY", new Integer(payload[msgOffset] & 0x7F));
        response.put("LISTENING", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Properties2'
        response.put("SECURITY", new Integer(payload[msgOffset] & 0x7F));
        response.put("OPT", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Basic Device Class'
        response.put("BASIC_DEVICE_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Non-Secure Command Class'
        ByteArrayOutputStream valNonSecureCommandClass = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            // Detect the marker
            if (((payload[msgOffset] & 0xFF) == 0xF1) && ((payload[msgOffset + 1] & 0xFF) == 0x00)) {
                break;
            }
            valNonSecureCommandClass.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("NON_SECURE_COMMAND_CLASS", valNonSecureCommandClass);

        // Process 'Security MARK'
        // Adjust position to account for the marker
        msgOffset += 2;

        // Process 'Secure Command Class'
        ByteArrayOutputStream valSecureCommandClass = new ByteArrayOutputStream();
        while (msgOffset < payload.length - 2) {
            valSecureCommandClass.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("SECURE_COMMAND_CLASS", valSecureCommandClass);

        // Process 'Granted Keys'
        response.put("GRANTED_KEYS", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'KEX Fail Type'
        response.put("KEX_FAIL_TYPE", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_REMOVE command.<br>
     *
     * Node Remove<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param mode {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeRemove(Integer seqNo, Integer mode) {
        logger.debug("Creating command message NODE_REMOVE version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_REMOVE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        // Process 'Mode'
        outputData.write(mode);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_REMOVE command<br>
     *
     * Node Remove<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MODE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeRemove(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Mode'
        switch ((int) payload[4]) {
            case 0x01:
                response.put("MODE", "NODE_REMOVE_ANY");
                break;
            case 0x02:
                response.put("MODE", "NODE_REMOVE_CONTROLLER");
                break;
            case 0x03:
                response.put("MODE", "NODE_REMOVE_SLAVE");
                break;
            case 0x05:
                response.put("MODE", "NODE_REMOVE_STOP");
                break;
            default:
                logger.debug("");
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_REMOVE_STATUS command.<br>
     *
     * Node Remove Status<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeRemoveStatus(Integer seqNo, Integer status, Integer nodeid) {
        logger.debug("Creating command message NODE_REMOVE_STATUS version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_REMOVE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_REMOVE_STATUS command<br>
     *
     * Node Remove Status<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * <li>NODEID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeRemoveStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Status'
        switch ((int) payload[3]) {
            case 0x06:
                response.put("STATUS", "NODE_REMOVE_STATUS_DONE");
                break;
            case 0x07:
                response.put("STATUS", "NODE_REMOVE_STATUS_FAILED");
                break;
            default:
                logger.debug("");
                break;
        }

        // Process 'NodeID'
        response.put("NODEID", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REMOVE command.<br>
     *
     * Failed Node Remove<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeRemove(Integer seqNo, Integer nodeId) {
        logger.debug("Creating command message FAILED_NODE_REMOVE version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REMOVE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REMOVE command<br>
     *
     * Failed Node Remove<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeRemove(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", new Integer(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REMOVE_STATUS command.<br>
     *
     * Failed Node Remove Status<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeRemoveStatus(Integer seqNo, Integer status, Integer nodeId) {
        logger.debug("Creating command message FAILED_NODE_REMOVE_STATUS version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REMOVE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REMOVE_STATUS command<br>
     *
     * Failed Node Remove Status<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeRemoveStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Status'
        switch ((int) payload[3]) {
            case 0x01:
                response.put("STATUS", "DONE");
                break;
            case 0x00:
                response.put("STATUS", "FAILED_NODE_NOT_FOUND");
                break;
            case 0x02:
                response.put("STATUS", "FAILED_NODE_REMOVE_FAIL");
                break;
            default:
                logger.debug("");
                break;
        }

        // Process 'Node ID'
        response.put("NODE_ID", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REPLACE command.<br>
     *
     * Failed Node Replace<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @param txOptions {@link List<String>}
     * @param mode {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeReplace(Integer seqNo, Integer nodeId, List<String> txOptions, Integer mode) {
        logger.debug("Creating command message FAILED_NODE_REPLACE version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REPLACE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        // Process 'tx Options'
        int valTxOptions = 0;
        valTxOptions |= (txOptions.contains("ACK") ? 0x02 : 0);
        valTxOptions |= (txOptions.contains("LOW_POWER") ? 0x04 : 0);
        valTxOptions |= (txOptions.contains("AUTO_ROUTE") ? 0x10 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_ROUTE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("EXPLORE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_RETRANSMISSION") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("HIGH_POWER") ? 0x01 : 0);
        outputData.write(valTxOptions);

        // Process 'Mode'
        outputData.write(mode);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REPLACE command<br>
     *
     * Failed Node Replace<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * <li>TX_OPTIONS {@link List}<{@link String}>
     * <li>MODE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeReplace(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", new Integer(payload[3]));

        // Process 'tx Options'
        List<String> responseTxOptions = new ArrayList<String>();
        int lenTxOptions = 1;
        for (int cntTxOptions = 0; cntTxOptions < lenTxOptions; cntTxOptions++) {
            if ((payload[4 + (cntTxOptions / 8)] & cntTxOptions % 8) == 0) {
                continue;
            }
            switch (cntTxOptions) {
                case 0x01:
                    responseTxOptions.add("ACK");
                    break;
                case 0x02:
                    responseTxOptions.add("LOW_POWER");
                    break;
                case 0x04:
                    responseTxOptions.add("AUTO_ROUTE");
                    break;
                case 0x10:
                    responseTxOptions.add("NO_ROUTE");
                    break;
                case 0x20:
                    responseTxOptions.add("EXPLORE");
                    break;
                case 0x40:
                    responseTxOptions.add("NO_RETRANSMISSION");
                    break;
                case 0x80:
                    responseTxOptions.add("HIGH_POWER");
                    break;
                default:
                    responseTxOptions.add("BITMASK_" + cntTxOptions);
                    break;
            }
        }
        response.put("TX_OPTIONS", responseTxOptions);

        // Process 'Mode'
        response.put("MODE", new Integer(payload[5]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the FAILED_NODE_REPLACE_STATUS command.<br>
     *
     * Failed Node Replace Status<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @param nodeId {@link Integer}
     * @param grantedKeys {@link Integer}
     * @param kexFailType {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getFailedNodeReplaceStatus(Integer seqNo, Integer status, Integer nodeId, Integer grantedKeys,
            Integer kexFailType) {
        logger.debug("Creating command message FAILED_NODE_REPLACE_STATUS version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(FAILED_NODE_REPLACE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        // Process 'Granted Keys'
        outputData.write(grantedKeys);

        // Process 'KEX Fail Type'
        outputData.write(kexFailType);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the FAILED_NODE_REPLACE_STATUS command<br>
     *
     * Failed Node Replace Status<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * <li>NODE_ID {@link Integer}
     * <li>GRANTED_KEYS {@link Integer}
     * <li>KEX_FAIL_TYPE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleFailedNodeReplaceStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Status'
        switch ((int) payload[3]) {
            case 0x04:
                response.put("STATUS", "DONE");
                break;
            case 0x05:
                response.put("STATUS", "FAILED_NODE_REPLACE_FAIL");
                break;
            case 0x09:
                response.put("STATUS", "FAILED_NODE_REPLACE_SECURITY_FAILED");
                break;
            default:
                logger.debug("");
                break;
        }

        // Process 'Node ID'
        response.put("NODE_ID", new Integer(payload[4]));

        // Process 'Granted Keys'
        response.put("GRANTED_KEYS", new Integer(payload[5]));

        // Process 'KEX Fail Type'
        response.put("KEX_FAIL_TYPE", new Integer(payload[6]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NEIGHBOR_UPDATE_REQUEST command.<br>
     *
     * Node Neighbor Update Request<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNeighborUpdateRequest(Integer seqNo, Integer nodeId) {
        logger.debug("Creating command message NODE_NEIGHBOR_UPDATE_REQUEST version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NEIGHBOR_UPDATE_REQUEST);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NEIGHBOR_UPDATE_REQUEST command<br>
     *
     * Node Neighbor Update Request<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNeighborUpdateRequest(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", new Integer(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_NEIGHBOR_UPDATE_STATUS command.<br>
     *
     * Node Neighbor Update Status<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeNeighborUpdateStatus(Integer seqNo, Integer status) {
        logger.debug("Creating command message NODE_NEIGHBOR_UPDATE_STATUS version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_NEIGHBOR_UPDATE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_NEIGHBOR_UPDATE_STATUS command<br>
     *
     * Node Neighbor Update Status<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeNeighborUpdateStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Status'
        switch ((int) payload[3]) {
            case 0x22:
                response.put("STATUS", "NEIGHBOR_UPDATE_STATUS_DONE");
                break;
            case 0x23:
                response.put("STATUS", "NEIGHBOR_UPDATE_STATUS_FAIL");
                break;
            default:
                logger.debug("");
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_ASSIGN command.<br>
     *
     * Return Route Assign<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param sourceNodeId {@link Integer}
     * @param destinationNodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteAssign(Integer seqNo, Integer sourceNodeId, Integer destinationNodeId) {
        logger.debug("Creating command message RETURN_ROUTE_ASSIGN version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_ASSIGN);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Source Node ID'
        // Check the node number boundary
        if (sourceNodeId < 1 || sourceNodeId > 232) {
            logger.debug("Node number is out of bounds {}", sourceNodeId);
            return null;
        }
        outputData.write(sourceNodeId);

        // Process 'Destination Node ID'
        // Check the node number boundary
        if (destinationNodeId < 1 || destinationNodeId > 232) {
            logger.debug("Node number is out of bounds {}", destinationNodeId);
            return null;
        }
        outputData.write(destinationNodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_ASSIGN command<br>
     *
     * Return Route Assign<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>SOURCE_NODE_ID {@link Integer}
     * <li>DESTINATION_NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteAssign(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Source Node ID'
        response.put("SOURCE_NODE_ID", new Integer(payload[3]));

        // Process 'Destination Node ID'
        response.put("DESTINATION_NODE_ID", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_ASSIGN_COMPLETE command.<br>
     *
     * Return Route Assign Complete<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteAssignComplete(Integer seqNo, Integer status) {
        logger.debug("Creating command message RETURN_ROUTE_ASSIGN_COMPLETE version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_ASSIGN_COMPLETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_ASSIGN_COMPLETE command<br>
     *
     * Return Route Assign Complete<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteAssignComplete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Status'
        switch ((int) payload[3]) {
            case 0x00:
                response.put("STATUS", "TRANSMIT_COMPLETE_OK");
                break;
            case 0x01:
                response.put("STATUS", "TRANSMIT_COMPLETE_NO_ACK");
                break;
            case 0x02:
                response.put("STATUS", "TRANSMIT_COMPLETE_FAIL");
                break;
            default:
                logger.debug("");
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_DELETE command.<br>
     *
     * Return Route Delete<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param nodeId {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteDelete(Integer seqNo, Integer nodeId) {
        logger.debug("Creating command message RETURN_ROUTE_DELETE version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_DELETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_DELETE command<br>
     *
     * Return Route Delete<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>NODE_ID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteDelete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Node ID'
        response.put("NODE_ID", new Integer(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the RETURN_ROUTE_DELETE_COMPLETE command.<br>
     *
     * Return Route Delete Complete<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getReturnRouteDeleteComplete(Integer seqNo, Integer status) {
        logger.debug("Creating command message RETURN_ROUTE_DELETE_COMPLETE version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(RETURN_ROUTE_DELETE_COMPLETE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the RETURN_ROUTE_DELETE_COMPLETE command<br>
     *
     * Return Route Delete Complete<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleReturnRouteDeleteComplete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Status'
        switch ((int) payload[3]) {
            case 0x00:
                response.put("STATUS", "TRANSMIT_COMPLETE_OK");
                break;
            case 0x01:
                response.put("STATUS", "TRANSMIT_COMPLETE_NO_ACK");
                break;
            case 0x02:
                response.put("STATUS", "TRANSMIT_COMPLETE_FAIL");
                break;
            default:
                logger.debug("");
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_ADD_KEYS_REPORT command.<br>
     *
     * Node Add Keys Report<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param requestClientSideAuthentication {@link Boolean}
     * @param requestedKeys {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAddKeysReport(Integer seqNo, Boolean requestClientSideAuthentication,
            Integer requestedKeys) {
        logger.debug("Creating command message NODE_ADD_KEYS_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD_KEYS_REPORT);

        // Process 'Seq No'
        outputData.write(seqNo);

        // Process 'Properties1'
        outputData.write(requestClientSideAuthentication ? 0x01 : 0);

        // Process 'Requested Keys'
        outputData.write(requestedKeys);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD_KEYS_REPORT command<br>
     *
     * Node Add Keys Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>REQUEST_CLIENT_SIDE_AUTHENTICATION {@link Boolean}
     * <li>REQUESTED_KEYS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAddKeysReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Properties1'
        response.put("REQUEST_CLIENT_SIDE_AUTHENTICATION", new Boolean((payload[3] & 0x01) != 0));

        // Process 'Requested Keys'
        response.put("REQUESTED_KEYS", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_ADD_KEYS_SET command.<br>
     *
     * Node Add Keys Set<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param accept {@link Boolean}
     * @param grantClientSideAuthentication {@link Boolean}
     * @param grantedKeys {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAddKeysSet(Integer seqNo, Boolean accept, Boolean grantClientSideAuthentication,
            Integer grantedKeys) {
        logger.debug("Creating command message NODE_ADD_KEYS_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD_KEYS_SET);

        // Process 'Seq No'
        outputData.write(seqNo);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= accept ? 0x01 : 0;
        valProperties1 |= grantClientSideAuthentication ? 0x02 : 0;
        outputData.write(valProperties1);

        // Process 'Granted Keys'
        outputData.write(grantedKeys);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD_KEYS_SET command<br>
     *
     * Node Add Keys Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>ACCEPT {@link Boolean}
     * <li>GRANT_CLIENT_SIDE_AUTHENTICATION {@link Boolean}
     * <li>GRANTED_KEYS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAddKeysSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Properties1'
        response.put("ACCEPT", new Boolean((payload[3] & 0x01) != 0));
        response.put("GRANT_CLIENT_SIDE_AUTHENTICATION", new Boolean((payload[3] & 0x02) != 0));

        // Process 'Granted Keys'
        response.put("GRANTED_KEYS", new Integer(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_ADD_DSK_REPORT command.<br>
     *
     * Node Add DSK Report<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param inputDskLength {@link Integer}
     * @param dsk {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAddDskReport(Integer seqNo, Integer inputDskLength, byte[] dsk) {
        logger.debug("Creating command message NODE_ADD_DSK_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD_DSK_REPORT);

        // Process 'Seq No'
        outputData.write(seqNo);

        // Process 'Properties1'
        outputData.write(inputDskLength & 0x0F);

        // Process 'DSK'
        try {
            outputData.write(dsk);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD_DSK_REPORT command<br>
     *
     * Node Add DSK Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>INPUT_DSK_LENGTH {@link Integer}
     * <li>DSK {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAddDskReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq No'
        response.put("SEQ_NO", new Integer(payload[2]));

        // Process 'Properties1'
        response.put("INPUT_DSK_LENGTH", new Integer(payload[3] & 0x0F));

        // Process 'DSK'
        byte[] valDsk = new byte[16];
        for (int cntDsk = 0; cntDsk < 16; cntDsk++) {
            valDsk[cntDsk] = payload[4 + cntDsk];
        }
        response.put("DSK", valDsk);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the NODE_ADD_DSK_SET command.<br>
     *
     * Node Add DSK Set<br>
     *
     *
     * @param seqNo {@link Integer}
     * @param inputDskLength {@link Integer}
     * @param accept {@link Boolean}
     * @param inputDsk {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getNodeAddDskSet(Integer seqNo, Integer inputDskLength, Boolean accept, byte[] inputDsk) {
        logger.debug("Creating command message NODE_ADD_DSK_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(NODE_ADD_DSK_SET);

        // Process 'Seq No'
        outputData.write(seqNo);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= inputDskLength & 0x0F;
        valProperties1 |= accept ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Input DSK'
        try {
            outputData.write(inputDsk);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the NODE_ADD_DSK_SET command<br>
     *
     * Node Add DSK Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>INPUT_DSK_LENGTH {@link Integer}
     * <li>ACCEPT {@link Boolean}
     * <li>INPUT_DSK {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleNodeAddDskSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Seq No'
        response.put("SEQ_NO", new Integer(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("INPUT_DSK_LENGTH", new Integer(payload[msgOffset] & 0x0F));
        response.put("ACCEPT", new Boolean((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Input DSK'
        int valInputDsk = 0;
        int lenInputDsk = payload[msgOffset - 1] & 0x0F;
        for (int cntInputDsk = 0; cntInputDsk < lenInputDsk; cntInputDsk++) {
            valInputDsk = (valInputDsk << 8) + payload[msgOffset + cntInputDsk];
        }
        response.put("INPUT_DSK", valInputDsk);
        msgOffset += lenInputDsk;

        // Return the map of processed response data;
        return response;
    }

}
