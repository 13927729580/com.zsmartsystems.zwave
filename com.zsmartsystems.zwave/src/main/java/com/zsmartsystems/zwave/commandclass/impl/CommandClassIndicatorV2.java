/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_INDICATOR</b> version <b>2</b>.
 * <p>
 * Command Class Indicator
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassIndicatorV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassIndicatorV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_INDICATOR
     */
    public final static int COMMAND_CLASS_KEY = 0x87;

    /**
     * Indicator Set Command Constant
     */
    public final static int INDICATOR_SET = 0x01;
    /**
     * Indicator Get Command Constant
     */
    public final static int INDICATOR_GET = 0x02;
    /**
     * Indicator Report Command Constant
     */
    public final static int INDICATOR_REPORT = 0x03;
    /**
     * Indicator Supported Get Command Constant
     */
    public final static int INDICATOR_SUPPORTED_GET = 0x04;
    /**
     * Indicator Supported Report Command Constant
     */
    public final static int INDICATOR_SUPPORTED_REPORT = 0x05;


    /**
     * Map holding constants for Indicator 0 Value
     */
    private static Map<Integer, String> constantIndicator0Value = new HashMap<Integer, String>();

    /**
     * Map holding constants for Property Supported Bit Mask
     */
    private static Map<Integer, String> constantPropertySupportedBitMask = new HashMap<Integer, String>();

    /**
     * Map holding constants for Next Indicator ID
     */
    private static Map<Integer, String> constantNextIndicatorId = new HashMap<Integer, String>();

    /**
     * Map holding constants for Property ID
     */
    private static Map<Integer, String> constantPropertyId = new HashMap<Integer, String>();

    /**
     * Map holding constants for Indicator ID
     */
    private static Map<Integer, String> constantIndicatorId = new HashMap<Integer, String>();
    static {

        // Constants for Indicator 0 Value
        constantIndicator0Value.put(0x00, "OFF_DISABLE");
        constantIndicator0Value.put(0xFF, "ON_ENABLE");

        // Constants for Property Supported Bit Mask
        constantPropertySupportedBitMask.put(0x10, "LOW_POWER");
        constantPropertySupportedBitMask.put(0x01, "MULTILEVEL");
        constantPropertySupportedBitMask.put(0x02, "BINARY");
        constantPropertySupportedBitMask.put(0x03, "ON_OFF_PERIOD");
        constantPropertySupportedBitMask.put(0x04, "ON_OFF_CYCLES");

        // Constants for Next Indicator ID
        constantNextIndicatorId.put(0x00, "NA");
        constantNextIndicatorId.put(0x44, "BUTTON2_INDICATION");
        constantNextIndicatorId.put(0x01, "ARMED");
        constantNextIndicatorId.put(0x45, "BUTTON3_INDICATION");
        constantNextIndicatorId.put(0x02, "NOT_ARMED");
        constantNextIndicatorId.put(0x46, "BUTTON4_INDICATION");
        constantNextIndicatorId.put(0x47, "BUTTON5_INDICATION");
        constantNextIndicatorId.put(0x03, "READY");
        constantNextIndicatorId.put(0x04, "FAULT");
        constantNextIndicatorId.put(0x40, "BUTTON_BACKLIGHT_LETTERS");
        constantNextIndicatorId.put(0x05, "BUSY");
        constantNextIndicatorId.put(0x41, "BUTTON_BACKLIGHT_DIGITS");
        constantNextIndicatorId.put(0x06, "ENTER_ID");
        constantNextIndicatorId.put(0x42, "BUTTON_BACKLIGHT_COMMAND");
        constantNextIndicatorId.put(0x07, "ENTER_PIN");
        constantNextIndicatorId.put(0x43, "BUTTON1_INDICATION");
        constantNextIndicatorId.put(0x4C, "BUTTON10_INDICATION");
        constantNextIndicatorId.put(0x08, "OK");
        constantNextIndicatorId.put(0x4D, "BUTTON11_INDICATION");
        constantNextIndicatorId.put(0x09, "NOT_OK");
        constantNextIndicatorId.put(0x4E, "BUTTON12_INDICATION");
        constantNextIndicatorId.put(0x48, "BUTTON6_INDICATION");
        constantNextIndicatorId.put(0x49, "BUTTON7_INDICATION");
        constantNextIndicatorId.put(0x4A, "BUTTON8_INDICATION");
        constantNextIndicatorId.put(0x4B, "BUTTON9_INDICATION");
        constantNextIndicatorId.put(0x22, "ZONE3_ARMED");
        constantNextIndicatorId.put(0x23, "ZONE4_ARMED");
        constantNextIndicatorId.put(0x20, "ZONE1_ARMED");
        constantNextIndicatorId.put(0x21, "ZONE2_ARMED");
        constantNextIndicatorId.put(0x24, "ZONE5_ARMED");
        constantNextIndicatorId.put(0x25, "ZONE6_ARMED");
        constantNextIndicatorId.put(0x30, "LCD_BACKLIGHT");
        constantNextIndicatorId.put(0xF0, "BUZZER");

        // Constants for Property ID
        constantPropertyId.put(0x10, "LOW_POWER");
        constantPropertyId.put(0x01, "MULTILEVEL");
        constantPropertyId.put(0x02, "BINARY");
        constantPropertyId.put(0x03, "ON_OFF_PERIOD");
        constantPropertyId.put(0x04, "ON_OFF_CYCLES");

        // Constants for Indicator ID
        constantIndicatorId.put(0x00, "NA");
        constantIndicatorId.put(0x44, "BUTTON2_INDICATION");
        constantIndicatorId.put(0x01, "ARMED");
        constantIndicatorId.put(0x45, "BUTTON3_INDICATION");
        constantIndicatorId.put(0x02, "NOT_ARMED");
        constantIndicatorId.put(0x46, "BUTTON4_INDICATION");
        constantIndicatorId.put(0x47, "BUTTON5_INDICATION");
        constantIndicatorId.put(0x03, "READY");
        constantIndicatorId.put(0x04, "FAULT");
        constantIndicatorId.put(0x40, "BUTTON_BACKLIGHT_LETTERS");
        constantIndicatorId.put(0x05, "BUSY");
        constantIndicatorId.put(0x41, "BUTTON_BACKLIGHT_DIGITS");
        constantIndicatorId.put(0x06, "ENTER_ID");
        constantIndicatorId.put(0x42, "BUTTON_BACKLIGHT_COMMAND");
        constantIndicatorId.put(0x07, "ENTER_PIN");
        constantIndicatorId.put(0x43, "BUTTON1_INDICATION");
        constantIndicatorId.put(0x4C, "BUTTON10_INDICATION");
        constantIndicatorId.put(0x08, "OK");
        constantIndicatorId.put(0x4D, "BUTTON11_INDICATION");
        constantIndicatorId.put(0x09, "NOT_OK");
        constantIndicatorId.put(0x4E, "BUTTON12_INDICATION");
        constantIndicatorId.put(0x48, "BUTTON6_INDICATION");
        constantIndicatorId.put(0x49, "BUTTON7_INDICATION");
        constantIndicatorId.put(0x4A, "BUTTON8_INDICATION");
        constantIndicatorId.put(0x4B, "BUTTON9_INDICATION");
        constantIndicatorId.put(0x22, "ZONE3_ARMED");
        constantIndicatorId.put(0x23, "ZONE4_ARMED");
        constantIndicatorId.put(0x20, "ZONE1_ARMED");
        constantIndicatorId.put(0x21, "ZONE2_ARMED");
        constantIndicatorId.put(0x24, "ZONE5_ARMED");
        constantIndicatorId.put(0x25, "ZONE6_ARMED");
        constantIndicatorId.put(0x30, "LCD_BACKLIGHT");
        constantIndicatorId.put(0xF0, "BUZZER");
    }

    /**
     * Creates a new message with the INDICATOR_SET command.
     * <p>
     * Indicator Set
     *
     * @param indicator0Value {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>OFF_DISABLE
     *            <li>ON_ENABLE
     *            </ul>
     * @param indicatorObjectCount {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIndicatorSet(String indicator0Value, Integer indicatorObjectCount) {
        logger.debug("Creating command message INDICATOR_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(INDICATOR_SET);

        // Process 'Indicator 0 Value'
        boolean foundIndicator0Value = false;
        for (Integer entry : constantIndicator0Value.keySet()) {
            if (constantIndicator0Value.get(entry).equals(indicator0Value)) {
                outputData.write(entry);
                foundIndicator0Value = true;
                break;
            }
        }
        if (!foundIndicator0Value) {
            throw new IllegalArgumentException("Unknown constant value '" + indicator0Value + "' for indicator0Value");
        }

        // Process 'Properties1'
        outputData.write(indicatorObjectCount & 0x1F);

        // Process 'vg1'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the INDICATOR_SET command.
     * <p>
     * Indicator Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>INDICATOR_0_VALUE {@link String}
     * <li>INDICATOR_OBJECT_COUNT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIndicatorSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Indicator 0 Value'
        response.put("INDICATOR_0_VALUE", constantIndicator0Value.get(payload[2] & 0xff));

        // Process 'Properties1'
        response.put("INDICATOR_OBJECT_COUNT", Integer.valueOf(payload[3] & 0x1F));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 4;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Indicator ID'
            variant.put("INDICATOR_ID", constantIndicatorId.get(payload[4] & 0xff));

            // Process 'Property ID'
            variant.put("PROPERTY_ID", constantPropertyId.get(payload[5] & 0xff));

            // Process 'Value'
            variant.put("VALUE", Integer.valueOf(payload[6]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 1] & 0x1F) >> 0;
        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the INDICATOR_GET command.
     * <p>
     * Indicator Get
     *
     * @param indicatorId {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>NA
     *            <li>BUTTON2_INDICATION
     *            <li>ARMED
     *            <li>BUTTON3_INDICATION
     *            <li>NOT_ARMED
     *            <li>BUTTON4_INDICATION
     *            <li>BUTTON5_INDICATION
     *            <li>READY
     *            <li>FAULT
     *            <li>BUTTON_BACKLIGHT_LETTERS
     *            <li>BUSY
     *            <li>BUTTON_BACKLIGHT_DIGITS
     *            <li>ENTER_ID
     *            <li>BUTTON_BACKLIGHT_COMMAND
     *            <li>ENTER_PIN
     *            <li>BUTTON1_INDICATION
     *            <li>BUTTON10_INDICATION
     *            <li>OK
     *            <li>BUTTON11_INDICATION
     *            <li>NOT_OK
     *            <li>BUTTON12_INDICATION
     *            <li>BUTTON6_INDICATION
     *            <li>BUTTON7_INDICATION
     *            <li>BUTTON8_INDICATION
     *            <li>BUTTON9_INDICATION
     *            <li>ZONE3_ARMED
     *            <li>ZONE4_ARMED
     *            <li>ZONE1_ARMED
     *            <li>ZONE2_ARMED
     *            <li>ZONE5_ARMED
     *            <li>ZONE6_ARMED
     *            <li>LCD_BACKLIGHT
     *            <li>BUZZER
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIndicatorGet(String indicatorId) {
        logger.debug("Creating command message INDICATOR_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(INDICATOR_GET);

        // Process 'Indicator ID'
        boolean foundIndicatorId = false;
        for (Integer entry : constantIndicatorId.keySet()) {
            if (constantIndicatorId.get(entry).equals(indicatorId)) {
                outputData.write(entry);
                foundIndicatorId = true;
                break;
            }
        }
        if (!foundIndicatorId) {
            throw new IllegalArgumentException("Unknown constant value '" + indicatorId + "' for indicatorId");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the INDICATOR_GET command.
     * <p>
     * Indicator Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>INDICATOR_ID {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIndicatorGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Indicator ID'
        response.put("INDICATOR_ID", constantIndicatorId.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the INDICATOR_REPORT command.
     * <p>
     * Indicator Report
     *
     * @param indicator0Value {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>OFF_DISABLE
     *            <li>ON_ENABLE
     *            </ul>
     * @param indicatorObjectCount {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIndicatorReport(String indicator0Value, Integer indicatorObjectCount) {
        logger.debug("Creating command message INDICATOR_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(INDICATOR_REPORT);

        // Process 'Indicator 0 Value'
        boolean foundIndicator0Value = false;
        for (Integer entry : constantIndicator0Value.keySet()) {
            if (constantIndicator0Value.get(entry).equals(indicator0Value)) {
                outputData.write(entry);
                foundIndicator0Value = true;
                break;
            }
        }
        if (!foundIndicator0Value) {
            throw new IllegalArgumentException("Unknown constant value '" + indicator0Value + "' for indicator0Value");
        }

        // Process 'Properties1'
        outputData.write(indicatorObjectCount & 0x1F);

        // Process 'vg1'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the INDICATOR_REPORT command.
     * <p>
     * Indicator Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>INDICATOR_0_VALUE {@link String}
     * <li>INDICATOR_OBJECT_COUNT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIndicatorReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Indicator 0 Value'
        response.put("INDICATOR_0_VALUE", constantIndicator0Value.get(payload[2] & 0xff));

        // Process 'Properties1'
        response.put("INDICATOR_OBJECT_COUNT", Integer.valueOf(payload[3] & 0x1F));

        // Process 'vg1'

        // Create a list to hold the group vg1
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = 4;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Indicator ID'
            variant.put("INDICATOR_ID", constantIndicatorId.get(payload[4] & 0xff));

            // Process 'Property ID'
            variant.put("PROPERTY_ID", constantPropertyId.get(payload[5] & 0xff));

            // Process 'Value'
            variant.put("VALUE", Integer.valueOf(payload[6]));

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 1] & 0x1F) >> 0;
        }

        // Add the variant list to the response
        response.put("VG1", variantList);

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the INDICATOR_SUPPORTED_GET command.
     * <p>
     * Indicator Supported Get
     *
     * @param indicatorId {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>NA
     *            <li>BUTTON2_INDICATION
     *            <li>ARMED
     *            <li>BUTTON3_INDICATION
     *            <li>NOT_ARMED
     *            <li>BUTTON4_INDICATION
     *            <li>BUTTON5_INDICATION
     *            <li>READY
     *            <li>FAULT
     *            <li>BUTTON_BACKLIGHT_LETTERS
     *            <li>BUSY
     *            <li>BUTTON_BACKLIGHT_DIGITS
     *            <li>ENTER_ID
     *            <li>BUTTON_BACKLIGHT_COMMAND
     *            <li>ENTER_PIN
     *            <li>BUTTON1_INDICATION
     *            <li>BUTTON10_INDICATION
     *            <li>OK
     *            <li>BUTTON11_INDICATION
     *            <li>NOT_OK
     *            <li>BUTTON12_INDICATION
     *            <li>BUTTON6_INDICATION
     *            <li>BUTTON7_INDICATION
     *            <li>BUTTON8_INDICATION
     *            <li>BUTTON9_INDICATION
     *            <li>ZONE3_ARMED
     *            <li>ZONE4_ARMED
     *            <li>ZONE1_ARMED
     *            <li>ZONE2_ARMED
     *            <li>ZONE5_ARMED
     *            <li>ZONE6_ARMED
     *            <li>LCD_BACKLIGHT
     *            <li>BUZZER
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIndicatorSupportedGet(String indicatorId) {
        logger.debug("Creating command message INDICATOR_SUPPORTED_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(INDICATOR_SUPPORTED_GET);

        // Process 'Indicator ID'
        boolean foundIndicatorId = false;
        for (Integer entry : constantIndicatorId.keySet()) {
            if (constantIndicatorId.get(entry).equals(indicatorId)) {
                outputData.write(entry);
                foundIndicatorId = true;
                break;
            }
        }
        if (!foundIndicatorId) {
            throw new IllegalArgumentException("Unknown constant value '" + indicatorId + "' for indicatorId");
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the INDICATOR_SUPPORTED_GET command.
     * <p>
     * Indicator Supported Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>INDICATOR_ID {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIndicatorSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Indicator ID'
        response.put("INDICATOR_ID", constantIndicatorId.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the INDICATOR_SUPPORTED_REPORT command.
     * <p>
     * Indicator Supported Report
     *
     * @param indicatorId {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>NA
     *            <li>BUTTON2_INDICATION
     *            <li>ARMED
     *            <li>BUTTON3_INDICATION
     *            <li>NOT_ARMED
     *            <li>BUTTON4_INDICATION
     *            <li>BUTTON5_INDICATION
     *            <li>READY
     *            <li>FAULT
     *            <li>BUTTON_BACKLIGHT_LETTERS
     *            <li>BUSY
     *            <li>BUTTON_BACKLIGHT_DIGITS
     *            <li>ENTER_ID
     *            <li>BUTTON_BACKLIGHT_COMMAND
     *            <li>ENTER_PIN
     *            <li>BUTTON1_INDICATION
     *            <li>BUTTON10_INDICATION
     *            <li>OK
     *            <li>BUTTON11_INDICATION
     *            <li>NOT_OK
     *            <li>BUTTON12_INDICATION
     *            <li>BUTTON6_INDICATION
     *            <li>BUTTON7_INDICATION
     *            <li>BUTTON8_INDICATION
     *            <li>BUTTON9_INDICATION
     *            <li>ZONE3_ARMED
     *            <li>ZONE4_ARMED
     *            <li>ZONE1_ARMED
     *            <li>ZONE2_ARMED
     *            <li>ZONE5_ARMED
     *            <li>ZONE6_ARMED
     *            <li>LCD_BACKLIGHT
     *            <li>BUZZER
     *            </ul>
     * @param nextIndicatorId {@link String}
     *            Can be one of the following -:
     *            <ul>
     *            <li>NA
     *            <li>BUTTON2_INDICATION
     *            <li>ARMED
     *            <li>BUTTON3_INDICATION
     *            <li>NOT_ARMED
     *            <li>BUTTON4_INDICATION
     *            <li>BUTTON5_INDICATION
     *            <li>READY
     *            <li>FAULT
     *            <li>BUTTON_BACKLIGHT_LETTERS
     *            <li>BUSY
     *            <li>BUTTON_BACKLIGHT_DIGITS
     *            <li>ENTER_ID
     *            <li>BUTTON_BACKLIGHT_COMMAND
     *            <li>ENTER_PIN
     *            <li>BUTTON1_INDICATION
     *            <li>BUTTON10_INDICATION
     *            <li>OK
     *            <li>BUTTON11_INDICATION
     *            <li>NOT_OK
     *            <li>BUTTON12_INDICATION
     *            <li>BUTTON6_INDICATION
     *            <li>BUTTON7_INDICATION
     *            <li>BUTTON8_INDICATION
     *            <li>BUTTON9_INDICATION
     *            <li>ZONE3_ARMED
     *            <li>ZONE4_ARMED
     *            <li>ZONE1_ARMED
     *            <li>ZONE2_ARMED
     *            <li>ZONE5_ARMED
     *            <li>ZONE6_ARMED
     *            <li>LCD_BACKLIGHT
     *            <li>BUZZER
     *            </ul>
     * @param propertySupportedBitMask {@link List<String>}
     *            Can be one of the following -:
     *            <ul>
     *            <li>LOW_POWER
     *            <li>MULTILEVEL
     *            <li>BINARY
     *            <li>ON_OFF_PERIOD
     *            <li>ON_OFF_CYCLES
     *            </ul>
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getIndicatorSupportedReport(String indicatorId, String nextIndicatorId,
            List<String> propertySupportedBitMask) {
        logger.debug("Creating command message INDICATOR_SUPPORTED_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(INDICATOR_SUPPORTED_REPORT);

        // Process 'Indicator ID'
        boolean foundIndicatorId = false;
        for (Integer entry : constantIndicatorId.keySet()) {
            if (constantIndicatorId.get(entry).equals(indicatorId)) {
                outputData.write(entry);
                foundIndicatorId = true;
                break;
            }
        }
        if (!foundIndicatorId) {
            throw new IllegalArgumentException("Unknown constant value '" + indicatorId + "' for indicatorId");
        }

        // Process 'Next Indicator ID'
        boolean foundNextIndicatorId = false;
        for (Integer entry : constantNextIndicatorId.keySet()) {
            if (constantNextIndicatorId.get(entry).equals(nextIndicatorId)) {
                outputData.write(entry);
                foundNextIndicatorId = true;
                break;
            }
        }
        if (!foundNextIndicatorId) {
            throw new IllegalArgumentException("Unknown constant value '" + nextIndicatorId + "' for nextIndicatorId");
        }

        // Process 'Properties1'
        outputData.write(0);

        // Process 'Property Supported Bit Mask'
        int valPropertySupportedBitMask = 0;
        valPropertySupportedBitMask |= (propertySupportedBitMask.contains("MULTILEVEL") ? 0x02 : 0);
        valPropertySupportedBitMask |= (propertySupportedBitMask.contains("BINARY") ? 0x04 : 0);
        valPropertySupportedBitMask |= (propertySupportedBitMask.contains("ON_OFF_PERIOD") ? 0x08 : 0);
        valPropertySupportedBitMask |= (propertySupportedBitMask.contains("ON_OFF_CYCLES") ? 0x10 : 0);
        outputData.write(valPropertySupportedBitMask);
        valPropertySupportedBitMask = 0;
        valPropertySupportedBitMask |= (propertySupportedBitMask.contains("LOW_POWER") ? 0x01 : 0);
        outputData.write(valPropertySupportedBitMask);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the INDICATOR_SUPPORTED_REPORT command.
     * <p>
     * Indicator Supported Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>INDICATOR_ID {@link String}
     * <li>NEXT_INDICATOR_ID {@link String}
     * <li>PROPERTY_SUPPORTED_BIT_MASK {@link List}<{@link String}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleIndicatorSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Indicator ID'
        response.put("INDICATOR_ID", constantIndicatorId.get(payload[2] & 0xff));

        // Process 'Next Indicator ID'
        response.put("NEXT_INDICATOR_ID", constantNextIndicatorId.get(payload[3] & 0xff));

        // Process 'Properties1'
        response.put("PROPERTY_SUPPORTED_BIT_MASK_LENGTH", Integer.valueOf(payload[4] & 0x1F));

        // Process 'Property Supported Bit Mask'
        List<String> responsePropertySupportedBitMask = new ArrayList<String>();
        int lenPropertySupportedBitMask = (payload[4] & 0x1F) * 8;
        for (int cntPropertySupportedBitMask = 0; cntPropertySupportedBitMask < lenPropertySupportedBitMask; cntPropertySupportedBitMask++) {
            if ((payload[5 + (cntPropertySupportedBitMask / 8)] & (1 << cntPropertySupportedBitMask % 8)) == 0) {
                continue;
            }
            responsePropertySupportedBitMask.add(constantPropertySupportedBitMask.get(cntPropertySupportedBitMask));
        }
        response.put("PROPERTY_SUPPORTED_BIT_MASK", responsePropertySupportedBitMask);

        // Return the map of processed response data;
        return response;
    }

}
