/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_INCLUSION_CONTROLLER</b> version <b>1</b>.<br>
 *
 * Command Class Inclusion Controller<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassInclusionControllerV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassInclusionControllerV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_INCLUSION_CONTROLLER
     */
    public final static int COMMAND_CLASS_KEY = 0x74;

    /**
     * Initiate Command Constant
     */
    public final static int INITIATE = 0x01;
    /**
     * Complete Command Constant
     */
    public final static int COMPLETE = 0x02;

    /**
     * Creates a new message with the INITIATE command.<br>
     *
     * Initiate<br>
     *
     *
     * @param nodeId {@link Integer}
     * @param stepId {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getInitiate(Integer nodeId, String stepId) {
        logger.debug("Creating command message INITIATE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(INITIATE);

        // Process 'Node ID'
        // Check the node number boundary
        if (nodeId < 1 || nodeId > 232) {
            logger.debug("Node number is out of bounds {}", nodeId);
            return null;
        }
        outputData.write(nodeId);

        // Process 'Step ID'
        switch (stepId) {
            case "PROXY_INCLUSION":
                outputData.write(0x01);
                break;
            case "S0_INCLUSION":
                outputData.write(0x02);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for stepId: " + stepId);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the INITIATE command<br>
     *
     * Initiate<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>NODE_ID {@link Integer}
     * <li>STEP_ID {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleInitiate(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Node ID'
        response.put("NODE_ID", Integer.valueOf(payload[2]));

        // Process 'Step ID'
        switch ((int) payload[3]) {
            case (byte) 0x01:
                response.put("STEP_ID", "PROXY_INCLUSION");
                break;
            case (byte) 0x02:
                response.put("STEP_ID", "S0_INCLUSION");
                break;
            default:
                logger.debug("Unknown value {} for constant 'STEP_ID'", String.format("%02X", payload[3]));
                response.put("STEP_ID", "UNKNOWN_" + String.format("%02X", payload[3]));
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the COMPLETE command.<br>
     *
     * Complete<br>
     *
     *
     * @param stepId {@link String}
     * @param status {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getComplete(String stepId, String status) {
        logger.debug("Creating command message COMPLETE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(COMPLETE);

        // Process 'Step ID'
        switch (stepId) {
            case "PROXY_INCLUSION":
                outputData.write(0x01);
                break;
            case "S0_INCLUSION":
                outputData.write(0x02);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for stepId: " + stepId);
        }

        // Process 'Status'
        switch (status) {
            case "STEP_OK":
                outputData.write(0x01);
                break;
            case "STEP_USER_REJECTED":
                outputData.write(0x02);
                break;
            case "STEP_FAILED":
                outputData.write(0x03);
                break;
            case "STEP_NOT_SUPPORTED":
                outputData.write(0x04);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for status: " + status);
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the COMPLETE command<br>
     *
     * Complete<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>STEP_ID {@link String}
     * <li>STATUS {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleComplete(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Step ID'
        switch ((int) payload[2]) {
            case (byte) 0x01:
                response.put("STEP_ID", "PROXY_INCLUSION");
                break;
            case (byte) 0x02:
                response.put("STEP_ID", "S0_INCLUSION");
                break;
            default:
                logger.debug("Unknown value {} for constant 'STEP_ID'", String.format("%02X", payload[2]));
                response.put("STEP_ID", "UNKNOWN_" + String.format("%02X", payload[2]));
                break;
        }

        // Process 'Status'
        switch ((int) payload[3]) {
            case (byte) 0x01:
                response.put("STATUS", "STEP_OK");
                break;
            case (byte) 0x02:
                response.put("STATUS", "STEP_USER_REJECTED");
                break;
            case (byte) 0x03:
                response.put("STATUS", "STEP_FAILED");
                break;
            case (byte) 0x04:
                response.put("STATUS", "STEP_NOT_SUPPORTED");
                break;
            default:
                logger.debug("Unknown value {} for constant 'STATUS'", String.format("%02X", payload[3]));
                response.put("STATUS", "UNKNOWN_" + String.format("%02X", payload[3]));
                break;
        }

        // Return the map of processed response data;
        return response;
    }

}
