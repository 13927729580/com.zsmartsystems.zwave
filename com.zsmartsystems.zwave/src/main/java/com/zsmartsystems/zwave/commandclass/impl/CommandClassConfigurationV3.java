/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CONFIGURATION</b> version <b>3</b>.<br>
 *
 * Command Class Configuration<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassConfigurationV3 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassConfigurationV3.class);

    /**
     * Integer command class key for COMMAND_CLASS_CONFIGURATION
     */
    public final static int COMMAND_CLASS_KEY = 0x70;

    /**
     * Configuration Set Command Constant
     */
    public final static int CONFIGURATION_SET = 0x04;
    /**
     * Configuration Get Command Constant
     */
    public final static int CONFIGURATION_GET = 0x05;
    /**
     * Configuration Report Command Constant
     */
    public final static int CONFIGURATION_REPORT = 0x06;
    /**
     * Configuration Bulk Set Command Constant
     */
    public final static int CONFIGURATION_BULK_SET = 0x07;
    /**
     * Configuration Bulk Get Command Constant
     */
    public final static int CONFIGURATION_BULK_GET = 0x08;
    /**
     * Configuration Bulk Report Command Constant
     */
    public final static int CONFIGURATION_BULK_REPORT = 0x09;
    /**
     * Configuration Name Get Command Constant
     */
    public final static int CONFIGURATION_NAME_GET = 0x0A;
    /**
     * Configuration Name Report Command Constant
     */
    public final static int CONFIGURATION_NAME_REPORT = 0x0B;
    /**
     * Configuration Info Get Command Constant
     */
    public final static int CONFIGURATION_INFO_GET = 0x0C;
    /**
     * Configuration Info Report Command Constant
     */
    public final static int CONFIGURATION_INFO_REPORT = 0x0D;
    /**
     * Configuration Properties Get Command Constant
     */
    public final static int CONFIGURATION_PROPERTIES_GET = 0x0E;
    /**
     * Configuration Properties Report Command Constant
     */
    public final static int CONFIGURATION_PROPERTIES_REPORT = 0x0F;

    /**
     * Creates a new message with the CONFIGURATION_SET command.<br>
     *
     * Configuration Set<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @param size {@link Integer}
     * @param defaultValue {@link Boolean}
     * @param configurationValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationSet(Integer parameterNumber, Integer size, Boolean defaultValue,
            byte[] configurationValue) {
        logger.debug("Creating command message CONFIGURATION_SET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_SET);

        // Process 'Parameter Number'
        outputData.write(parameterNumber);

        // Process 'Level'
        int valLevel = 0;
        valLevel |= size & 0x07;
        valLevel |= defaultValue ? 0x80 : 0;
        outputData.write(valLevel);

        // Process 'Configuration Value'
        try {
            outputData.write(configurationValue);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_SET command<br>
     *
     * Configuration Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * <li>SIZE {@link Integer}
     * <li>DEFAULT {@link Boolean}
     * <li>CONFIGURATION_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Level'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("DEFAULT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Configuration Value'
        int valConfigurationValue = 0;
        int lenConfigurationValue = payload[msgOffset - 1] & 0x07;
        for (int cntConfigurationValue = 0; cntConfigurationValue < lenConfigurationValue; cntConfigurationValue++) {
            valConfigurationValue = (valConfigurationValue << 8) + payload[msgOffset + cntConfigurationValue];
        }
        response.put("CONFIGURATION_VALUE", valConfigurationValue);
        msgOffset += lenConfigurationValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_GET command.<br>
     *
     * Configuration Get<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationGet(Integer parameterNumber) {
        logger.debug("Creating command message CONFIGURATION_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_GET);

        // Process 'Parameter Number'
        outputData.write(parameterNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_GET command<br>
     *
     * Configuration Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_REPORT command.<br>
     *
     * Configuration Report<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @param size {@link Integer}
     * @param configurationValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationReport(Integer parameterNumber, Integer size, byte[] configurationValue) {
        logger.debug("Creating command message CONFIGURATION_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_REPORT);

        // Process 'Parameter Number'
        outputData.write(parameterNumber);

        // Process 'Level'
        outputData.write(size & 0x07);

        // Process 'Configuration Value'
        try {
            outputData.write(configurationValue);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_REPORT command<br>
     *
     * Configuration Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * <li>SIZE {@link Integer}
     * <li>CONFIGURATION_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Level'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        msgOffset += 1;

        // Process 'Configuration Value'
        int valConfigurationValue = 0;
        int lenConfigurationValue = payload[msgOffset - 1] & 0x07;
        for (int cntConfigurationValue = 0; cntConfigurationValue < lenConfigurationValue; cntConfigurationValue++) {
            valConfigurationValue = (valConfigurationValue << 8) + payload[msgOffset + cntConfigurationValue];
        }
        response.put("CONFIGURATION_VALUE", valConfigurationValue);
        msgOffset += lenConfigurationValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_BULK_SET command.<br>
     *
     * Configuration Bulk Set<br>
     *
     *
     * @param parameterOffset {@link Integer}
     * @param numberOfParameters {@link Integer}
     * @param size {@link Integer}
     * @param handshake {@link Boolean}
     * @param defaultValue {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationBulkSet(Integer parameterOffset, Integer numberOfParameters, Integer size,
            Boolean handshake, Boolean defaultValue) {
        logger.debug("Creating command message CONFIGURATION_BULK_SET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_BULK_SET);

        // Process 'Parameter Offset'
        outputData.write((parameterOffset >> 8) & 0xff);
        outputData.write(parameterOffset & 0xff);

        // Process 'Number of Parameters'
        outputData.write(numberOfParameters);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= handshake ? 0x40 : 0;
        valProperties1 |= defaultValue ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_BULK_SET command<br>
     *
     * Configuration Bulk Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_OFFSET {@link Integer}
     * <li>NUMBER_OF_PARAMETERS {@link Integer}
     * <li>SIZE {@link Integer}
     * <li>HANDSHAKE {@link Boolean}
     * <li>DEFAULT {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationBulkSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Offset'
        response.put("PARAMETER_OFFSET", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Process 'Number of Parameters'
        response.put("NUMBER_OF_PARAMETERS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("HANDSHAKE", Boolean.valueOf((payload[msgOffset] & 0x40) != 0));
        response.put("DEFAULT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = msgOffset;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Parameter'
            int valParameter = 0;
            int lenParameter = payload[msgOffset - -130] & 0x07;
            for (int cntParameter = 0; cntParameter < lenParameter; cntParameter++) {
                valParameter = (valParameter << 8) + payload[msgOffset + cntParameter];
            }
            variant.put("PARAMETER", valParameter);
            msgOffset += lenParameter;

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 1] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_BULK_GET command.<br>
     *
     * Configuration Bulk Get<br>
     *
     *
     * @param parameterOffset {@link Integer}
     * @param numberOfParameters {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationBulkGet(Integer parameterOffset, Integer numberOfParameters) {
        logger.debug("Creating command message CONFIGURATION_BULK_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_BULK_GET);

        // Process 'Parameter Offset'
        outputData.write((parameterOffset >> 8) & 0xff);
        outputData.write(parameterOffset & 0xff);

        // Process 'Number of Parameters'
        outputData.write(numberOfParameters);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_BULK_GET command<br>
     *
     * Configuration Bulk Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_OFFSET {@link Integer}
     * <li>NUMBER_OF_PARAMETERS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationBulkGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter Offset'
        response.put("PARAMETER_OFFSET", Integer.valueOf(payload[2] << 8 + payload[3]));

        // Process 'Number of Parameters'
        response.put("NUMBER_OF_PARAMETERS", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_BULK_REPORT command.<br>
     *
     * Configuration Bulk Report<br>
     *
     *
     * @param parameterOffset {@link Integer}
     * @param numberOfParameters {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param size {@link Integer}
     * @param handshake {@link Boolean}
     * @param defaultValue {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationBulkReport(Integer parameterOffset, Integer numberOfParameters,
            Integer reportsToFollow, Integer size, Boolean handshake, Boolean defaultValue) {
        logger.debug("Creating command message CONFIGURATION_BULK_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_BULK_REPORT);

        // Process 'Parameter Offset'
        outputData.write((parameterOffset >> 8) & 0xff);
        outputData.write(parameterOffset & 0xff);

        // Process 'Number of Parameters'
        outputData.write(numberOfParameters);

        // Process 'Reports to follow'
        outputData.write(reportsToFollow);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= handshake ? 0x40 : 0;
        valProperties1 |= defaultValue ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'vg'

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_BULK_REPORT command<br>
     *
     * Configuration Bulk Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_OFFSET {@link Integer}
     * <li>NUMBER_OF_PARAMETERS {@link Integer}
     * <li>REPORTS_TO_FOLLOW {@link Integer}
     * <li>SIZE {@link Integer}
     * <li>HANDSHAKE {@link Boolean}
     * <li>DEFAULT {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationBulkReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Offset'
        response.put("PARAMETER_OFFSET", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Process 'Number of Parameters'
        response.put("NUMBER_OF_PARAMETERS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Reports to follow'
        response.put("REPORTS_TO_FOLLOW", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("HANDSHAKE", Boolean.valueOf((payload[msgOffset] & 0x40) != 0));
        response.put("DEFAULT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'vg'

        // Create a list to hold the group vg
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = msgOffset;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Parameter'
            int valParameter = 0;
            int lenParameter = payload[msgOffset - -131] & 0x07;
            for (int cntParameter = 0; cntParameter < lenParameter; cntParameter++) {
                valParameter = (valParameter << 8) + payload[msgOffset + cntParameter];
            }
            variant.put("PARAMETER", valParameter);
            msgOffset += lenParameter;

            // Add to the list
            variantList.add(variant);

            // Add the length of this variant
            offset += (payload[offset + 1] & 0xFF) >> 0;
        }

        // Add the variant list to the response
        response.put("VG", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_NAME_GET command.<br>
     *
     * Configuration Name Get<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationNameGet(Integer parameterNumber) {
        logger.debug("Creating command message CONFIGURATION_NAME_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_NAME_GET);

        // Process 'Parameter Number'
        outputData.write((parameterNumber >> 8) & 0xff);
        outputData.write(parameterNumber & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_NAME_GET command<br>
     *
     * Configuration Name Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationNameGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[2] << 8 + payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_NAME_REPORT command.<br>
     *
     * Configuration Name Report<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param name {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationNameReport(Integer parameterNumber, Integer reportsToFollow, byte[] name) {
        logger.debug("Creating command message CONFIGURATION_NAME_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_NAME_REPORT);

        // Process 'Parameter Number'
        outputData.write((parameterNumber >> 8) & 0xff);
        outputData.write(parameterNumber & 0xff);

        // Process 'Reports to follow'
        outputData.write(reportsToFollow);

        // Process 'Name'
        try {
            outputData.write(name);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_NAME_REPORT command<br>
     *
     * Configuration Name Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * <li>REPORTS_TO_FOLLOW {@link Integer}
     * <li>NAME {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationNameReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Process 'Reports to follow'
        response.put("REPORTS_TO_FOLLOW", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Name'
        ByteArrayOutputStream valName = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valName.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("NAME", valName);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_INFO_GET command.<br>
     *
     * Configuration Info Get<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationInfoGet(Integer parameterNumber) {
        logger.debug("Creating command message CONFIGURATION_INFO_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_INFO_GET);

        // Process 'Parameter Number'
        outputData.write((parameterNumber >> 8) & 0xff);
        outputData.write(parameterNumber & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_INFO_GET command<br>
     *
     * Configuration Info Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationInfoGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[2] << 8 + payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_INFO_REPORT command.<br>
     *
     * Configuration Info Report<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @param reportsToFollow {@link Integer}
     * @param info {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationInfoReport(Integer parameterNumber, Integer reportsToFollow, byte[] info) {
        logger.debug("Creating command message CONFIGURATION_INFO_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_INFO_REPORT);

        // Process 'Parameter Number'
        outputData.write((parameterNumber >> 8) & 0xff);
        outputData.write(parameterNumber & 0xff);

        // Process 'Reports to follow'
        outputData.write(reportsToFollow);

        // Process 'Info'
        try {
            outputData.write(info);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_INFO_REPORT command<br>
     *
     * Configuration Info Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * <li>REPORTS_TO_FOLLOW {@link Integer}
     * <li>INFO {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationInfoReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Process 'Reports to follow'
        response.put("REPORTS_TO_FOLLOW", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Info'
        ByteArrayOutputStream valInfo = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valInfo.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("INFO", valInfo);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_PROPERTIES_GET command.<br>
     *
     * Configuration Properties Get<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationPropertiesGet(Integer parameterNumber) {
        logger.debug("Creating command message CONFIGURATION_PROPERTIES_GET version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_PROPERTIES_GET);

        // Process 'Parameter Number'
        outputData.write((parameterNumber >> 8) & 0xff);
        outputData.write(parameterNumber & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_PROPERTIES_GET command<br>
     *
     * Configuration Properties Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationPropertiesGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[2] << 8 + payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONFIGURATION_PROPERTIES_REPORT command.<br>
     *
     * Configuration Properties Report<br>
     *
     *
     * @param parameterNumber {@link Integer}
     * @param size {@link Integer}
     * @param format {@link String}
     * @param minValue {@link byte[]}
     * @param maxValue {@link byte[]}
     * @param defaultValue {@link byte[]}
     * @param nextParameterNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getConfigurationPropertiesReport(Integer parameterNumber, Integer size, String format,
            byte[] minValue, byte[] maxValue, byte[] defaultValue, Integer nextParameterNumber) {
        logger.debug("Creating command message CONFIGURATION_PROPERTIES_REPORT version 3");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONFIGURATION_PROPERTIES_REPORT);

        // Process 'Parameter Number'
        outputData.write((parameterNumber >> 8) & 0xff);
        outputData.write(parameterNumber & 0xff);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        int valformat;
        switch (format) {
            case "SIGNED_INTEGER":
                valformat = 0;
                break;
            case "UNSIGNED_INTEGER":
                valformat = 1;
                break;
            case "ENUMERATED":
                valformat = 2;
                break;
            case "BIT_FIELD":
                valformat = 3;
                break;
            default:
                throw new IllegalArgumentException("Unknown enum value for format: " + format);
        }
        valProperties1 |= valformat >> 3 & 0x38;
        outputData.write(valProperties1);

        // Process 'Min Value'
        try {
            outputData.write(minValue);
        } catch (IOException e) {
        }

        // Process 'Max Value'
        try {
            outputData.write(maxValue);
        } catch (IOException e) {
        }

        // Process 'Default Value'
        try {
            outputData.write(defaultValue);
        } catch (IOException e) {
        }

        // Process 'Next Parameter Number'
        outputData.write((nextParameterNumber >> 8) & 0xff);
        outputData.write(nextParameterNumber & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONFIGURATION_PROPERTIES_REPORT command<br>
     *
     * Configuration Properties Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>PARAMETER_NUMBER {@link Integer}
     * <li>SIZE {@link Integer}
     * <li>FORMAT {@link String}
     * <li>MIN_VALUE {@link byte[]}
     * <li>MAX_VALUE {@link byte[]}
     * <li>DEFAULT_VALUE {@link byte[]}
     * <li>NEXT_PARAMETER_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleConfigurationPropertiesReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Parameter Number'
        response.put("PARAMETER_NUMBER", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        switch ((payload[msgOffset] & 0x38) >> 3) {
            case 0x00:
                response.put("FORMAT", "SIGNED_INTEGER");
                break;
            case 0x01:
                response.put("FORMAT", "UNSIGNED_INTEGER");
                break;
            case 0x02:
                response.put("FORMAT", "ENUMERATED");
                break;
            case 0x03:
                response.put("FORMAT", "BIT_FIELD");
                break;
            default:
                logger.debug("Unknown enum value {} for FORMAT", String.format("0x%02X", msgOffset));
        }
        msgOffset += 1;

        // Process 'Min Value'
        int valMinValue = 0;
        int lenMinValue = payload[msgOffset - 1] & 0x07;
        for (int cntMinValue = 0; cntMinValue < lenMinValue; cntMinValue++) {
            valMinValue = (valMinValue << 8) + payload[msgOffset + cntMinValue];
        }
        response.put("MIN_VALUE", valMinValue);
        msgOffset += lenMinValue;

        // Process 'Max Value'
        int valMaxValue = 0;
        int lenMaxValue = payload[msgOffset - 2] & 0x07;
        for (int cntMaxValue = 0; cntMaxValue < lenMaxValue; cntMaxValue++) {
            valMaxValue = (valMaxValue << 8) + payload[msgOffset + cntMaxValue];
        }
        response.put("MAX_VALUE", valMaxValue);
        msgOffset += lenMaxValue;

        // Process 'Default Value'
        int valDefaultValue = 0;
        int lenDefaultValue = payload[msgOffset - 3] & 0x07;
        for (int cntDefaultValue = 0; cntDefaultValue < lenDefaultValue; cntDefaultValue++) {
            valDefaultValue = (valDefaultValue << 8) + payload[msgOffset + cntDefaultValue];
        }
        response.put("DEFAULT_VALUE", valDefaultValue);
        msgOffset += lenDefaultValue;

        // Process 'Next Parameter Number'
        response.put("NEXT_PARAMETER_NUMBER", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Return the map of processed response data;
        return response;
    }

}
