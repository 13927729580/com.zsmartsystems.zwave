/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SILENCE_ALARM</b> version <b>1</b>.<br>
 *
 * Command Class Silence Alarm<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSilenceAlarmV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSilenceAlarmV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SILENCE_ALARM
     */
    public final static int COMMAND_CLASS_KEY = 0x9D;

    /**
     * Sensor Alarm Set Command Constant
     */
    public final static int SENSOR_ALARM_SET = 0x01;

    /**
     * Creates a new message with the SENSOR_ALARM_SET command.<br>
     *
     * Sensor Alarm Set<br>
     *
     *
     * @param mode {@link Integer}
     * @param seconds {@link Integer}
     * @param numberOfBitMasks {@link Integer}
     * @param bitMask {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSensorAlarmSet(Integer mode, Integer seconds, Integer numberOfBitMasks, byte[] bitMask) {
        logger.debug("Creating command message SENSOR_ALARM_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SENSOR_ALARM_SET);

        // Process 'Mode'
        outputData.write(mode);

        // Process 'Seconds'
        outputData.write((seconds >> 8) & 0xff);
        outputData.write(seconds & 0xff);

        // Process 'Number of Bit Masks'
        outputData.write(numberOfBitMasks);

        // Process 'Bit Mask'
        try {
            outputData.write(bitMask);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SENSOR_ALARM_SET command<br>
     *
     * Sensor Alarm Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MODE {@link Integer}
     * <li>SECONDS {@link Integer}
     * <li>NUMBER_OF_BIT_MASKS {@link Integer}
     * <li>BIT_MASK {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSensorAlarmSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Mode'
        switch ((int) payload[msgOffset]) {
            case 0x00:
                response.put("MODE", "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS");
                break;
            case 0x01:
                response.put("MODE", "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_INDEPENDENT_OF_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM");
                break;
            case 0x02:
                response.put("MODE", "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK");
                break;
            case 0x03:
                response.put("MODE", "DISABLE_SOUNDING_OF_ALL_SENSOR_ALARMS_ACCORDING_TO_BIT_MASK_WHICH_HAVE_RECEIVED_THE_ALARM");
                break;
            default:
                logger.debug("");
                break;
        }
        msgOffset += 1;

        // Process 'Seconds'
        response.put("SECONDS", Integer.valueOf(payload[msgOffset] << 8 + payload[msgOffset + 12]));
        msgOffset += 2;

        // Process 'Number of Bit Masks'
        response.put("NUMBER_OF_BIT_MASKS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Bit Mask'
        int valBitMask = 0;
        int lenBitMask = payload[msgOffset - 1];
        for (int cntBitMask = 0; cntBitMask < lenBitMask; cntBitMask++) {
            valBitMask = (valBitMask << 8) + payload[msgOffset + cntBitMask];
        }
        response.put("BIT_MASK", valBitMask);
        msgOffset += lenBitMask;

        // Return the map of processed response data;
        return response;
    }

}
