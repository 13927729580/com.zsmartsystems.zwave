/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SWITCH_BINARY</b> version <b>2</b>.<br>
 * <p>
 * Command Class Switch Binary<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSwitchBinaryV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSwitchBinaryV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_SWITCH_BINARY
     */
    public final static int COMMAND_CLASS_KEY = 0x25;

    /**
     * Switch Binary Set Command Constant
     */
    public final static int SWITCH_BINARY_SET = 0x01;
    /**
     * Switch Binary Get Command Constant
     */
    public final static int SWITCH_BINARY_GET = 0x02;
    /**
     * Switch Binary Report Command Constant
     */
    public final static int SWITCH_BINARY_REPORT = 0x03;


    // Define constants for Duration
    private static Map<Integer, String> constantDuration = new HashMap<Integer, String>();

    // Define constants for Target Value
    private static Map<Integer, String> constantTargetValue = new HashMap<Integer, String>();

    // Define constants for Current Value
    private static Map<Integer, String> constantCurrentValue = new HashMap<Integer, String>();

    static {
        // Constants for Duration
        constantDuration.put(0x00, "INSTANTLY");
        constantDuration.put(0xFF, "DEFAULT");
        // Constants for Target Value
        constantTargetValue.put(0x00, "OFF_DISABLE");
        constantTargetValue.put(0xFF, "ON_ENABLE");
        // Constants for Current Value
        constantCurrentValue.put(0x00, "OFF_DISABLE");
        constantCurrentValue.put(0xFF, "ON_ENABLE");
    }

    /**
     * Creates a new message with the SWITCH_BINARY_SET command.<br>
     * <p>
     * Switch Binary Set<br>
     *
     * @param targetValue {@link String}
     * @param duration {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchBinarySet(String targetValue, String duration) {
        logger.debug("Creating command message SWITCH_BINARY_SET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_BINARY_SET);

        // Process 'Target Value'
        for (Integer entry : constantTargetValue.keySet()) {
            if (constantTargetValue.get(entry).equals(targetValue)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Duration'
        for (Integer entry : constantDuration.keySet()) {
            if (constantDuration.get(entry).equals(duration)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_BINARY_SET command<br>
     * <p>
     * Switch Binary Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TARGET_VALUE {@link String}
     * <li>DURATION {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchBinarySet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Target Value'
        response.put("TARGET_VALUE", constantTargetValue.get(payload[2] & 0xff));

        // Process 'Duration'
        response.put("DURATION", constantDuration.get(payload[3] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_BINARY_GET command.<br>
     * <p>
     * Switch Binary Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchBinaryGet() {
        logger.debug("Creating command message SWITCH_BINARY_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_BINARY_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_BINARY_GET command<br>
     * <p>
     * Switch Binary Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchBinaryGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SWITCH_BINARY_REPORT command.<br>
     * <p>
     * Switch Binary Report<br>
     *
     * @param currentValue {@link String}
     * @param targetValue {@link String}
     * @param duration {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSwitchBinaryReport(String currentValue, String targetValue, String duration) {
        logger.debug("Creating command message SWITCH_BINARY_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SWITCH_BINARY_REPORT);

        // Process 'Current Value'
        for (Integer entry : constantCurrentValue.keySet()) {
            if (constantCurrentValue.get(entry).equals(currentValue)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Target Value'
        for (Integer entry : constantTargetValue.keySet()) {
            if (constantTargetValue.get(entry).equals(targetValue)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Duration'
        for (Integer entry : constantDuration.keySet()) {
            if (constantDuration.get(entry).equals(duration)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SWITCH_BINARY_REPORT command<br>
     * <p>
     * Switch Binary Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>CURRENT_VALUE {@link String}
     * <li>TARGET_VALUE {@link String}
     * <li>DURATION {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSwitchBinaryReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Current Value'
        response.put("CURRENT_VALUE", constantCurrentValue.get(payload[2] & 0xff));

        // Process 'Target Value'
        response.put("TARGET_VALUE", constantTargetValue.get(payload[3] & 0xff));

        // Process 'Duration'
        response.put("DURATION", constantDuration.get(payload[4] & 0xff));

        // Return the map of processed response data;
        return response;
    }

}
