/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_USER_CODE</b> version <b>1</b>.<br>
 *
 * Command Class User Code<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassUserCodeV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassUserCodeV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_USER_CODE
     */
    public final static int COMMAND_CLASS_KEY = 0x63;

    /**
     * User Code Set Command Constant
     */
    public final static int USER_CODE_SET = 0x01;
    /**
     * User Code Get Command Constant
     */
    public final static int USER_CODE_GET = 0x02;
    /**
     * User Code Report Command Constant
     */
    public final static int USER_CODE_REPORT = 0x03;
    /**
     * Users Number Get Command Constant
     */
    public final static int USERS_NUMBER_GET = 0x04;
    /**
     * Users Number Report Command Constant
     */
    public final static int USERS_NUMBER_REPORT = 0x05;

    /**
     * Creates a new message with the USER_CODE_SET command.<br>
     *
     * User Code Set<br>
     *
     *
     * @param userIdentifier {@link Integer}
     * @param userIdStatus {@link String}
     * @param userCode {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getUserCodeSet(Integer userIdentifier, String userIdStatus, byte[] userCode) {
        logger.debug("Creating command message USER_CODE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(USER_CODE_SET);

        // Process 'User Identifier'
        outputData.write(userIdentifier);

        // Process 'User ID Status'
        switch (userIdStatus) {
            case "AVAILABLE":
                outputData.write(0x00);
                break;
            case "OCCUPIED":
                outputData.write(0x01);
                break;
            case "STATUS_NOT_AVAILABLE":
                outputData.write(0xFE);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for userIdStatus: " + userIdStatus);
        }

        // Process 'USER_CODE'
        try {
            outputData.write(userCode);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the USER_CODE_SET command<br>
     *
     * User Code Set<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>USER_IDENTIFIER {@link Integer}
     * <li>USER_ID_STATUS {@link String}
     * <li>USER_CODE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleUserCodeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'User Identifier'
        response.put("USER_IDENTIFIER", new Integer(payload[2]));

        // Process 'User ID Status'
        switch ((int) payload[3]) {
            case (byte) 0x00:
                response.put("USER_ID_STATUS", "AVAILABLE");
                break;
            case (byte) 0x01:
                response.put("USER_ID_STATUS", "OCCUPIED");
                break;
            case (byte) 0xFE:
                response.put("USER_ID_STATUS", "STATUS_NOT_AVAILABLE");
                break;
            default:
                logger.debug("Unknown value {} for constant 'USER_ID_STATUS'", String.format("%02X", payload[3]));
                response.put("USER_ID_STATUS", "UNKNOWN_" + String.format("%02X", payload[3]));
                break;
        }

        // Process 'USER_CODE'
        byte[] valUserCode = new byte[10];
        for (int cntUserCode = 0; cntUserCode < 10; cntUserCode++) {
            valUserCode[cntUserCode] = payload[4 + cntUserCode];
        }
        response.put("USER_CODE", valUserCode);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the USER_CODE_GET command.<br>
     *
     * User Code Get<br>
     *
     *
     * @param userIdentifier {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getUserCodeGet(Integer userIdentifier) {
        logger.debug("Creating command message USER_CODE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(USER_CODE_GET);

        // Process 'User Identifier'
        outputData.write(userIdentifier);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the USER_CODE_GET command<br>
     *
     * User Code Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>USER_IDENTIFIER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleUserCodeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'User Identifier'
        response.put("USER_IDENTIFIER", new Integer(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the USER_CODE_REPORT command.<br>
     *
     * User Code Report<br>
     *
     *
     * @param userIdentifier {@link Integer}
     * @param userIdStatus {@link String}
     * @param userCode {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getUserCodeReport(Integer userIdentifier, String userIdStatus, byte[] userCode) {
        logger.debug("Creating command message USER_CODE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(USER_CODE_REPORT);

        // Process 'User Identifier'
        outputData.write(userIdentifier);

        // Process 'User ID Status'
        switch (userIdStatus) {
            case "AVAILABLE":
                outputData.write(0x00);
                break;
            case "OCCUPIED":
                outputData.write(0x01);
                break;
            case "STATUS_NOT_AVAILABLE":
                outputData.write(0xFE);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for userIdStatus: " + userIdStatus);
        }

        // Process 'USER_CODE'
        try {
            outputData.write(userCode);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the USER_CODE_REPORT command<br>
     *
     * User Code Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>USER_IDENTIFIER {@link Integer}
     * <li>USER_ID_STATUS {@link String}
     * <li>USER_CODE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleUserCodeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'User Identifier'
        response.put("USER_IDENTIFIER", new Integer(payload[2]));

        // Process 'User ID Status'
        switch ((int) payload[3]) {
            case (byte) 0x00:
                response.put("USER_ID_STATUS", "AVAILABLE");
                break;
            case (byte) 0x01:
                response.put("USER_ID_STATUS", "OCCUPIED");
                break;
            case (byte) 0xFE:
                response.put("USER_ID_STATUS", "STATUS_NOT_AVAILABLE");
                break;
            default:
                logger.debug("Unknown value {} for constant 'USER_ID_STATUS'", String.format("%02X", payload[3]));
                response.put("USER_ID_STATUS", "UNKNOWN_" + String.format("%02X", payload[3]));
                break;
        }

        // Process 'USER_CODE'
        byte[] valUserCode = new byte[10];
        for (int cntUserCode = 0; cntUserCode < 10; cntUserCode++) {
            valUserCode[cntUserCode] = payload[4 + cntUserCode];
        }
        response.put("USER_CODE", valUserCode);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the USERS_NUMBER_GET command.<br>
     *
     * Users Number Get<br>
     *
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getUsersNumberGet() {
        logger.debug("Creating command message USERS_NUMBER_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(USERS_NUMBER_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the USERS_NUMBER_GET command<br>
     *
     * Users Number Get<br>
     *
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleUsersNumberGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the USERS_NUMBER_REPORT command.<br>
     *
     * Users Number Report<br>
     *
     *
     * @param supportedUsers {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getUsersNumberReport(Integer supportedUsers) {
        logger.debug("Creating command message USERS_NUMBER_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(USERS_NUMBER_REPORT);

        // Process 'Supported Users'
        outputData.write(supportedUsers);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the USERS_NUMBER_REPORT command<br>
     *
     * Users Number Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SUPPORTED_USERS {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleUsersNumberReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Supported Users'
        response.put("SUPPORTED_USERS", new Integer(payload[2]));

        // Return the map of processed response data;
        return response;
    }

}
