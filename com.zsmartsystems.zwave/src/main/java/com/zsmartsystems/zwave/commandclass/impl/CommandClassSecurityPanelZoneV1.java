/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_SECURITY_PANEL_ZONE</b> version <b>1</b>.<br>
 *
 * Command Class Security Panel Zone<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassSecurityPanelZoneV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassSecurityPanelZoneV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_SECURITY_PANEL_ZONE
     */
    public final static int COMMAND_CLASS_KEY = 0x2E;

    /**
     * Security Panel Zone Number Supported Get Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET = 0x01;
    /**
     * Security Panel Zone Supported Report Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_SUPPORTED_REPORT = 0x02;
    /**
     * Security Panel Zone Type Get Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_TYPE_GET = 0x03;
    /**
     * Security Panel Zone Type Report Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_TYPE_REPORT = 0x04;
    /**
     * Security Panel Zone State Get Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_STATE_GET = 0x05;
    /**
     * Security Panel Zone State Report Command Constant
     */
    public final static int SECURITY_PANEL_ZONE_STATE_REPORT = 0x06;

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET command.<br>
     *
     * Security Panel Zone Number Supported Get<br>
     *
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneNumberSupportedGet() {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_NUMBER_SUPPORTED_GET command<br>
     *
     * Security Panel Zone Number Supported Get<br>
     *
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneNumberSupportedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_SUPPORTED_REPORT command.<br>
     *
     * Security Panel Zone Supported Report<br>
     *
     *
     * @param zonesSupported {@link Integer}
     * @param zm {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneSupportedReport(Integer zonesSupported, Boolean zm) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_SUPPORTED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_SUPPORTED_REPORT);

        // Process 'Parameters1'
        int valParameters1 = 0;
        valParameters1 |= zonesSupported & 0x7F;
        valParameters1 |= zm ? 0x80 : 0;
        outputData.write(valParameters1);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_SUPPORTED_REPORT command<br>
     *
     * Security Panel Zone Supported Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>ZONES_SUPPORTED {@link Integer}
     * <li>ZM {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneSupportedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Parameters1'
        response.put("ZONES_SUPPORTED", Integer.valueOf(payload[2] & 0x7F));
        response.put("ZM", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_TYPE_GET command.<br>
     *
     * Security Panel Zone Type Get<br>
     *
     *
     * @param zoneNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneTypeGet(Integer zoneNumber) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_TYPE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_TYPE_GET);

        // Process 'Zone Number'
        outputData.write(zoneNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_TYPE_GET command<br>
     *
     * Security Panel Zone Type Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneTypeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone Number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_TYPE_REPORT command.<br>
     *
     * Security Panel Zone Type Report<br>
     *
     *
     * @param zoneNumber {@link Integer}
     * @param zoneType {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneTypeReport(Integer zoneNumber, Integer zoneType) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_TYPE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_TYPE_REPORT);

        // Process 'Zone Number'
        outputData.write(zoneNumber);

        // Process 'Zone Type'
        outputData.write(zoneType);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_TYPE_REPORT command<br>
     *
     * Security Panel Zone Type Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * <li>ZONE_TYPE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneTypeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone Number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Zone Type'
        switch ((int) payload[3]) {
            case 0x01:
                response.put("ZONE_TYPE", "ALARM_ZONE");
                break;
            case 0x02:
                response.put("ZONE_TYPE", "NOTIFICATION_ZONE");
                break;
            default:
                logger.debug("");
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_STATE_GET command.<br>
     *
     * Security Panel Zone State Get<br>
     *
     *
     * @param zoneNumber {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneStateGet(Integer zoneNumber) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_STATE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_STATE_GET);

        // Process 'Zone Number'
        outputData.write(zoneNumber);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_STATE_GET command<br>
     *
     * Security Panel Zone State Get<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneStateGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone Number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the SECURITY_PANEL_ZONE_STATE_REPORT command.<br>
     *
     * Security Panel Zone State Report<br>
     *
     *
     * @param zoneNumber {@link Integer}
     * @param zoneState {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getSecurityPanelZoneStateReport(Integer zoneNumber, Integer zoneState) {
        logger.debug("Creating command message SECURITY_PANEL_ZONE_STATE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(SECURITY_PANEL_ZONE_STATE_REPORT);

        // Process 'Zone number'
        outputData.write(zoneNumber);

        // Process 'Zone State'
        outputData.write(zoneState);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the SECURITY_PANEL_ZONE_STATE_REPORT command<br>
     *
     * Security Panel Zone State Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>ZONE_NUMBER {@link Integer}
     * <li>ZONE_STATE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleSecurityPanelZoneStateReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Zone number'
        response.put("ZONE_NUMBER", Integer.valueOf(payload[2]));

        // Process 'Zone State'
        switch ((int) payload[3]) {
            case 0x00:
                response.put("ZONE_STATE", "FAULTED");
                break;
            case 0x01:
                response.put("ZONE_STATE", "NOT_FAULTED");
                break;
            case 0x02:
                response.put("ZONE_STATE", "BYPASS_FAULTED");
                break;
            case 0x03:
                response.put("ZONE_STATE", "BYPASS_NOT_FAULTED");
                break;
            default:
                logger.debug("");
                break;
        }

        // Return the map of processed response data;
        return response;
    }

}
