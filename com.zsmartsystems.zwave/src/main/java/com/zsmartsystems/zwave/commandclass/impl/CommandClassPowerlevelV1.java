/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_POWERLEVEL</b> version <b>1</b>.<br>
 * <p>
 * Command Class Powerlevel<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassPowerlevelV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassPowerlevelV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_POWERLEVEL
     */
    public final static int COMMAND_CLASS_KEY = 0x73;

    /**
     * Powerlevel Set Command Constant
     */
    public final static int POWERLEVEL_SET = 0x01;
    /**
     * Powerlevel Get Command Constant
     */
    public final static int POWERLEVEL_GET = 0x02;
    /**
     * Powerlevel Report Command Constant
     */
    public final static int POWERLEVEL_REPORT = 0x03;
    /**
     * Powerlevel Test Node Set Command Constant
     */
    public final static int POWERLEVEL_TEST_NODE_SET = 0x04;
    /**
     * Powerlevel Test Node Get Command Constant
     */
    public final static int POWERLEVEL_TEST_NODE_GET = 0x05;
    /**
     * Powerlevel Test Node Report Command Constant
     */
    public final static int POWERLEVEL_TEST_NODE_REPORT = 0x06;


    // Define constants for Status of operation
    private static Map<Integer, String> constantStatusOfOperation = new HashMap<Integer, String>();

    // Define constants for Test NodeID
    private static Map<Integer, String> constantTestNodeid = new HashMap<Integer, String>();

    // Define constants for Power level
    private static Map<Integer, String> constantPowerLevel = new HashMap<Integer, String>();

    static {
        // Constants for Status of operation
        constantStatusOfOperation.put(0x00, "ZW_TEST_FAILED");
        constantStatusOfOperation.put(0x01, "ZW_TEST_SUCCES");
        constantStatusOfOperation.put(0x02, "ZW_TEST_INPROGRESS");
        // Constants for Test NodeID
        constantTestNodeid.put(0x00, "ZW_TEST_NOT_A_NODEID");
        // Constants for Power level
        constantPowerLevel.put(0x00, "NORMALPOWER");
        constantPowerLevel.put(0x01, "MINUS1DBM");
        constantPowerLevel.put(0x02, "MINUS2DBM");
        constantPowerLevel.put(0x03, "MINUS3DBM");
        constantPowerLevel.put(0x04, "MINUS4DBM");
        constantPowerLevel.put(0x05, "MINUS5DBM");
        constantPowerLevel.put(0x06, "MINUS6DBM");
        constantPowerLevel.put(0x07, "MINUS7DBM");
        constantPowerLevel.put(0x08, "MINUS8DBM");
        constantPowerLevel.put(0x09, "MINUS9DBM");
    }

    /**
     * Creates a new message with the POWERLEVEL_SET command.<br>
     * <p>
     * Powerlevel Set<br>
     *
     * @param powerLevel {@link String}
     * @param timeout {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPowerlevelSet(String powerLevel, Integer timeout) {
        logger.debug("Creating command message POWERLEVEL_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(POWERLEVEL_SET);

        // Process 'Power level'
        for (Integer entry : constantPowerLevel.keySet()) {
            if (constantPowerLevel.get(entry).equals(powerLevel)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Timeout'
        outputData.write(timeout);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the POWERLEVEL_SET command<br>
     * <p>
     * Powerlevel Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>POWER_LEVEL {@link String}
     * <li>TIMEOUT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePowerlevelSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Power level'
        response.put("POWER_LEVEL", constantPowerLevel.get(payload[2] & 0xff));

        // Process 'Timeout'
        response.put("TIMEOUT", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the POWERLEVEL_GET command.<br>
     * <p>
     * Powerlevel Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPowerlevelGet() {
        logger.debug("Creating command message POWERLEVEL_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(POWERLEVEL_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the POWERLEVEL_GET command<br>
     * <p>
     * Powerlevel Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePowerlevelGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the POWERLEVEL_REPORT command.<br>
     * <p>
     * Powerlevel Report<br>
     *
     * @param powerLevel {@link String}
     * @param timeout {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPowerlevelReport(String powerLevel, Integer timeout) {
        logger.debug("Creating command message POWERLEVEL_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(POWERLEVEL_REPORT);

        // Process 'Power level'
        for (Integer entry : constantPowerLevel.keySet()) {
            if (constantPowerLevel.get(entry).equals(powerLevel)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Timeout'
        outputData.write(timeout);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the POWERLEVEL_REPORT command<br>
     * <p>
     * Powerlevel Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>POWER_LEVEL {@link String}
     * <li>TIMEOUT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePowerlevelReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Power level'
        response.put("POWER_LEVEL", constantPowerLevel.get(payload[2] & 0xff));

        // Process 'Timeout'
        response.put("TIMEOUT", Integer.valueOf(payload[3]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the POWERLEVEL_TEST_NODE_SET command.<br>
     * <p>
     * Powerlevel Test Node Set<br>
     *
     * @param testNodeid {@link Integer}
     * @param powerLevel {@link String}
     * @param testFrameCount {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPowerlevelTestNodeSet(Integer testNodeid, String powerLevel, Integer testFrameCount) {
        logger.debug("Creating command message POWERLEVEL_TEST_NODE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(POWERLEVEL_TEST_NODE_SET);

        // Process 'Test NodeID'
        // Check the node number boundary
        if (testNodeid < 1 || testNodeid > 232) {
            logger.debug("Node number is out of bounds {}", testNodeid);
            return null;
        }
        outputData.write(testNodeid);

        // Process 'Power level'
        for (Integer entry : constantPowerLevel.keySet()) {
            if (constantPowerLevel.get(entry).equals(powerLevel)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Test frame count'
        outputData.write((testFrameCount >> 8) & 0xff);
        outputData.write(testFrameCount & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the POWERLEVEL_TEST_NODE_SET command<br>
     * <p>
     * Powerlevel Test Node Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TEST_NODEID {@link Integer}
     * <li>POWER_LEVEL {@link String}
     * <li>TEST_FRAME_COUNT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePowerlevelTestNodeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Test NodeID'
        response.put("TEST_NODEID", Integer.valueOf(payload[2]));

        // Process 'Power level'
        response.put("POWER_LEVEL", constantPowerLevel.get(payload[3] & 0xff));

        // Process 'Test frame count'
        response.put("TEST_FRAME_COUNT", Integer.valueOf(((payload[4] & 0xff) << 8) + (payload[5] & 0xff)));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the POWERLEVEL_TEST_NODE_GET command.<br>
     * <p>
     * Powerlevel Test Node Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPowerlevelTestNodeGet() {
        logger.debug("Creating command message POWERLEVEL_TEST_NODE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(POWERLEVEL_TEST_NODE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the POWERLEVEL_TEST_NODE_GET command<br>
     * <p>
     * Powerlevel Test Node Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePowerlevelTestNodeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the POWERLEVEL_TEST_NODE_REPORT command.<br>
     * <p>
     * Powerlevel Test Node Report<br>
     *
     * @param testNodeid {@link String}
     * @param statusOfOperation {@link String}
     * @param testFrameCount {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getPowerlevelTestNodeReport(String testNodeid, String statusOfOperation, Integer testFrameCount) {
        logger.debug("Creating command message POWERLEVEL_TEST_NODE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(POWERLEVEL_TEST_NODE_REPORT);

        // Process 'Test NodeID'
        for (Integer entry : constantTestNodeid.keySet()) {
            if (constantTestNodeid.get(entry).equals(testNodeid)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Status of operation'
        for (Integer entry : constantStatusOfOperation.keySet()) {
            if (constantStatusOfOperation.get(entry).equals(statusOfOperation)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Test Frame Count'
        outputData.write((testFrameCount >> 8) & 0xff);
        outputData.write(testFrameCount & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the POWERLEVEL_TEST_NODE_REPORT command<br>
     * <p>
     * Powerlevel Test Node Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TEST_NODEID {@link String}
     * <li>STATUS_OF_OPERATION {@link String}
     * <li>TEST_FRAME_COUNT {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handlePowerlevelTestNodeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Test NodeID'
        response.put("TEST_NODEID", constantTestNodeid.get(payload[2] & 0xff));

        // Process 'Status of operation'
        response.put("STATUS_OF_OPERATION", constantStatusOfOperation.get(payload[3] & 0xff));

        // Process 'Test Frame Count'
        response.put("TEST_FRAME_COUNT", Integer.valueOf(((payload[4] & 0xff) << 8) + (payload[5] & 0xff)));

        // Return the map of processed response data;
        return response;
    }

}
