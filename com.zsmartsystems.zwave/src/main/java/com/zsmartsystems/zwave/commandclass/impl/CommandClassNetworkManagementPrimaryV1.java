/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY</b> version <b>1</b>.<br>
 * <p>
 * Command Class Network Management Primary<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementPrimaryV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementPrimaryV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_PRIMARY
     */
    public final static int COMMAND_CLASS_KEY = 0x54;

    /**
     * Controller Change Command Constant
     */
    public final static int CONTROLLER_CHANGE = 0x01;
    /**
     * Controller Change Status Command Constant
     */
    public final static int CONTROLLER_CHANGE_STATUS = 0x02;

    /**
     * Creates a new message with the CONTROLLER_CHANGE command.<br>
     * <p>
     * Controller Change<br>
     *
     * @param seqNo {@link Integer}
     * @param mode {@link Integer}
     * @param txOptions {@link List<String>}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getControllerChange(Integer seqNo, Integer mode, List<String> txOptions) {
        logger.debug("Creating command message CONTROLLER_CHANGE version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONTROLLER_CHANGE);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Reserved'
        // Process 'Mode'
        outputData.write(mode);

        // Process 'tx Options'
        int valTxOptions = 0;
        valTxOptions |= (txOptions.contains("ACK") ? 0x02 : 0);
        valTxOptions |= (txOptions.contains("LOW_POWER") ? 0x04 : 0);
        valTxOptions |= (txOptions.contains("AUTO_ROUTE") ? 0x10 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_ROUTE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("EXPLORE") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("NO_RETRANSMISSION") ? 0x01 : 0);
        outputData.write(valTxOptions);
        valTxOptions = 0;
        valTxOptions |= (txOptions.contains("HIGH_POWER") ? 0x01 : 0);
        outputData.write(valTxOptions);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONTROLLER_CHANGE command<br>
     * <p>
     * Controller Change<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>MODE {@link Integer}
     * <li>TX_OPTIONS {@link List}<{@link String}>
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleControllerChange(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[2]));

        // Process 'Mode'
        switch ((int) payload[4]) {
            case 0x02:
                response.put("MODE", "CONTROLLER_CHANGE_START");
                break;
            case 0x05:
                response.put("MODE", "CONTROLLER_CHANGE_STOP");
                break;
            default:
                logger.debug("");
                break;
        }

        // Process 'tx Options'
        List<String> responseTxOptions = new ArrayList<String>();
        int lenTxOptions = 1;
        for (int cntTxOptions = 0; cntTxOptions < lenTxOptions; cntTxOptions++) {
            if ((payload[5 + (cntTxOptions / 8)] & cntTxOptions % 8) == 0) {
                continue;
            }
            switch (cntTxOptions) {
                case 0x01:
                    responseTxOptions.add("ACK");
                    break;
                case 0x02:
                    responseTxOptions.add("LOW_POWER");
                    break;
                case 0x04:
                    responseTxOptions.add("AUTO_ROUTE");
                    break;
                case 0x10:
                    responseTxOptions.add("NO_ROUTE");
                    break;
                case 0x20:
                    responseTxOptions.add("EXPLORE");
                    break;
                case 0x40:
                    responseTxOptions.add("NO_RETRANSMISSION");
                    break;
                case 0x80:
                    responseTxOptions.add("HIGH_POWER");
                    break;
                default:
                    responseTxOptions.add("BITMASK_" + cntTxOptions);
                    break;
            }
        }
        response.put("TX_OPTIONS", responseTxOptions);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CONTROLLER_CHANGE_STATUS command.<br>
     * <p>
     * Controller Change Status<br>
     *
     * @param seqNo {@link Integer}
     * @param status {@link Integer}
     * @param newNodeId {@link Integer}
     * @param nodeInfoLength {@link Integer}
     * @param capability {@link Integer}
     * @param listening {@link Boolean}
     * @param security {@link Integer}
     * @param opt {@link Boolean}
     * @param basicDeviceClass {@link Integer}
     * @param genericDeviceClass {@link Integer}
     * @param specificDeviceClass {@link Integer}
     * @param commandClass {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getControllerChangeStatus(Integer seqNo, Integer status, Integer newNodeId,
            Integer nodeInfoLength, Integer capability, Boolean listening, Integer security, Boolean opt,
            Integer basicDeviceClass, Integer genericDeviceClass, Integer specificDeviceClass, byte[] commandClass) {
        logger.debug("Creating command message CONTROLLER_CHANGE_STATUS version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CONTROLLER_CHANGE_STATUS);

        // Process 'Seq. No'
        outputData.write(seqNo);

        // Process 'Status'
        outputData.write(status);

        // Process 'Reserved'
        // Process 'New Node ID'
        // Check the node number boundary
        if (newNodeId < 1 || newNodeId > 232) {
            logger.debug("Node number is out of bounds {}", newNodeId);
            return null;
        }
        outputData.write(newNodeId);

        // Process 'Node Info Length'
        outputData.write(nodeInfoLength);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= capability & 0x7F;
        valProperties1 |= listening ? 0x80 : 0;
        outputData.write(valProperties1);

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= security & 0x7F;
        valProperties2 |= opt ? 0x80 : 0;
        outputData.write(valProperties2);

        // Process 'Basic Device Class'
        outputData.write(basicDeviceClass);

        // Process 'Generic Device Class'
        outputData.write(genericDeviceClass);

        // Process 'Specific Device Class'
        outputData.write(specificDeviceClass);

        // Process 'Command Class'
        try {
            outputData.write(commandClass);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CONTROLLER_CHANGE_STATUS command<br>
     * <p>
     * Controller Change Status<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SEQ_NO {@link Integer}
     * <li>STATUS {@link Integer}
     * <li>NEW_NODE_ID {@link Integer}
     * <li>NODE_INFO_LENGTH {@link Integer}
     * <li>CAPABILITY {@link Integer}
     * <li>LISTENING {@link Boolean}
     * <li>SECURITY {@link Integer}
     * <li>OPT {@link Boolean}
     * <li>BASIC_DEVICE_CLASS {@link Integer}
     * <li>GENERIC_DEVICE_CLASS {@link Integer}
     * <li>SPECIFIC_DEVICE_CLASS {@link Integer}
     * <li>COMMAND_CLASS {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleControllerChangeStatus(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Seq. No'
        response.put("SEQ_NO", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Status'
        switch ((int) payload[msgOffset]) {
            case 0x06:
                response.put("STATUS", "NODE_ADD_STATUS_DONE");
                break;
            case 0x07:
                response.put("STATUS", "NODE_ADD_STATUS_FAILED");
                break;
            case 0x09:
                response.put("STATUS", "NODE_ADD_STATUS_SECURITY_FAILED");
                break;
            default:
                logger.debug("");
                break;
        }
        msgOffset += 1;

        msgOffset += 1;

        // Process 'New Node ID'
        response.put("NEW_NODE_ID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Node Info Length'
        response.put("NODE_INFO_LENGTH", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("CAPABILITY", Integer.valueOf(payload[msgOffset] & 0x7F));
        response.put("LISTENING", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Properties2'
        response.put("SECURITY", Integer.valueOf(payload[msgOffset] & 0x7F));
        response.put("OPT", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Basic Device Class'
        response.put("BASIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Generic Device Class'
        response.put("GENERIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Specific Device Class'
        response.put("SPECIFIC_DEVICE_CLASS", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Command Class'
        ByteArrayOutputStream valCommandClass = new ByteArrayOutputStream();
        while (msgOffset < payload.length) {
            valCommandClass.write(payload[msgOffset]);
            msgOffset++;
        }
        response.put("COMMAND_CLASS", valCommandClass);

        // Return the map of processed response data;
        return response;
    }

}
