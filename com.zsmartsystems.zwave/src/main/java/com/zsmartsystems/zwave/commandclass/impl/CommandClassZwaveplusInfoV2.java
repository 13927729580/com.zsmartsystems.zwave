/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_ZWAVEPLUS_INFO</b> version <b>2</b>.<br>
 * <p>
 * Command Class Z-Wave+ Info<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassZwaveplusInfoV2 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassZwaveplusInfoV2.class);

    /**
     * Integer command class key for COMMAND_CLASS_ZWAVEPLUS_INFO
     */
    public final static int COMMAND_CLASS_KEY = 0x5E;

    /**
     * Z-Wave+ Info Get Command Constant
     */
    public final static int ZWAVEPLUS_INFO_GET = 0x01;
    /**
     * Z-Wave+ Info Report Command Constant
     */
    public final static int ZWAVEPLUS_INFO_REPORT = 0x02;

    // Constants for Role Type
    private static Map<Integer, String> constantRoleType = new HashMap<Integer, String>();
    // Constants for Node Type
    private static Map<Integer, String> constantNodeType = new HashMap<Integer, String>();

    static {
        // Constants for Role Type
        constantRoleType.put(0x00, "ROLE_TYPE_CONTROLLER_CENTRAL_STATIC");
        constantRoleType.put(0x01, "ROLE_TYPE_CONTROLLER_SUB_STATIC");
        constantRoleType.put(0x02, "ROLE_TYPE_CONTROLLER_PORTABLE");
        constantRoleType.put(0x03, "ROLE_TYPE_CONTROLLER_PORTABLE_REPORTING");
        constantRoleType.put(0x04, "ROLE_TYPE_SLAVE_PORTABLE");
        constantRoleType.put(0x05, "ROLE_TYPE_SLAVE_ALWAYS_ON");
        constantRoleType.put(0x06, "ROLE_TYPE_SLAVE_SLEEPING_REPORTING");
        constantRoleType.put(0x07, "ROLE_TYPE_SLAVE_SLEEPING_LISTENING");
        // Constants for Node Type
        constantNodeType.put(0x00, "NODE_TYPE_ZWAVEPLUS_NODE");
        constantNodeType.put(0x02, "NODE_TYPE_ZWAVEPLUS_FOR_IP_GATEWAY");
    }

    /**
     * Creates a new message with the ZWAVEPLUS_INFO_GET command.<br>
     * <p>
     * Z-Wave+ Info Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getZwaveplusInfoGet() {
        logger.debug("Creating command message ZWAVEPLUS_INFO_GET version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ZWAVEPLUS_INFO_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ZWAVEPLUS_INFO_GET command<br>
     * <p>
     * Z-Wave+ Info Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleZwaveplusInfoGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the ZWAVEPLUS_INFO_REPORT command.<br>
     * <p>
     * Z-Wave+ Info Report<br>
     *
     * @param zWavePlusVersion {@link Integer}
     * @param roleType {@link String}
     * @param nodeType {@link String}
     * @param installerIconType {@link Integer}
     * @param userIconType {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getZwaveplusInfoReport(Integer zWavePlusVersion, String roleType, String nodeType,
            Integer installerIconType, Integer userIconType) {
        logger.debug("Creating command message ZWAVEPLUS_INFO_REPORT version 2");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(ZWAVEPLUS_INFO_REPORT);

        // Process 'Z-Wave+ Version'
        outputData.write(zWavePlusVersion);

        // Process 'Role Type'
        for (Integer entry : constantRoleType.keySet()) {
            if (constantRoleType.get(entry).equals(roleType)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Node Type'
        for (Integer entry : constantNodeType.keySet()) {
            if (constantNodeType.get(entry).equals(nodeType)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Installer Icon Type'
        outputData.write((installerIconType >> 8) & 0xff);
        outputData.write(installerIconType & 0xff);

        // Process 'User Icon Type'
        outputData.write((userIconType >> 8) & 0xff);
        outputData.write(userIconType & 0xff);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the ZWAVEPLUS_INFO_REPORT command<br>
     * <p>
     * Z-Wave+ Info Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>Z_WAVE_PLUS_VERSION {@link Integer}
     * <li>ROLE_TYPE {@link String}
     * <li>NODE_TYPE {@link String}
     * <li>INSTALLER_ICON_TYPE {@link Integer}
     * <li>USER_ICON_TYPE {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleZwaveplusInfoReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Z-Wave+ Version'
        response.put("Z_WAVE_PLUS_VERSION", Integer.valueOf(payload[2]));

        // Process 'Role Type'
        constantRoleType.get((int) payload[3]);

        // Process 'Node Type'
        constantNodeType.get((int) payload[4]);

        // Process 'Installer Icon Type'
        response.put("INSTALLER_ICON_TYPE", Integer.valueOf(payload[5] << 8 + payload[6]));

        // Process 'User Icon Type'
        response.put("USER_ICON_TYPE", Integer.valueOf(payload[7] << 8 + payload[8]));

        // Return the map of processed response data;
        return response;
    }

}
