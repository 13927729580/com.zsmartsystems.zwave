/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_CHIMNEY_FAN</b> version <b>1</b>.<br>
 * <p>
 * Command Class Chimney Fan<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassChimneyFanV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassChimneyFanV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_CHIMNEY_FAN
     */
    public final static int COMMAND_CLASS_KEY = 0x2A;

    /**
     * Chimney Fan State Set Command Constant
     */
    public final static int CHIMNEY_FAN_STATE_SET = 0x01;
    /**
     * Chimney Fan State Get Command Constant
     */
    public final static int CHIMNEY_FAN_STATE_GET = 0x02;
    /**
     * Chimney Fan State Report Command Constant
     */
    public final static int CHIMNEY_FAN_STATE_REPORT = 0x03;
    /**
     * Chimney Fan Speed Set Command Constant
     */
    public final static int CHIMNEY_FAN_SPEED_SET = 0x04;
    /**
     * Chimney Fan Speed Get Command Constant
     */
    public final static int CHIMNEY_FAN_SPEED_GET = 0x05;
    /**
     * Chimney Fan Speed Report Command Constant
     */
    public final static int CHIMNEY_FAN_SPEED_REPORT = 0x06;
    /**
     * Chimney Fan Start Temp Set Command Constant
     */
    public final static int CHIMNEY_FAN_START_TEMP_SET = 0x07;
    /**
     * Chimney Fan Start Temp Get Command Constant
     */
    public final static int CHIMNEY_FAN_START_TEMP_GET = 0x08;
    /**
     * Chimney Fan Start Temp Report Command Constant
     */
    public final static int CHIMNEY_FAN_START_TEMP_REPORT = 0x09;
    /**
     * Chimney Fan Stop Temp Set Command Constant
     */
    public final static int CHIMNEY_FAN_STOP_TEMP_SET = 0x0A;
    /**
     * Chimney Fan Stop Temp Get Command Constant
     */
    public final static int CHIMNEY_FAN_STOP_TEMP_GET = 0x0B;
    /**
     * Chimney Fan Stop Temp Report Command Constant
     */
    public final static int CHIMNEY_FAN_STOP_TEMP_REPORT = 0x0C;
    /**
     * Chimney Fan Alarm Temp Set Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_TEMP_SET = 0x0D;
    /**
     * Chimney Fan Alarm Temp Get Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_TEMP_GET = 0x0E;
    /**
     * Chimney Fan Alarm Temp Report Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_TEMP_REPORT = 0x0F;
    /**
     * Chimney Fan Boost Time Set Command Constant
     */
    public final static int CHIMNEY_FAN_BOOST_TIME_SET = 0x10;
    /**
     * Chimney Fan Boost Time Get Command Constant
     */
    public final static int CHIMNEY_FAN_BOOST_TIME_GET = 0x11;
    /**
     * Chimney Fan Boost Time Report Command Constant
     */
    public final static int CHIMNEY_FAN_BOOST_TIME_REPORT = 0x12;
    /**
     * Chimney Fan Stop Time Set Command Constant
     */
    public final static int CHIMNEY_FAN_STOP_TIME_SET = 0x13;
    /**
     * Chimney Fan Stop Time Get Command Constant
     */
    public final static int CHIMNEY_FAN_STOP_TIME_GET = 0x14;
    /**
     * Chimney Fan Stop Time Report Command Constant
     */
    public final static int CHIMNEY_FAN_STOP_TIME_REPORT = 0x15;
    /**
     * Chimney Fan Mode Set Command Constant
     */
    public final static int CHIMNEY_FAN_MODE_SET = 0x16;
    /**
     * Chimney Fan Mode Get Command Constant
     */
    public final static int CHIMNEY_FAN_MODE_GET = 0x17;
    /**
     * Chimney Fan Mode Report Command Constant
     */
    public final static int CHIMNEY_FAN_MODE_REPORT = 0x18;
    /**
     * Chimney Fan Setup Set Command Constant
     */
    public final static int CHIMNEY_FAN_SETUP_SET = 0x19;
    /**
     * Chimney Fan Setup Get Command Constant
     */
    public final static int CHIMNEY_FAN_SETUP_GET = 0x1A;
    /**
     * Chimney Fan Setup Report Command Constant
     */
    public final static int CHIMNEY_FAN_SETUP_REPORT = 0x1B;
    /**
     * Chimney Fan Status Get Command Constant
     */
    public final static int CHIMNEY_FAN_STATUS_GET = 0x1D;
    /**
     * Chimney Fan Status Report Command Constant
     */
    public final static int CHIMNEY_FAN_STATUS_REPORT = 0x1E;
    /**
     * Chimney Fan Alarm Log Set Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_LOG_SET = 0x1F;
    /**
     * Chimney Fan Alarm Log Get Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_LOG_GET = 0x20;
    /**
     * Chimney Fan Alarm Log Report Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_LOG_REPORT = 0x21;
    /**
     * Chimney Fan Alarm Status Set Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_STATUS_SET = 0x22;
    /**
     * Chimney Fan Alarm Status Get Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_STATUS_GET = 0x23;
    /**
     * Chimney Fan Alarm Status Report Command Constant
     */
    public final static int CHIMNEY_FAN_ALARM_STATUS_REPORT = 0x24;
    /**
     * Chimney Fan Min Speed Set Command Constant
     */
    public final static int CHIMNEY_FAN_MIN_SPEED_SET = 0x25;
    /**
     * Chimney Fan Min Speed Get Command Constant
     */
    public final static int CHIMNEY_FAN_MIN_SPEED_GET = 0x26;
    /**
     * Chimney Fan Min Speed Report Command Constant
     */
    public final static int CHIMNEY_FAN_MIN_SPEED_REPORT = 0x27;
    /**
     * Chimney Fan Default Set Command Constant
     */
    public final static int CHIMNEY_FAN_DEFAULT_SET = 0x28;


    // Define constants for State
    private static Map<Integer, String> constantState = new HashMap<Integer, String>();

    // Define constants for Message
    private static Map<Integer, String> constantMessage = new HashMap<Integer, String>();

    // Define constants for Mode
    private static Map<Integer, String> constantMode = new HashMap<Integer, String>();

    static {
        // Constants for State
        constantState.put(0x01, "NEXT_STATE");
        // Constants for Message
        constantMessage.put(0x08, "RESET_LOG");
        // Constants for Mode
        constantMode.put(0x00, "OFF");
        constantMode.put(0xFF, "ON");
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STATE_SET command.<br>
     * <p>
     * Chimney Fan State Set<br>
     *
     * @param state {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStateSet(String state) {
        logger.debug("Creating command message CHIMNEY_FAN_STATE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STATE_SET);

        // Process 'State'
        for (Integer entry : constantState.keySet()) {
            if (constantState.get(entry).equals(state)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STATE_SET command<br>
     * <p>
     * Chimney Fan State Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>STATE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStateSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'State'
        response.put("STATE", constantState.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STATE_GET command.<br>
     * <p>
     * Chimney Fan State Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStateGet() {
        logger.debug("Creating command message CHIMNEY_FAN_STATE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STATE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STATE_GET command<br>
     * <p>
     * Chimney Fan State Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStateGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STATE_REPORT command.<br>
     * <p>
     * Chimney Fan State Report<br>
     *
     * @param state {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStateReport(String state) {
        logger.debug("Creating command message CHIMNEY_FAN_STATE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STATE_REPORT);

        // Process 'State'
        for (Integer entry : constantState.keySet()) {
            if (constantState.get(entry).equals(state)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STATE_REPORT command<br>
     * <p>
     * Chimney Fan State Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>STATE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStateReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'State'
        response.put("STATE", constantState.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_SPEED_SET command.<br>
     * <p>
     * Chimney Fan Speed Set<br>
     *
     * @param speed {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanSpeedSet(Integer speed) {
        logger.debug("Creating command message CHIMNEY_FAN_SPEED_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_SPEED_SET);

        // Process 'Speed'
        outputData.write(speed);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_SPEED_SET command<br>
     * <p>
     * Chimney Fan Speed Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SPEED {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanSpeedSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Speed'
        switch (payload[2] & 0xff) {
            case 0x65:
                response.put("SPEED", "SPEED_DOWN");
                break;
            case 0xC8:
                response.put("SPEED", "SPEED_UP");
                break;
            default:
                response.put("SPEED", String.format("%02X", payload[2] & 0xff));
                logger.debug("Unknown value {}", payload[2] & 0xff);
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_SPEED_GET command.<br>
     * <p>
     * Chimney Fan Speed Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanSpeedGet() {
        logger.debug("Creating command message CHIMNEY_FAN_SPEED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_SPEED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_SPEED_GET command<br>
     * <p>
     * Chimney Fan Speed Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanSpeedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_SPEED_REPORT command.<br>
     * <p>
     * Chimney Fan Speed Report<br>
     *
     * @param speed {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanSpeedReport(Integer speed) {
        logger.debug("Creating command message CHIMNEY_FAN_SPEED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_SPEED_REPORT);

        // Process 'Speed'
        outputData.write(speed);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_SPEED_REPORT command<br>
     * <p>
     * Chimney Fan Speed Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SPEED {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanSpeedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Speed'
        response.put("SPEED", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_START_TEMP_SET command.<br>
     * <p>
     * Chimney Fan Start Temp Set<br>
     *
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStartTempSet(Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_START_TEMP_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_START_TEMP_SET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_START_TEMP_SET command<br>
     * <p>
     * Chimney Fan Start Temp Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStartTempSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        response.put("VALUE", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_START_TEMP_GET command.<br>
     * <p>
     * Chimney Fan Start Temp Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStartTempGet() {
        logger.debug("Creating command message CHIMNEY_FAN_START_TEMP_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_START_TEMP_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_START_TEMP_GET command<br>
     * <p>
     * Chimney Fan Start Temp Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStartTempGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_START_TEMP_REPORT command.<br>
     * <p>
     * Chimney Fan Start Temp Report<br>
     *
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStartTempReport(Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_START_TEMP_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_START_TEMP_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_START_TEMP_REPORT command<br>
     * <p>
     * Chimney Fan Start Temp Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStartTempReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        response.put("VALUE", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STOP_TEMP_SET command.<br>
     * <p>
     * Chimney Fan Stop Temp Set<br>
     *
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStopTempSet(Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_STOP_TEMP_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STOP_TEMP_SET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STOP_TEMP_SET command<br>
     * <p>
     * Chimney Fan Stop Temp Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStopTempSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        response.put("VALUE", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STOP_TEMP_GET command.<br>
     * <p>
     * Chimney Fan Stop Temp Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStopTempGet() {
        logger.debug("Creating command message CHIMNEY_FAN_STOP_TEMP_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STOP_TEMP_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STOP_TEMP_GET command<br>
     * <p>
     * Chimney Fan Stop Temp Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStopTempGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STOP_TEMP_REPORT command.<br>
     * <p>
     * Chimney Fan Stop Temp Report<br>
     *
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStopTempReport(Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_STOP_TEMP_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STOP_TEMP_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STOP_TEMP_REPORT command<br>
     * <p>
     * Chimney Fan Stop Temp Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStopTempReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        response.put("VALUE", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_TEMP_SET command.<br>
     * <p>
     * Chimney Fan Alarm Temp Set<br>
     *
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmTempSet(Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_TEMP_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_TEMP_SET);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_TEMP_SET command<br>
     * <p>
     * Chimney Fan Alarm Temp Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmTempSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        response.put("VALUE", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_TEMP_GET command.<br>
     * <p>
     * Chimney Fan Alarm Temp Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmTempGet() {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_TEMP_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_TEMP_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_TEMP_GET command<br>
     * <p>
     * Chimney Fan Alarm Temp Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmTempGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_TEMP_REPORT command.<br>
     * <p>
     * Chimney Fan Alarm Temp Report<br>
     *
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmTempReport(Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_TEMP_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_TEMP_REPORT);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_TEMP_REPORT command<br>
     * <p>
     * Chimney Fan Alarm Temp Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmTempReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        response.put("VALUE", Integer.valueOf(payload[msgOffset]));
        msgOffset += payload[msgOffset - 1];

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_BOOST_TIME_SET command.<br>
     * <p>
     * Chimney Fan Boost Time Set<br>
     *
     * @param time {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanBoostTimeSet(Integer time) {
        logger.debug("Creating command message CHIMNEY_FAN_BOOST_TIME_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_BOOST_TIME_SET);

        // Process 'Time'
        outputData.write(time);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_BOOST_TIME_SET command<br>
     * <p>
     * Chimney Fan Boost Time Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanBoostTimeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Time'
        response.put("TIME", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_BOOST_TIME_GET command.<br>
     * <p>
     * Chimney Fan Boost Time Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanBoostTimeGet() {
        logger.debug("Creating command message CHIMNEY_FAN_BOOST_TIME_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_BOOST_TIME_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_BOOST_TIME_GET command<br>
     * <p>
     * Chimney Fan Boost Time Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanBoostTimeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_BOOST_TIME_REPORT command.<br>
     * <p>
     * Chimney Fan Boost Time Report<br>
     *
     * @param time {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanBoostTimeReport(Integer time) {
        logger.debug("Creating command message CHIMNEY_FAN_BOOST_TIME_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_BOOST_TIME_REPORT);

        // Process 'Time'
        outputData.write(time);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_BOOST_TIME_REPORT command<br>
     * <p>
     * Chimney Fan Boost Time Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanBoostTimeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Time'
        response.put("TIME", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STOP_TIME_SET command.<br>
     * <p>
     * Chimney Fan Stop Time Set<br>
     *
     * @param time {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStopTimeSet(Integer time) {
        logger.debug("Creating command message CHIMNEY_FAN_STOP_TIME_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STOP_TIME_SET);

        // Process 'Time'
        outputData.write(time);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STOP_TIME_SET command<br>
     * <p>
     * Chimney Fan Stop Time Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStopTimeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Time'
        response.put("TIME", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STOP_TIME_GET command.<br>
     * <p>
     * Chimney Fan Stop Time Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStopTimeGet() {
        logger.debug("Creating command message CHIMNEY_FAN_STOP_TIME_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STOP_TIME_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STOP_TIME_GET command<br>
     * <p>
     * Chimney Fan Stop Time Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStopTimeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STOP_TIME_REPORT command.<br>
     * <p>
     * Chimney Fan Stop Time Report<br>
     *
     * @param time {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStopTimeReport(Integer time) {
        logger.debug("Creating command message CHIMNEY_FAN_STOP_TIME_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STOP_TIME_REPORT);

        // Process 'Time'
        outputData.write(time);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STOP_TIME_REPORT command<br>
     * <p>
     * Chimney Fan Stop Time Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>TIME {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStopTimeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Time'
        response.put("TIME", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_MODE_SET command.<br>
     * <p>
     * Chimney Fan Mode Set<br>
     *
     * @param mode {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanModeSet(String mode) {
        logger.debug("Creating command message CHIMNEY_FAN_MODE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_MODE_SET);

        // Process 'Mode'
        for (Integer entry : constantMode.keySet()) {
            if (constantMode.get(entry).equals(mode)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_MODE_SET command<br>
     * <p>
     * Chimney Fan Mode Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MODE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanModeSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Mode'
        response.put("MODE", constantMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_MODE_GET command.<br>
     * <p>
     * Chimney Fan Mode Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanModeGet() {
        logger.debug("Creating command message CHIMNEY_FAN_MODE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_MODE_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_MODE_GET command<br>
     * <p>
     * Chimney Fan Mode Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanModeGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_MODE_REPORT command.<br>
     * <p>
     * Chimney Fan Mode Report<br>
     *
     * @param mode {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanModeReport(String mode) {
        logger.debug("Creating command message CHIMNEY_FAN_MODE_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_MODE_REPORT);

        // Process 'Mode'
        for (Integer entry : constantMode.keySet()) {
            if (constantMode.get(entry).equals(mode)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_MODE_REPORT command<br>
     * <p>
     * Chimney Fan Mode Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MODE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanModeReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Mode'
        response.put("MODE", constantMode.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_SETUP_SET command.<br>
     * <p>
     * Chimney Fan Setup Set<br>
     *
     * @param mode {@link String}
     * @param boostTime {@link Integer}
     * @param stopTime {@link Integer}
     * @param minSpeed {@link Integer}
     * @param size1 {@link Integer}
     * @param scale1 {@link Integer}
     * @param precision1 {@link Integer}
     * @param startTemperature {@link byte[]}
     * @param size2 {@link Integer}
     * @param scale2 {@link Integer}
     * @param precision2 {@link Integer}
     * @param stopTemperature {@link byte[]}
     * @param size3 {@link Integer}
     * @param scale3 {@link Integer}
     * @param precision3 {@link Integer}
     * @param alarmTemperatureValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanSetupSet(String mode, Integer boostTime, Integer stopTime, Integer minSpeed,
            Integer size1, Integer scale1, Integer precision1, byte[] startTemperature, Integer size2, Integer scale2,
            Integer precision2, byte[] stopTemperature, Integer size3, Integer scale3, Integer precision3,
            byte[] alarmTemperatureValue) {
        logger.debug("Creating command message CHIMNEY_FAN_SETUP_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_SETUP_SET);

        // Process 'Mode'
        for (Integer entry : constantMode.keySet()) {
            if (constantMode.get(entry).equals(mode)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Boost Time'
        outputData.write(boostTime);

        // Process 'Stop Time'
        outputData.write(stopTime);

        // Process 'Min. Speed'
        outputData.write(minSpeed);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size1 & 0x07;
        valProperties1 |= ((scale1 << 3) & 0x18);
        valProperties1 |= ((precision1 << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Start Temperature'
        try {
            outputData.write(startTemperature);
        } catch (IOException e) {
        }

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= size2 & 0x07;
        valProperties2 |= ((scale2 << 3) & 0x18);
        valProperties2 |= ((precision2 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Stop Temperature'
        try {
            outputData.write(stopTemperature);
        } catch (IOException e) {
        }

        // Process 'Properties3'
        int valProperties3 = 0;
        valProperties3 |= size3 & 0x07;
        valProperties3 |= ((scale3 << 3) & 0x18);
        valProperties3 |= ((precision3 << 5) & 0xE0);
        outputData.write(valProperties3);

        // Process 'Alarm Temperature Value'
        try {
            outputData.write(alarmTemperatureValue);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_SETUP_SET command<br>
     * <p>
     * Chimney Fan Setup Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MODE {@link String}
     * <li>BOOST_TIME {@link Integer}
     * <li>STOP_TIME {@link Integer}
     * <li>MIN_SPEED {@link Integer}
     * <li>SIZE_1 {@link Integer}
     * <li>SCALE_1 {@link Integer}
     * <li>PRECISION_1 {@link Integer}
     * <li>START_TEMPERATURE {@link byte[]}
     * <li>SIZE_2 {@link Integer}
     * <li>SCALE_2 {@link Integer}
     * <li>PRECISION_2 {@link Integer}
     * <li>STOP_TEMPERATURE {@link byte[]}
     * <li>SIZE_3 {@link Integer}
     * <li>SCALE_3 {@link Integer}
     * <li>PRECISION_3 {@link Integer}
     * <li>ALARM_TEMPERATURE_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanSetupSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Mode'
        response.put("MODE", constantMode.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Boost Time'
        response.put("BOOST_TIME", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Stop Time'
        response.put("STOP_TIME", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Min. Speed'
        response.put("MIN_SPEED", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("SIZE_1", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE_1", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION_1", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Start Temperature'
        int valStartTemperature = 0;
        int lenStartTemperature = payload[3] & 0x07;
        for (int cntStartTemperature = 0; cntStartTemperature < lenStartTemperature; cntStartTemperature++) {
            valStartTemperature = (valStartTemperature << 8) + payload[msgOffset + cntStartTemperature];
        }
        response.put("START_TEMPERATURE", valStartTemperature);
        msgOffset += lenStartTemperature;

        // Process 'Properties2'
        response.put("SIZE_2", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE_2", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION_2", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Stop Temperature'
        int valStopTemperature = 0;
        int lenStopTemperature = payload[3] & 0x07;
        for (int cntStopTemperature = 0; cntStopTemperature < lenStopTemperature; cntStopTemperature++) {
            valStopTemperature = (valStopTemperature << 8) + payload[msgOffset + cntStopTemperature];
        }
        response.put("STOP_TEMPERATURE", valStopTemperature);
        msgOffset += lenStopTemperature;

        // Process 'Properties3'
        response.put("SIZE_3", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE_3", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION_3", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Alarm Temperature Value'
        int valAlarmTemperatureValue = 0;
        int lenAlarmTemperatureValue = payload[3] & 0x07;
        for (int cntAlarmTemperatureValue = 0; cntAlarmTemperatureValue < lenAlarmTemperatureValue; cntAlarmTemperatureValue++) {
            valAlarmTemperatureValue = (valAlarmTemperatureValue << 8) + payload[msgOffset + cntAlarmTemperatureValue];
        }
        response.put("ALARM_TEMPERATURE_VALUE", valAlarmTemperatureValue);
        msgOffset += lenAlarmTemperatureValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_SETUP_GET command.<br>
     * <p>
     * Chimney Fan Setup Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanSetupGet() {
        logger.debug("Creating command message CHIMNEY_FAN_SETUP_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_SETUP_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_SETUP_GET command<br>
     * <p>
     * Chimney Fan Setup Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanSetupGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_SETUP_REPORT command.<br>
     * <p>
     * Chimney Fan Setup Report<br>
     *
     * @param mode {@link String}
     * @param boostTime {@link Integer}
     * @param stopTime {@link Integer}
     * @param minSpeed {@link Integer}
     * @param size1 {@link Integer}
     * @param scale1 {@link Integer}
     * @param precision1 {@link Integer}
     * @param startTemperature {@link byte[]}
     * @param size2 {@link Integer}
     * @param scale2 {@link Integer}
     * @param precision2 {@link Integer}
     * @param stopTemperature {@link byte[]}
     * @param size3 {@link Integer}
     * @param scale3 {@link Integer}
     * @param precision3 {@link Integer}
     * @param alarmTemperatureValue {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanSetupReport(String mode, Integer boostTime, Integer stopTime, Integer minSpeed,
            Integer size1, Integer scale1, Integer precision1, byte[] startTemperature, Integer size2, Integer scale2,
            Integer precision2, byte[] stopTemperature, Integer size3, Integer scale3, Integer precision3,
            byte[] alarmTemperatureValue) {
        logger.debug("Creating command message CHIMNEY_FAN_SETUP_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_SETUP_REPORT);

        // Process 'Mode'
        for (Integer entry : constantMode.keySet()) {
            if (constantMode.get(entry).equals(mode)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Boost Time'
        outputData.write(boostTime);

        // Process 'Stop Time'
        outputData.write(stopTime);

        // Process 'Min. Speed'
        outputData.write(minSpeed);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size1 & 0x07;
        valProperties1 |= ((scale1 << 3) & 0x18);
        valProperties1 |= ((precision1 << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Start Temperature'
        try {
            outputData.write(startTemperature);
        } catch (IOException e) {
        }

        // Process 'Properties2'
        int valProperties2 = 0;
        valProperties2 |= size2 & 0x07;
        valProperties2 |= ((scale2 << 3) & 0x18);
        valProperties2 |= ((precision2 << 5) & 0xE0);
        outputData.write(valProperties2);

        // Process 'Stop Temperature'
        try {
            outputData.write(stopTemperature);
        } catch (IOException e) {
        }

        // Process 'Properties3'
        int valProperties3 = 0;
        valProperties3 |= size3 & 0x07;
        valProperties3 |= ((scale3 << 3) & 0x18);
        valProperties3 |= ((precision3 << 5) & 0xE0);
        outputData.write(valProperties3);

        // Process 'Alarm Temperature Value'
        try {
            outputData.write(alarmTemperatureValue);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_SETUP_REPORT command<br>
     * <p>
     * Chimney Fan Setup Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MODE {@link String}
     * <li>BOOST_TIME {@link Integer}
     * <li>STOP_TIME {@link Integer}
     * <li>MIN_SPEED {@link Integer}
     * <li>SIZE_1 {@link Integer}
     * <li>SCALE_1 {@link Integer}
     * <li>PRECISION_1 {@link Integer}
     * <li>START_TEMPERATURE {@link byte[]}
     * <li>SIZE_2 {@link Integer}
     * <li>SCALE_2 {@link Integer}
     * <li>PRECISION_2 {@link Integer}
     * <li>STOP_TEMPERATURE {@link byte[]}
     * <li>SIZE_3 {@link Integer}
     * <li>SCALE_3 {@link Integer}
     * <li>PRECISION_3 {@link Integer}
     * <li>ALARM_TEMPERATURE_VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanSetupReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'Mode'
        response.put("MODE", constantMode.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Boost Time'
        response.put("BOOST_TIME", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Stop Time'
        response.put("STOP_TIME", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Min. Speed'
        response.put("MIN_SPEED", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("SIZE_1", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE_1", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION_1", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Start Temperature'
        int valStartTemperature = 0;
        int lenStartTemperature = payload[3] & 0x07;
        for (int cntStartTemperature = 0; cntStartTemperature < lenStartTemperature; cntStartTemperature++) {
            valStartTemperature = (valStartTemperature << 8) + payload[msgOffset + cntStartTemperature];
        }
        response.put("START_TEMPERATURE", valStartTemperature);
        msgOffset += lenStartTemperature;

        // Process 'Properties2'
        response.put("SIZE_2", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE_2", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION_2", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Stop Temperature'
        int valStopTemperature = 0;
        int lenStopTemperature = payload[3] & 0x07;
        for (int cntStopTemperature = 0; cntStopTemperature < lenStopTemperature; cntStopTemperature++) {
            valStopTemperature = (valStopTemperature << 8) + payload[msgOffset + cntStopTemperature];
        }
        response.put("STOP_TEMPERATURE", valStopTemperature);
        msgOffset += lenStopTemperature;

        // Process 'Properties3'
        response.put("SIZE_3", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE_3", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION_3", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Alarm Temperature Value'
        int valAlarmTemperatureValue = 0;
        int lenAlarmTemperatureValue = payload[3] & 0x07;
        for (int cntAlarmTemperatureValue = 0; cntAlarmTemperatureValue < lenAlarmTemperatureValue; cntAlarmTemperatureValue++) {
            valAlarmTemperatureValue = (valAlarmTemperatureValue << 8) + payload[msgOffset + cntAlarmTemperatureValue];
        }
        response.put("ALARM_TEMPERATURE_VALUE", valAlarmTemperatureValue);
        msgOffset += lenAlarmTemperatureValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STATUS_GET command.<br>
     * <p>
     * Chimney Fan Status Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStatusGet() {
        logger.debug("Creating command message CHIMNEY_FAN_STATUS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STATUS_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STATUS_GET command<br>
     * <p>
     * Chimney Fan Status Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStatusGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_STATUS_REPORT command.<br>
     * <p>
     * Chimney Fan Status Report<br>
     *
     * @param state {@link String}
     * @param speed {@link Integer}
     * @param service {@link Boolean}
     * @param externalAlarm {@link Boolean}
     * @param sensorError {@link Boolean}
     * @param alarmTemperatureExceeded {@link Boolean}
     * @param speedChangeEnable {@link Boolean}
     * @param startTemperatureExceeded {@link Boolean}
     * @param size {@link Integer}
     * @param scale {@link Integer}
     * @param precision {@link Integer}
     * @param value {@link byte[]}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanStatusReport(String state, Integer speed, Boolean service, Boolean externalAlarm,
            Boolean sensorError, Boolean alarmTemperatureExceeded, Boolean speedChangeEnable,
            Boolean startTemperatureExceeded, Integer size, Integer scale, Integer precision, byte[] value) {
        logger.debug("Creating command message CHIMNEY_FAN_STATUS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_STATUS_REPORT);

        // Process 'State'
        for (Integer entry : constantState.keySet()) {
            if (constantState.get(entry).equals(state)) {
                outputData.write(entry);
                break;
            }
        }

        // Process 'Speed'
        outputData.write(speed);

        // Process 'Alarm Status'
        int valAlarmStatus = 0;
        valAlarmStatus |= service ? 0x01 : 0;
        valAlarmStatus |= externalAlarm ? 0x02 : 0;
        valAlarmStatus |= sensorError ? 0x04 : 0;
        valAlarmStatus |= alarmTemperatureExceeded ? 0x08 : 0;
        valAlarmStatus |= speedChangeEnable ? 0x40 : 0;
        valAlarmStatus |= startTemperatureExceeded ? 0x80 : 0;
        outputData.write(valAlarmStatus);

        // Process 'Properties1'
        int valProperties1 = 0;
        valProperties1 |= size & 0x07;
        valProperties1 |= ((scale << 3) & 0x18);
        valProperties1 |= ((precision << 5) & 0xE0);
        outputData.write(valProperties1);

        // Process 'Value'
        try {
            outputData.write(value);
        } catch (IOException e) {
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_STATUS_REPORT command<br>
     * <p>
     * Chimney Fan Status Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>STATE {@link String}
     * <li>SPEED {@link Integer}
     * <li>SERVICE {@link Boolean}
     * <li>EXTERNAL_ALARM {@link Boolean}
     * <li>SENSOR_ERROR {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED {@link Boolean}
     * <li>SPEED_CHANGE_ENABLE {@link Boolean}
     * <li>START_TEMPERATURE_EXCEEDED {@link Boolean}
     * <li>SIZE {@link Integer}
     * <li>SCALE {@link Integer}
     * <li>PRECISION {@link Integer}
     * <li>VALUE {@link byte[]}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'State'
        response.put("STATE", constantState.get(payload[msgOffset] & 0xff));
        msgOffset += 1;

        // Process 'Speed'
        response.put("SPEED", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Alarm Status'
        response.put("SERVICE", Boolean.valueOf((payload[msgOffset] & 0x01) != 0));
        response.put("EXTERNAL_ALARM", Boolean.valueOf((payload[msgOffset] & 0x02) != 0));
        response.put("SENSOR_ERROR", Boolean.valueOf((payload[msgOffset] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED", Boolean.valueOf((payload[msgOffset] & 0x08) != 0));
        response.put("SPEED_CHANGE_ENABLE", Boolean.valueOf((payload[msgOffset] & 0x40) != 0));
        response.put("START_TEMPERATURE_EXCEEDED", Boolean.valueOf((payload[msgOffset] & 0x80) != 0));
        msgOffset += 1;

        // Process 'Properties1'
        response.put("SIZE", Integer.valueOf(payload[msgOffset] & 0x07));
        response.put("SCALE", Integer.valueOf((payload[msgOffset] & 0x18 >> 3)));
        response.put("PRECISION", Integer.valueOf((payload[msgOffset] & 0xE0 >> 5)));
        msgOffset += 1;

        // Process 'Value'
        int valValue = 0;
        int lenValue = payload[3] & 0x07;
        for (int cntValue = 0; cntValue < lenValue; cntValue++) {
            valValue = (valValue << 8) + payload[msgOffset + cntValue];
        }
        response.put("VALUE", valValue);
        msgOffset += lenValue;

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_LOG_SET command.<br>
     * <p>
     * Chimney Fan Alarm Log Set<br>
     *
     * @param message {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmLogSet(String message) {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_LOG_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_LOG_SET);

        // Process 'Message'
        for (Integer entry : constantMessage.keySet()) {
            if (constantMessage.get(entry).equals(message)) {
                outputData.write(entry);
                break;
            }
        }

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_LOG_SET command<br>
     * <p>
     * Chimney Fan Alarm Log Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MESSAGE {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmLogSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Message'
        response.put("MESSAGE", constantMessage.get(payload[2] & 0xff));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_LOG_GET command.<br>
     * <p>
     * Chimney Fan Alarm Log Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmLogGet() {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_LOG_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_LOG_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_LOG_GET command<br>
     * <p>
     * Chimney Fan Alarm Log Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmLogGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_LOG_REPORT command.<br>
     * <p>
     * Chimney Fan Alarm Log Report<br>
     *
     * @param externalAlarm1 {@link Boolean}
     * @param sensorError1 {@link Boolean}
     * @param alarmTemperatureExceeded1 {@link Boolean}
     * @param alarmStillActive1 {@link Boolean}
     * @param externalAlarm2 {@link Boolean}
     * @param sensorError2 {@link Boolean}
     * @param alarmTemperatureExceeded2 {@link Boolean}
     * @param alarmStillActive2 {@link Boolean}
     * @param externalAlarm3 {@link Boolean}
     * @param sensorError3 {@link Boolean}
     * @param alarmTemperatureExceeded3 {@link Boolean}
     * @param alarmStillActive3 {@link Boolean}
     * @param externalAlarm4 {@link Boolean}
     * @param sensorError4 {@link Boolean}
     * @param alarmTemperatureExceeded4 {@link Boolean}
     * @param alarmStillActive4 {@link Boolean}
     * @param externalAlarm5 {@link Boolean}
     * @param sensorError5 {@link Boolean}
     * @param alarmTemperatureExceeded5 {@link Boolean}
     * @param alarmStillActive5 {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmLogReport(Boolean externalAlarm1, Boolean sensorError1,
            Boolean alarmTemperatureExceeded1, Boolean alarmStillActive1, Boolean externalAlarm2, Boolean sensorError2,
            Boolean alarmTemperatureExceeded2, Boolean alarmStillActive2, Boolean externalAlarm3, Boolean sensorError3,
            Boolean alarmTemperatureExceeded3, Boolean alarmStillActive3, Boolean externalAlarm4, Boolean sensorError4,
            Boolean alarmTemperatureExceeded4, Boolean alarmStillActive4, Boolean externalAlarm5, Boolean sensorError5,
            Boolean alarmTemperatureExceeded5, Boolean alarmStillActive5) {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_LOG_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_LOG_REPORT);

        // Process 'Alarm Event 1'
        int valAlarmEvent1 = 0;
        valAlarmEvent1 |= externalAlarm1 ? 0x02 : 0;
        valAlarmEvent1 |= sensorError1 ? 0x04 : 0;
        valAlarmEvent1 |= alarmTemperatureExceeded1 ? 0x08 : 0;
        valAlarmEvent1 |= alarmStillActive1 ? 0x80 : 0;
        outputData.write(valAlarmEvent1);

        // Process 'Alarm Event 2'
        int valAlarmEvent2 = 0;
        valAlarmEvent2 |= externalAlarm2 ? 0x02 : 0;
        valAlarmEvent2 |= sensorError2 ? 0x04 : 0;
        valAlarmEvent2 |= alarmTemperatureExceeded2 ? 0x08 : 0;
        valAlarmEvent2 |= alarmStillActive2 ? 0x80 : 0;
        outputData.write(valAlarmEvent2);

        // Process 'Alarm Event 3'
        int valAlarmEvent3 = 0;
        valAlarmEvent3 |= externalAlarm3 ? 0x02 : 0;
        valAlarmEvent3 |= sensorError3 ? 0x04 : 0;
        valAlarmEvent3 |= alarmTemperatureExceeded3 ? 0x08 : 0;
        valAlarmEvent3 |= alarmStillActive3 ? 0x80 : 0;
        outputData.write(valAlarmEvent3);

        // Process 'Alarm Event 4'
        int valAlarmEvent4 = 0;
        valAlarmEvent4 |= externalAlarm4 ? 0x02 : 0;
        valAlarmEvent4 |= sensorError4 ? 0x04 : 0;
        valAlarmEvent4 |= alarmTemperatureExceeded4 ? 0x08 : 0;
        valAlarmEvent4 |= alarmStillActive4 ? 0x80 : 0;
        outputData.write(valAlarmEvent4);

        // Process 'Alarm Event 5'
        int valAlarmEvent5 = 0;
        valAlarmEvent5 |= externalAlarm5 ? 0x02 : 0;
        valAlarmEvent5 |= sensorError5 ? 0x04 : 0;
        valAlarmEvent5 |= alarmTemperatureExceeded5 ? 0x08 : 0;
        valAlarmEvent5 |= alarmStillActive5 ? 0x80 : 0;
        outputData.write(valAlarmEvent5);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_LOG_REPORT command<br>
     * <p>
     * Chimney Fan Alarm Log Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>EXTERNAL_ALARM_1 {@link Boolean}
     * <li>SENSOR_ERROR_1 {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED_1 {@link Boolean}
     * <li>ALARM_STILL_ACTIVE_1 {@link Boolean}
     * <li>EXTERNAL_ALARM_2 {@link Boolean}
     * <li>SENSOR_ERROR_2 {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED_2 {@link Boolean}
     * <li>ALARM_STILL_ACTIVE_2 {@link Boolean}
     * <li>EXTERNAL_ALARM_3 {@link Boolean}
     * <li>SENSOR_ERROR_3 {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED_3 {@link Boolean}
     * <li>ALARM_STILL_ACTIVE_3 {@link Boolean}
     * <li>EXTERNAL_ALARM_4 {@link Boolean}
     * <li>SENSOR_ERROR_4 {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED_4 {@link Boolean}
     * <li>ALARM_STILL_ACTIVE_4 {@link Boolean}
     * <li>EXTERNAL_ALARM_5 {@link Boolean}
     * <li>SENSOR_ERROR_5 {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED_5 {@link Boolean}
     * <li>ALARM_STILL_ACTIVE_5 {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmLogReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Alarm Event 1'
        response.put("EXTERNAL_ALARM_1", Boolean.valueOf((payload[2] & 0x02) != 0));
        response.put("SENSOR_ERROR_1", Boolean.valueOf((payload[2] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED_1", Boolean.valueOf((payload[2] & 0x08) != 0));
        response.put("ALARM_STILL_ACTIVE_1", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Process 'Alarm Event 2'
        response.put("EXTERNAL_ALARM_2", Boolean.valueOf((payload[3] & 0x02) != 0));
        response.put("SENSOR_ERROR_2", Boolean.valueOf((payload[3] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED_2", Boolean.valueOf((payload[3] & 0x08) != 0));
        response.put("ALARM_STILL_ACTIVE_2", Boolean.valueOf((payload[3] & 0x80) != 0));

        // Process 'Alarm Event 3'
        response.put("EXTERNAL_ALARM_3", Boolean.valueOf((payload[4] & 0x02) != 0));
        response.put("SENSOR_ERROR_3", Boolean.valueOf((payload[4] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED_3", Boolean.valueOf((payload[4] & 0x08) != 0));
        response.put("ALARM_STILL_ACTIVE_3", Boolean.valueOf((payload[4] & 0x80) != 0));

        // Process 'Alarm Event 4'
        response.put("EXTERNAL_ALARM_4", Boolean.valueOf((payload[5] & 0x02) != 0));
        response.put("SENSOR_ERROR_4", Boolean.valueOf((payload[5] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED_4", Boolean.valueOf((payload[5] & 0x08) != 0));
        response.put("ALARM_STILL_ACTIVE_4", Boolean.valueOf((payload[5] & 0x80) != 0));

        // Process 'Alarm Event 5'
        response.put("EXTERNAL_ALARM_5", Boolean.valueOf((payload[6] & 0x02) != 0));
        response.put("SENSOR_ERROR_5", Boolean.valueOf((payload[6] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED_5", Boolean.valueOf((payload[6] & 0x08) != 0));
        response.put("ALARM_STILL_ACTIVE_5", Boolean.valueOf((payload[6] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_STATUS_SET command.<br>
     * <p>
     * Chimney Fan Alarm Status Set<br>
     *
     * @param acknowledgeExternalAlarm {@link Boolean}
     * @param acknowledgeSensorError {@link Boolean}
     * @param acknowledgeAlarmTemperatureExceeded {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmStatusSet(Boolean acknowledgeExternalAlarm, Boolean acknowledgeSensorError,
            Boolean acknowledgeAlarmTemperatureExceeded) {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_STATUS_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_STATUS_SET);

        // Process 'Message'
        int valMessage = 0;
        valMessage |= acknowledgeExternalAlarm ? 0x02 : 0;
        valMessage |= acknowledgeSensorError ? 0x04 : 0;
        valMessage |= acknowledgeAlarmTemperatureExceeded ? 0x08 : 0;
        outputData.write(valMessage);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_STATUS_SET command<br>
     * <p>
     * Chimney Fan Alarm Status Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>ACKNOWLEDGE_EXTERNAL_ALARM {@link Boolean}
     * <li>ACKNOWLEDGE_SENSOR_ERROR {@link Boolean}
     * <li>ACKNOWLEDGE_ALARM_TEMPERATURE_EXCEEDED {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmStatusSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Message'
        response.put("ACKNOWLEDGE_EXTERNAL_ALARM", Boolean.valueOf((payload[2] & 0x02) != 0));
        response.put("ACKNOWLEDGE_SENSOR_ERROR", Boolean.valueOf((payload[2] & 0x04) != 0));
        response.put("ACKNOWLEDGE_ALARM_TEMPERATURE_EXCEEDED", Boolean.valueOf((payload[2] & 0x08) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_STATUS_GET command.<br>
     * <p>
     * Chimney Fan Alarm Status Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmStatusGet() {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_STATUS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_STATUS_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_STATUS_GET command<br>
     * <p>
     * Chimney Fan Alarm Status Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmStatusGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_ALARM_STATUS_REPORT command.<br>
     * <p>
     * Chimney Fan Alarm Status Report<br>
     *
     * @param service {@link Boolean}
     * @param externalAlarm {@link Boolean}
     * @param sensorError {@link Boolean}
     * @param alarmTemperatureExceeded {@link Boolean}
     * @param speedChangeEnable {@link Boolean}
     * @param startTemperatureExceeded {@link Boolean}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanAlarmStatusReport(Boolean service, Boolean externalAlarm, Boolean sensorError,
            Boolean alarmTemperatureExceeded, Boolean speedChangeEnable, Boolean startTemperatureExceeded) {
        logger.debug("Creating command message CHIMNEY_FAN_ALARM_STATUS_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_ALARM_STATUS_REPORT);

        // Process 'Alarm Status'
        int valAlarmStatus = 0;
        valAlarmStatus |= service ? 0x01 : 0;
        valAlarmStatus |= externalAlarm ? 0x02 : 0;
        valAlarmStatus |= sensorError ? 0x04 : 0;
        valAlarmStatus |= alarmTemperatureExceeded ? 0x08 : 0;
        valAlarmStatus |= speedChangeEnable ? 0x40 : 0;
        valAlarmStatus |= startTemperatureExceeded ? 0x80 : 0;
        outputData.write(valAlarmStatus);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_ALARM_STATUS_REPORT command<br>
     * <p>
     * Chimney Fan Alarm Status Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>SERVICE {@link Boolean}
     * <li>EXTERNAL_ALARM {@link Boolean}
     * <li>SENSOR_ERROR {@link Boolean}
     * <li>ALARM_TEMPERATURE_EXCEEDED {@link Boolean}
     * <li>SPEED_CHANGE_ENABLE {@link Boolean}
     * <li>START_TEMPERATURE_EXCEEDED {@link Boolean}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanAlarmStatusReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Alarm Status'
        response.put("SERVICE", Boolean.valueOf((payload[2] & 0x01) != 0));
        response.put("EXTERNAL_ALARM", Boolean.valueOf((payload[2] & 0x02) != 0));
        response.put("SENSOR_ERROR", Boolean.valueOf((payload[2] & 0x04) != 0));
        response.put("ALARM_TEMPERATURE_EXCEEDED", Boolean.valueOf((payload[2] & 0x08) != 0));
        response.put("SPEED_CHANGE_ENABLE", Boolean.valueOf((payload[2] & 0x40) != 0));
        response.put("START_TEMPERATURE_EXCEEDED", Boolean.valueOf((payload[2] & 0x80) != 0));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_MIN_SPEED_SET command.<br>
     * <p>
     * Chimney Fan Min Speed Set<br>
     *
     * @param minSpeed {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanMinSpeedSet(Integer minSpeed) {
        logger.debug("Creating command message CHIMNEY_FAN_MIN_SPEED_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_MIN_SPEED_SET);

        // Process 'Min Speed'
        outputData.write(minSpeed);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_MIN_SPEED_SET command<br>
     * <p>
     * Chimney Fan Min Speed Set<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MIN_SPEED {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanMinSpeedSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Min Speed'
        response.put("MIN_SPEED", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_MIN_SPEED_GET command.<br>
     * <p>
     * Chimney Fan Min Speed Get<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanMinSpeedGet() {
        logger.debug("Creating command message CHIMNEY_FAN_MIN_SPEED_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_MIN_SPEED_GET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_MIN_SPEED_GET command<br>
     * <p>
     * Chimney Fan Min Speed Get<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanMinSpeedGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_MIN_SPEED_REPORT command.<br>
     * <p>
     * Chimney Fan Min Speed Report<br>
     *
     * @param minSpeed {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanMinSpeedReport(Integer minSpeed) {
        logger.debug("Creating command message CHIMNEY_FAN_MIN_SPEED_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_MIN_SPEED_REPORT);

        // Process 'Min Speed'
        outputData.write(minSpeed);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_MIN_SPEED_REPORT command<br>
     * <p>
     * Chimney Fan Min Speed Report<br>
     * <p>
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>MIN_SPEED {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanMinSpeedReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Min Speed'
        response.put("MIN_SPEED", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the CHIMNEY_FAN_DEFAULT_SET command.<br>
     * <p>
     * Chimney Fan Default Set<br>
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getChimneyFanDefaultSet() {
        logger.debug("Creating command message CHIMNEY_FAN_DEFAULT_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(CHIMNEY_FAN_DEFAULT_SET);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the CHIMNEY_FAN_DEFAULT_SET command<br>
     * <p>
     * Chimney Fan Default Set<br>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleChimneyFanDefaultSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Return the map of processed response data;
        return response;
    }

}
