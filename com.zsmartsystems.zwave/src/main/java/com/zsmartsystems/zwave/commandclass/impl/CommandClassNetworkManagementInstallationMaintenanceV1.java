/**
 * Copyright (c) 2014-2016 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.lang.IllegalArgumentException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE</b> version <b>1</b>.<br>
 *
 * Command Class Network Management Installation and Maintenance<br>
 *
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.<br>
 *
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassNetworkManagementInstallationMaintenanceV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassNetworkManagementInstallationMaintenanceV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_NETWORK_MANAGEMENT_INSTALLATION_MAINTENANCE
     */
    public final static int COMMAND_CLASS_KEY = 0x67;

    /**
     * Last Working Route Set Command Constant
     */
    public final static int LAST_WORKING_ROUTE_SET = 0x01;
    /**
     * Last Working Route Get Command Constant
     */
    public final static int LAST_WORKING_ROUTE_GET = 0x02;
    /**
     * Last Working Route Report Command Constant
     */
    public final static int LAST_WORKING_ROUTE_REPORT = 0x03;
    /**
     * Statistics Get Command Constant
     */
    public final static int STATISTICS_GET = 0x04;
    /**
     * Statistics Report Command Constant
     */
    public final static int STATISTICS_REPORT = 0x05;
    /**
     * Statistics Clear Command Constant
     */
    public final static int STATISTICS_CLEAR = 0x06;

    /**
     * Creates a new message with the LAST_WORKING_ROUTE_SET command.<br>
     *
     * Last Working Route Set<br>
     *
     *
     * @param nodeid {@link Integer}
     * @param repeater1 {@link Integer}
     * @param repeater2 {@link Integer}
     * @param repeater3 {@link Integer}
     * @param repeater4 {@link Integer}
     * @param speed {@link String}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLastWorkingRouteSet(Integer nodeid, Integer repeater1, Integer repeater2, Integer repeater3,
            Integer repeater4, String speed) {
        logger.debug("Creating command message LAST_WORKING_ROUTE_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LAST_WORKING_ROUTE_SET);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        // Process 'Repeater 1'
        // Check the node number boundary
        if (repeater1 < 1 || repeater1 > 232) {
            logger.debug("Node number is out of bounds {}", repeater1);
            return null;
        }
        outputData.write(repeater1);

        // Process 'Repeater 2'
        // Check the node number boundary
        if (repeater2 < 1 || repeater2 > 232) {
            logger.debug("Node number is out of bounds {}", repeater2);
            return null;
        }
        outputData.write(repeater2);

        // Process 'Repeater 3'
        // Check the node number boundary
        if (repeater3 < 1 || repeater3 > 232) {
            logger.debug("Node number is out of bounds {}", repeater3);
            return null;
        }
        outputData.write(repeater3);

        // Process 'Repeater 4'
        // Check the node number boundary
        if (repeater4 < 1 || repeater4 > 232) {
            logger.debug("Node number is out of bounds {}", repeater4);
            return null;
        }
        outputData.write(repeater4);

        // Process 'Speed'
        switch (speed) {
            case "9_6_KBIT_SEC":
                outputData.write(0x01);
                break;
            case "40_KBIT_SEC":
                outputData.write(0x02);
                break;
            case "100_KBIT_SEC":
                outputData.write(0x03);
                break;
            default:
                throw new IllegalArgumentException("Unknown constant value for speed: " + speed);
        }

        return outputData.toByteArray();
    }

    /**
     * Creates a new message with the LAST_WORKING_ROUTE_GET command.<br>
     *
     * Last Working Route Get<br>
     *
     *
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getLastWorkingRouteGet(Integer nodeid) {
        logger.debug("Creating command message LAST_WORKING_ROUTE_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(LAST_WORKING_ROUTE_GET);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the LAST_WORKING_ROUTE_REPORT command<br>
     *
     * Last Working Route Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * <li>REPEATER_1 {@link Integer}
     * <li>REPEATER_2 {@link Integer}
     * <li>REPEATER_3 {@link Integer}
     * <li>REPEATER_4 {@link Integer}
     * <li>SPEED {@link String}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleLastWorkingRouteReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[2]));

        // Process 'Repeater 1'
        response.put("REPEATER_1", Integer.valueOf(payload[3]));

        // Process 'Repeater 2'
        response.put("REPEATER_2", Integer.valueOf(payload[4]));

        // Process 'Repeater 3'
        response.put("REPEATER_3", Integer.valueOf(payload[5]));

        // Process 'Repeater 4'
        response.put("REPEATER_4", Integer.valueOf(payload[6]));

        // Process 'Speed'
        switch ((int) payload[7]) {
            case (byte) 0x01:
                response.put("SPEED", "9_6_KBIT_SEC");
                break;
            case (byte) 0x02:
                response.put("SPEED", "40_KBIT_SEC");
                break;
            case (byte) 0x03:
                response.put("SPEED", "100_KBIT_SEC");
                break;
            default:
                logger.debug("Unknown value {} for constant 'SPEED'", String.format("%02X", payload[7]));
                response.put("SPEED", "UNKNOWN_" + String.format("%02X", payload[7]));
                break;
        }

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the STATISTICS_GET command.<br>
     *
     * Statistics Get<br>
     *
     *
     * @param nodeid {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getStatisticsGet(Integer nodeid) {
        logger.debug("Creating command message STATISTICS_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(STATISTICS_GET);

        // Process 'NodeID'
        // Check the node number boundary
        if (nodeid < 1 || nodeid > 232) {
            logger.debug("Node number is out of bounds {}", nodeid);
            return null;
        }
        outputData.write(nodeid);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the STATISTICS_REPORT command<br>
     *
     * Statistics Report<br>
     *
     *
     * The output data {@link Map} has the following properties<br>
     *
     * <ul>
     * <li>NODEID {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleStatisticsReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // We're using variable length fields, so track the offset
        int msgOffset = 2;

        // Process 'NodeID'
        response.put("NODEID", Integer.valueOf(payload[msgOffset]));
        msgOffset += 1;

        // Process 'Statistics'

        // Create a list to hold the group Statistics
        List<Map<String, Object>> variantList = new ArrayList<Map<String, Object>>();

        int offset = msgOffset;
        while (offset < payload.length) {
            // Create a map to hold the members of this variant
            Map<String, Object> variant = new HashMap<String, Object>();

            // Process 'Type'
            switch ((int) payload[msgOffset]) {
                case (byte) 0x00:
                    variant.put("TYPE", "ROUTE_CHANGES");
                    break;
                case (byte) 0x01:
                    variant.put("TYPE", "TRANSMISSION_COUNT");
                    break;
                case (byte) 0x02:
                    variant.put("TYPE", "NEIGHBORS");
                    break;
                case (byte) 0x03:
                    variant.put("TYPE", "PACKET_ERROR_COUNT");
                    break;
                case (byte) 0x04:
                    variant.put("TYPE", "SUM_OF_TRANSMISSION_TIMES");
                    break;
                case (byte) 0x05:
                    variant.put("TYPE", "SUM_OF_TRANSMISSION_TIMES_SQURARED");
                    break;
                default:
                    logger.debug("Unknown value {} for constant 'TYPE'", String.format("%02X", payload[msgOffset]));
                    variant.put("TYPE", "UNKNOWN_" + String.format("%02X", payload[msgOffset]));
                    break;
            }
            msgOffset += 1;

            // Process 'Length'
            variant.put("LENGTH", Integer.valueOf(payload[msgOffset]));
            msgOffset += 1;

            // Process 'Value'
            int valValue = 0;
            int lenValue = payload[msgOffset - 1];
            for (int cntValue = 0; cntValue < lenValue; cntValue++) {
                valValue = (valValue << 8) + payload[msgOffset + cntValue];
            }
            variant.put("VALUE", valValue);
            msgOffset += lenValue;

        }

        // Add the variant list to the response
        response.put("STATISTICS", variantList);

        // Return the map of processed response data;
        return response;
    }

    /**
     * Creates a new message with the STATISTICS_CLEAR command.<br>
     *
     * Statistics Clear<br>
     *
     *
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getStatisticsClear() {
        logger.debug("Creating command message STATISTICS_CLEAR version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(STATISTICS_CLEAR);

        return outputData.toByteArray();
    }

}
