/**
 * Copyright (c) 2016-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.zwave.commandclass.impl;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class to implement the Z-Wave command class <b>COMMAND_CLASS_REMOTE_ASSOCIATION</b> version <b>1</b>.
 * <p>
 * Command Class Remote Association
 * <p>
 * This class provides static methods for processing received messages (message handler) and
 * methods to get a message to send on the Z-Wave network.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class CommandClassRemoteAssociationV1 {
    private static final Logger logger = LoggerFactory.getLogger(CommandClassRemoteAssociationV1.class);

    /**
     * Integer command class key for COMMAND_CLASS_REMOTE_ASSOCIATION
     */
    public final static int COMMAND_CLASS_KEY = 0x7D;

    /**
     * Remote Association Configuration Set Command Constant
     */
    public final static int REMOTE_ASSOCIATION_CONFIGURATION_SET = 0x01;
    /**
     * Remote Association Configuration Get Command Constant
     */
    public final static int REMOTE_ASSOCIATION_CONFIGURATION_GET = 0x02;
    /**
     * Remote Association Configuration Report Command Constant
     */
    public final static int REMOTE_ASSOCIATION_CONFIGURATION_REPORT = 0x03;


    /**
     * Map holding constants for Remote NodeID
     */
    private static Map<Integer, String> constantRemoteNodeid = new HashMap<Integer, String>();

    /**
     * Map holding constants for Local Grouping identifier
     */
    private static Map<Integer, String> constantLocalGroupingIdentifier = new HashMap<Integer, String>();
    static {

        // Constants for Remote NodeID
        constantRemoteNodeid.put(0x00, "REMOVE_A_LINK");

        // Constants for Local Grouping identifier
        constantLocalGroupingIdentifier.put(0x00, "ERASE_ALL_LIN");
    }

    /**
     * Creates a new message with the REMOTE_ASSOCIATION_CONFIGURATION_SET command.
     * <p>
     * Remote Association Configuration Set
     *
     * @param localGroupingIdentifier {@link String}
     * @param remoteNodeid {@link String}
     * @param remoteGroupingIdentifier {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getRemoteAssociationConfigurationSet(String localGroupingIdentifier, String remoteNodeid,
            Integer remoteGroupingIdentifier) {
        logger.debug("Creating command message REMOTE_ASSOCIATION_CONFIGURATION_SET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(REMOTE_ASSOCIATION_CONFIGURATION_SET);

        // Process 'Local Grouping identifier'
        boolean foundLocalGroupingIdentifier = false;
        for (Integer entry : constantLocalGroupingIdentifier.keySet()) {
            if (constantLocalGroupingIdentifier.get(entry).equals(localGroupingIdentifier)) {
                outputData.write(entry);
                foundLocalGroupingIdentifier = true;
                break;
            }
        }
        if (!foundLocalGroupingIdentifier) {
            throw new IllegalArgumentException("Unknown constant value '" + localGroupingIdentifier + "' for localGroupingIdentifier");
        }

        // Process 'Remote NodeID'
        boolean foundRemoteNodeid = false;
        for (Integer entry : constantRemoteNodeid.keySet()) {
            if (constantRemoteNodeid.get(entry).equals(remoteNodeid)) {
                outputData.write(entry);
                foundRemoteNodeid = true;
                break;
            }
        }
        if (!foundRemoteNodeid) {
            throw new IllegalArgumentException("Unknown constant value '" + remoteNodeid + "' for remoteNodeid");
        }

        // Process 'Remote Grouping identifier'
        outputData.write(remoteGroupingIdentifier);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the REMOTE_ASSOCIATION_CONFIGURATION_SET command.
     * <p>
     * Remote Association Configuration Set
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>LOCAL_GROUPING_IDENTIFIER {@link String}
     * <li>REMOTE_NODEID {@link String}
     * <li>REMOTE_GROUPING_IDENTIFIER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleRemoteAssociationConfigurationSet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Local Grouping identifier'
        response.put("LOCAL_GROUPING_IDENTIFIER", constantLocalGroupingIdentifier.get(payload[2] & 0xff));

        // Process 'Remote NodeID'
        response.put("REMOTE_NODEID", constantRemoteNodeid.get(payload[3] & 0xff));

        // Process 'Remote Grouping identifier'
        response.put("REMOTE_GROUPING_IDENTIFIER", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the REMOTE_ASSOCIATION_CONFIGURATION_GET command.
     * <p>
     * Remote Association Configuration Get
     *
     * @param localGroupingIdentifier {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getRemoteAssociationConfigurationGet(Integer localGroupingIdentifier) {
        logger.debug("Creating command message REMOTE_ASSOCIATION_CONFIGURATION_GET version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(REMOTE_ASSOCIATION_CONFIGURATION_GET);

        // Process 'Local Grouping identifier'
        outputData.write(localGroupingIdentifier);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the REMOTE_ASSOCIATION_CONFIGURATION_GET command.
     * <p>
     * Remote Association Configuration Get
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>LOCAL_GROUPING_IDENTIFIER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleRemoteAssociationConfigurationGet(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Local Grouping identifier'
        response.put("LOCAL_GROUPING_IDENTIFIER", Integer.valueOf(payload[2]));

        // Return the map of processed response data;
        return response;
    }


    /**
     * Creates a new message with the REMOTE_ASSOCIATION_CONFIGURATION_REPORT command.
     * <p>
     * Remote Association Configuration Report
     *
     * @param localGroupingIdentifier {@link String}
     * @param remoteNodeid {@link String}
     * @param remoteGroupingIdentifier {@link Integer}
     * @return the {@link byte[]} array with the command to send
     */
    static public byte[] getRemoteAssociationConfigurationReport(String localGroupingIdentifier, String remoteNodeid,
            Integer remoteGroupingIdentifier) {
        logger.debug("Creating command message REMOTE_ASSOCIATION_CONFIGURATION_REPORT version 1");

        ByteArrayOutputStream outputData = new ByteArrayOutputStream();
        outputData.write(COMMAND_CLASS_KEY);
        outputData.write(REMOTE_ASSOCIATION_CONFIGURATION_REPORT);

        // Process 'Local Grouping identifier'
        boolean foundLocalGroupingIdentifier = false;
        for (Integer entry : constantLocalGroupingIdentifier.keySet()) {
            if (constantLocalGroupingIdentifier.get(entry).equals(localGroupingIdentifier)) {
                outputData.write(entry);
                foundLocalGroupingIdentifier = true;
                break;
            }
        }
        if (!foundLocalGroupingIdentifier) {
            throw new IllegalArgumentException("Unknown constant value '" + localGroupingIdentifier + "' for localGroupingIdentifier");
        }

        // Process 'Remote NodeID'
        boolean foundRemoteNodeid = false;
        for (Integer entry : constantRemoteNodeid.keySet()) {
            if (constantRemoteNodeid.get(entry).equals(remoteNodeid)) {
                outputData.write(entry);
                foundRemoteNodeid = true;
                break;
            }
        }
        if (!foundRemoteNodeid) {
            throw new IllegalArgumentException("Unknown constant value '" + remoteNodeid + "' for remoteNodeid");
        }

        // Process 'Remote Grouping identifier'
        outputData.write(remoteGroupingIdentifier);

        return outputData.toByteArray();
    }

    /**
     * Processes a received frame with the REMOTE_ASSOCIATION_CONFIGURATION_REPORT command.
     * <p>
     * Remote Association Configuration Report
     * <p>
     * The output data {@link Map} has the following properties -:
     *
     * <ul>
     * <li>LOCAL_GROUPING_IDENTIFIER {@link String}
     * <li>REMOTE_NODEID {@link String}
     * <li>REMOTE_GROUPING_IDENTIFIER {@link Integer}
     * </ul>
     *
     * @param payload the {@link byte[]} payload data to process
     * @return a {@link Map} of processed response data
     */
    public static Map<String, Object> handleRemoteAssociationConfigurationReport(byte[] payload) {
        // Create our response map
        Map<String, Object> response = new HashMap<String, Object>();

        // Process 'Local Grouping identifier'
        response.put("LOCAL_GROUPING_IDENTIFIER", constantLocalGroupingIdentifier.get(payload[2] & 0xff));

        // Process 'Remote NodeID'
        response.put("REMOTE_NODEID", constantRemoteNodeid.get(payload[3] & 0xff));

        // Process 'Remote Grouping identifier'
        response.put("REMOTE_GROUPING_IDENTIFIER", Integer.valueOf(payload[4]));

        // Return the map of processed response data;
        return response;
    }

}
